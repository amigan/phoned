cscope 15 /usr/home/dcp1990/prog/phd/phoned/phoned               0000158233
	@cfg.c

5 
	~<°dio.h
>

6 
	~<°rög.h
>

7 
	~<ph⁄ed.h
>

8 
	~<uni°d.h
>

9 
	~<°dlib.h
>

10 
c⁄f
 
	gcf
;

11 
	$ªad_c⁄fig
()

13 
FILE
* 
c⁄
;

14 
c⁄
 = 
	`f›í
(
cf
.
cfûe
, "r");

15 if(!
c⁄
) {

16 
	`≥º‹
("error opening config file");

17 
	`exô
(-1);

19 
	`∑r£
(&
c⁄
);

20 
	`f˛o£
(
c⁄
);

21 
	}
}

	@init.c

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

8 
	~<°rög.h
>

9 
	~<°dlib.h
>

11 
	~<ph⁄ed.h
>

13 
FILE
* 
logf
;

14 
difÊog
;

15 
c⁄f
 
cf
;

17 
	$shutd
()

19 
	`Õrötf
(
Áèl
, "phoned shutting down...\n");

20 
	`f˛o£
(
logf
);

21 
	`u∆ök
(
SOCKETFILE
);

22 
	}
}

24 
	$›í_logs
()

26 
logf
 = 
	`f›í
(
difÊog
 ? 
cf
.
logfûe
 : 
LOGFILE
, "a");

27 if(!
logf
) {

28 
	`≥º‹
("logf open");

29 
	`exô
(-1);

31 
	`Õrötf
(
öfo
, "ph⁄ed v" 
VERSION
 " starting..\n");

32 
	}
}

34 
	$öôülize
()

36 
	`›í_logs
();

37 
	`ö°Æl_h™dÀrs
();

38 
	`ªad_c⁄fig
();

39 
	}
}

	@lex.yy.c

8 #i‡
deföed
(
__FªeBSD__
)

9 
	~<sys/cdefs.h
>

11 
	#__unu£d


	)

14 
	#FLEX_SCANNER


	)

15 
	#YY_FLEX_MAJOR_VERSION
 2

	)

16 
	#YY_FLEX_MINOR_VERSION
 5

	)

18 
	~<°dio.h
>

22 #ifde‡
c_∂u•lus


23 #i‚de‡
__˝lu•lus


24 
	#__˝lu•lus


	)

29 #ifde‡
__˝lu•lus


31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

35 
	#YY_USE_PROTOS


	)

38 
	#YY_USE_CONST


	)

42 #i‡
__STDC__


44 
	#YY_USE_PROTOS


	)

45 
	#YY_USE_CONST


	)

50 #ifde‡
__TURBOC__


51 #¥agm®
w¨n
 -
rch


52 #¥agm®
w¨n
 -
u£


53 
	~<io.h
>

54 
	~<°dlib.h
>

55 
	#YY_USE_CONST


	)

56 
	#YY_USE_PROTOS


	)

59 #ifde‡
YY_USE_CONST


60 
	#yyc⁄°
 c⁄°

	)

62 
	#yyc⁄°


	)

66 #ifde‡
YY_USE_PROTOS


67 
	#YY_PROTO
(
¥Ÿo
Ë
	)
proto

69 
	#YY_PROTO
(
¥Ÿo
Ë()

	)

73 
	#YY_NULL
 0

	)

80 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

86 
	#BEGIN
 
yy_°¨t
 = 1 + 2 *

	)

92 
	#YY_START
 ((
yy_°¨t
 - 1Ë/ 2)

	)

93 
	#YYSTATE
 
YY_START


	)

96 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

99 
	#YY_NEW_FILE
 
	`yyª°¨t
–
yyö
 )

	)

101 
	#YY_END_OF_BUFFER_CHAR
 0

	)

104 
	#YY_BUF_SIZE
 16384

	)

106 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

108 
yyÀng
;

109 
FILE
 *
yyö
, *
yyout
;

111 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

112 
	#EOB_ACT_END_OF_FILE
 1

	)

113 
	#EOB_ACT_LAST_MATCH
 2

	)

131 
	#yyÀss
(
n
) \

135 *
yy_˝
 = 
yy_hﬁd_ch¨
; \

136 
YY_RESTORE_YY_MORE_OFFSET
 \

137 
yy_c_buf_p
 = 
yy_˝
 = 
yy_bp
 + 
n
 - 
YY_MORE_ADJ
; \

138 
YY_DO_BEFORE_ACTION
; \

140  0 )

	)

142 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, 
yyãxt_±r
 )

	)

148 
	tyy_size_t
;

151 
	syy_buf„r_°©e


153 
FILE
 *
	myy_öput_fûe
;

155 *
	myy_ch_buf
;

156 *
	myy_buf_pos
;

161 
yy_size_t
 
	myy_buf_size
;

166 
	myy_n_ch¨s
;

172 
	myy_is_our_buf„r
;

179 
	myy_is_öãø˘ive
;

185 
	myy_©_bﬁ
;

190 
	myy_fûl_buf„r
;

192 
	myy_buf„r_°©us
;

193 
	#YY_BUFFER_NEW
 0

	)

194 
	#YY_BUFFER_NORMAL
 1

	)

205 
	#YY_BUFFER_EOF_PENDING
 2

	)

208 
YY_BUFFER_STATE
 
	gyy_cuºít_buf„r
 = 0;

214 
	#YY_CURRENT_BUFFER
 
yy_cuºít_buf„r


	)

218 
	gyy_hﬁd_ch¨
;

220 
	gyy_n_ch¨s
;

223 
	gyyÀng
;

226 *
	gyy_c_buf_p
 = (*) 0;

227 
	gyy_öô
 = 1;

228 
	gyy_°¨t
 = 0;

233 
	gyy_did_buf„r_swôch_⁄_eof
;

235 
yyª°¨t
 
YY_PROTO
(–
FILE
 *
öput_fûe
 ));

237 
yy_swôch_to_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
√w_buf„r
 ));

238 
yy_lﬂd_buf„r_°©e
 
YY_PROTO
(( ));

239 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 
YY_PROTO
(–
FILE
 *
fûe
, 
size
 ));

240 
yy_dñëe_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
b
 ));

241 
yy_öô_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
b
, 
FILE
 *
fûe
 ));

242 
yy_Êush_buf„r
 
YY_PROTO
(–
YY_BUFFER_STATE
 
b
 ));

243 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
–
yy_cuºít_buf„r
 )

	)

245 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 
YY_PROTO
(–*
ba£
, 
yy_size_t
 
size
 ));

246 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 
YY_PROTO
(–
yyc⁄°
 *
yy_°r
 ));

247 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 
YY_PROTO
(–
yyc⁄°
 *
byãs
, 
Àn
 ));

249 *
yy_Êex_Æloc
 
YY_PROTO
(–
yy_size_t
 ));

250 *
yy_Êex_ªÆloc
 
YY_PROTO
(–*, 
yy_size_t
 )Ë
	g__unu£d
;

251 
yy_Êex_‰ì
 
YY_PROTO
(( * ));

253 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

255 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

257 i‡–! 
yy_cuºít_buf„r
 ) \

258 
yy_cuºít_buf„r
 = 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

259 
yy_cuºít_buf„r
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

260 }

	)

262 
	#yy_£t_bﬁ
(
©_bﬁ
) \

264 i‡–! 
yy_cuºít_buf„r
 ) \

265 
yy_cuºít_buf„r
 = 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 ); \

266 
yy_cuºít_buf„r
->
yy_©_bﬁ
 = 
©_bﬁ
; \

267 }

	)

269 
	#YY_AT_BOL
(Ë(
yy_cuºít_buf„r
->
yy_©_bﬁ
)

	)

272 
	#YY_USES_REJECT


	)

273 
	tYY_CHAR
;

274 
FILE
 *
	gyyö
 = (FILE *Ë0, *
	gyyout
 = (FILE *) 0;

275 
	tyy_°©e_ty≥
;

276 *
yyãxt
;

277 
	#yyãxt_±r
 
yyãxt


	)

279 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 
YY_PROTO
(( ));

280 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 
YY_PROTO
(–yy_°©e_ty≥ 
cuºít_°©e
 ));

281 
yy_gë_√xt_buf„r
 
YY_PROTO
(( ));

282 
yy_Áèl_îr‹
 
YY_PROTO
(–
yyc⁄°
 
msg
[] ));

287 
	#YY_DO_BEFORE_ACTION
 \

288 
yyãxt_±r
 = 
yy_bp
; \

289 
yyÀng
 = (Ë(
yy_˝
 - 
yy_bp
); \

290 
yy_hﬁd_ch¨
 = *
yy_˝
; \

291 *
yy_˝
 = '\0'; \

292 
yy_c_buf_p
 = 
yy_˝
;

	)

294 
	#YY_NUM_RULES
 9

	)

295 
	#YY_END_OF_BUFFER
 10

	)

296 
yyc⁄°
 
	gyy_ac˛i°
[26] =

303 
yyc⁄°
 
	gyy_ac˚±
[33] =

311 
yyc⁄°
 
	gyy_ec
[256] =

343 
yyc⁄°
 
	gyy_mëa
[15] =

349 
yyc⁄°
 
	gyy_ba£
[32] =

357 
yyc⁄°
 
	gyy_def
[32] =

365 
yyc⁄°
 
	gyy_nxt
[56] =

375 
yyc⁄°
 
	gyy_chk
[56] =

385 
yy_°©e_ty≥
 
	gyy_°©e_buf
[
YY_BUF_SIZE
 + 2], *
	gyy_°©e_±r
;

386 *
	gyy_fuŒ_m©ch
;

387 
	gyy_Õ
;

388 
	#REJECT
 \

390 *
yy_˝
 = 
yy_hﬁd_ch¨
; \

391 
yy_˝
 = 
yy_fuŒ_m©ch
; \

392 ++
yy_Õ
; \

393 
föd_ruÀ
; \

394 }

	)

395 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

396 
	#YY_MORE_ADJ
 0

	)

397 
	#YY_RESTORE_YY_MORE_OFFSET


	)

398 *
	gyyãxt
;

400 
	#INITIAL
 0

	)

403 
	~<°dio.h
>

404 
	~"y.èb.h
"

405 
	~<ph⁄ed.h
>

406 
chr˙t
, 
lö˙t
;

413 #i‚de‡
YY_SKIP_YYWRAP


414 #ifde‡
__˝lu•lus


415 "C" 
yywøp
 
YY_PROTO
(( ));

417 
yywøp
 
YY_PROTO
(( ));

421 #i‚de‡
YY_NO_UNPUT


422 
yyu≈ut
 
YY_PROTO
(–
c
, *
buf_±r
 ));

425 #i‚de‡
yyãxt_±r


426 
yy_Êex_°∫˝y
 
YY_PROTO
(–*, 
yyc⁄°
 *, ));

429 #ifde‡
YY_NEED_STRLEN


430 
yy_Êex_°æí
 
YY_PROTO
(–
yyc⁄°
 * ));

433 #i‚de‡
YY_NO_INPUT


434 #ifde‡
__˝lu•lus


435 
yyöput
 
YY_PROTO
(( ));

437 
öput
 
YY_PROTO
(( ));

441 #i‡
YY_STACK_USED


442 
	gyy_°¨t_°ack_±r
 = 0;

443 
	gyy_°¨t_°ack_dïth
 = 0;

444 *
	gyy_°¨t_°ack
 = 0;

445 #i‚de‡
YY_NO_PUSH_STATE


446 
yy_push_°©e
 
YY_PROTO
(–
√w_°©e
 ));

448 #i‚de‡
YY_NO_POP_STATE


449 
yy_p›_°©e
 
YY_PROTO
(( ));

451 #i‚de‡
YY_NO_TOP_STATE


452 
yy_t›_°©e
 
YY_PROTO
(( ));

456 
	#YY_NO_PUSH_STATE
 1

	)

457 
	#YY_NO_POP_STATE
 1

	)

458 
	#YY_NO_TOP_STATE
 1

	)

461 #ifde‡
YY_MALLOC_DECL


462 
	gYY_MALLOC_DECL


464 #i‡
__STDC__


465 #i‚de‡
__˝lu•lus


466 
	~<°dlib.h
>

477 #i‚de‡
YY_READ_BUF_SIZE


478 
	#YY_READ_BUF_SIZE
 8192

	)

483 #i‚de‡
ECHO


487 
	#ECHO
 (Ë
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )

	)

493 #i‚de‡
YY_INPUT


494 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

495 i‡–
yy_cuºít_buf„r
->
yy_is_öãø˘ive
 ) \

497 
c
 = '*', 
n
; \

498  
n
 = 0;Ç < 
max_size
 && \

499 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

500 
buf
[
n
] = (Ë
c
; \

501 i‡–
c
 == '\n' ) \

502 
buf
[
n
++] = (Ë
c
; \

503 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

504 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

505 
ªsu…
 = 
n
; \

507 i‡–((
ªsu…
 = 
	`‰ód
–
buf
, 1, 
max_size
, 
yyö
 )) == 0) \

508 && 
	`„º‹
–
yyö
 ) ) \

509 
	`YY_FATAL_ERROR
–"öpuàö fÀx sˇ¬î faûed" );

	)

516 #i‚de‡
yyãrmö©e


517 
	#yyãrmö©e
(Ë 
YY_NULL


	)

521 #i‚de‡
YY_START_STACK_INCR


522 
	#YY_START_STACK_INCR
 25

	)

526 #i‚de‡
YY_FATAL_ERROR


527 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

533 #i‚de‡
YY_DECL


534 
	#YY_DECL
 
yyÀx
 
	`YY_PROTO
(–))

	)

540 #i‚de‡
YY_USER_ACTION


541 
	#YY_USER_ACTION


	)

545 #i‚de‡
YY_BREAK


546 
	#YY_BREAK
 ;

	)

549 
	#YY_RULE_SETUP
 \

550 
YY_USER_ACTION


	)

552 
	gYY_DECL


554 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

555 *
	gyy_˝
, *
	gyy_bp
;

556 
	gyy_a˘
;

562 i‡–
	gyy_öô
 )

564 
	gyy_öô
 = 0;

566 #ifde‡
YY_USER_INIT


567 
	gYY_USER_INIT
;

570 i‡–! 
	gyy_°¨t
 )

571 
	gyy_°¨t
 = 1;

573 i‡–! 
	gyyö
 )

574 
	gyyö
 = 
°dö
;

576 i‡–! 
	gyyout
 )

577 
	gyyout
 = 
°dout
;

579 i‡–! 
	gyy_cuºít_buf„r
 )

580 
	gyy_cuºít_buf„r
 =

581 
yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

583 
yy_lﬂd_buf„r_°©e
();

588 
	gyy_˝
 = 
yy_c_buf_p
;

591 *
	gyy_˝
 = 
yy_hﬁd_ch¨
;

596 
	gyy_bp
 = 
yy_˝
;

598 
	gyy_cuºít_°©e
 = 
yy_°¨t
;

599 
	gyy_°©e_±r
 = 
yy_°©e_buf
;

600 *
	gyy_°©e_±r
++ = 
yy_cuºít_°©e
;

601 
	gyy_m©ch
:

604 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

605  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

607 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

608 i‡–
	gyy_cuºít_°©e
 >= 32 )

609 
yy_c
 = 
yy_mëa
[() yy_c];

611 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

612 *
	gyy_°©e_±r
++ = 
yy_cuºít_°©e
;

613 ++
	gyy_˝
;

615  
	gyy_ba£
[
yy_cuºít_°©e
] != 41 );

617 
	gyy_föd_a˘i⁄
:

618 
yy_cuºít_°©e
 = *--
yy_°©e_±r
;

619 
	gyy_Õ
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

620 
	gföd_ruÀ
;

621 
	gföd_ruÀ
:

624 i‡–
	gyy_Õ
 && yy_Õ < 
	gyy_ac˚±
[
yy_cuºít_°©e
 + 1] )

626 
	gyy_a˘
 = 
yy_ac˛i°
[
yy_Õ
];

628 
	gyy_fuŒ_m©ch
 = 
yy_˝
;

632 --
	gyy_˝
;

633 
	gyy_cuºít_°©e
 = *--
yy_°©e_±r
;

634 
	gyy_Õ
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

637 
	gYY_DO_BEFORE_ACTION
;

640 
	gdo_a˘i⁄
:

643  
yy_a˘
 )

646 
YY_RULE_SETUP


648 ++
chr˙t
; 
	gREJECT
;

649 
YY_BREAK


651 
YY_RULE_SETUP


653  
NOTIFY
;

654 
YY_BREAK


656 
YY_RULE_SETUP


658  
OBRACE
;

659 
YY_BREAK


661 
YY_RULE_SETUP


663  
CBRACE
;

664 
YY_BREAK


666 
YY_RULE_SETUP


668 
yylvÆ
.
°rög
 = 
°rdup
(
yyãxt
);  
	gIPADDR
;

669 
YY_BREAK


671 
YY_RULE_SETUP


673  
SCOLON
;

674 
YY_BREAK


676 
YY_RULE_SETUP


678 
chr˙t
 = 0; ++
	glö˙t
;

679 
YY_BREAK


681 
YY_RULE_SETUP


684 
YY_BREAK


686 
YY_RULE_SETUP


688 
ECHO
;

689 
	gYY_BREAK


691 
YY_STATE_EOF
(
INITIAL
):

692 
yyãrmö©e
();

694 
	gYY_END_OF_BUFFER
:

697 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - 
yyãxt_±r
) - 1;

700 *
	gyy_˝
 = 
yy_hﬁd_ch¨
;

701 
YY_RESTORE_YY_MORE_OFFSET


703 i‡–
	gyy_cuºít_buf„r
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

714 
yy_n_ch¨s
 = 
yy_cuºít_buf„r
->yy_n_chars;

715 
	gyy_cuºít_buf„r
->
	gyy_öput_fûe
 = 
yyö
;

716 
	gyy_cuºít_buf„r
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

726 i‡–
	gyy_c_buf_p
 <&
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
] )

728 
yy_°©e_ty≥
 
yy_√xt_°©e
;

730 
	gyy_c_buf_p
 = 
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

732 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
();

743 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

745 
	gyy_bp
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

747 i‡–
	gyy_√xt_°©e
 )

750 
	gyy_˝
 = ++
yy_c_buf_p
;

751 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

752 
	gyy_m©ch
;

757 
	gyy_˝
 = 
yy_c_buf_p
;

758 
	gyy_föd_a˘i⁄
;

762  
yy_gë_√xt_buf„r
() )

764 
	gEOB_ACT_END_OF_FILE
:

766 
yy_did_buf„r_swôch_⁄_eof
 = 0;

768 i‡–
yywøp
() )

779 
	gyy_c_buf_p
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

781 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

782 
	gdo_a˘i⁄
;

787 i‡–! 
	gyy_did_buf„r_swôch_⁄_eof
 )

788 
	gYY_NEW_FILE
;

793 
	gEOB_ACT_CONTINUE_SCAN
:

794 
yy_c_buf_p
 =

795 
yyãxt_±r
 + 
yy_amou¡_of_m©ched_ãxt
;

797 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
();

799 
	gyy_˝
 = 
yy_c_buf_p
;

800 
	gyy_bp
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

801 
	gyy_m©ch
;

803 
	gEOB_ACT_LAST_MATCH
:

804 
yy_c_buf_p
 =

805 &
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
];

807 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
();

809 
	gyy_˝
 = 
yy_c_buf_p
;

810 
	gyy_bp
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
;

811 
	gyy_föd_a˘i⁄
;

817 
YY_FATAL_ERROR
(

832 
	$yy_gë_√xt_buf„r
()

834 *
de°
 = 
yy_cuºít_buf„r
->
yy_ch_buf
;

835 *
sour˚
 = 
yyãxt_±r
;

836 
numbî_to_move
, 
i
;

837 
ªt_vÆ
;

839 i‡–
yy_c_buf_p
 > &
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
 + 1] )

840 
	`YY_FATAL_ERROR
(

843 i‡–
yy_cuºít_buf„r
->
yy_fûl_buf„r
 == 0 )

845 i‡–
yy_c_buf_p
 - 
yyãxt_±r
 - 
YY_MORE_ADJ
 == 1 )

850  
EOB_ACT_END_OF_FILE
;

858  
EOB_ACT_LAST_MATCH
;

865 
numbî_to_move
 = (Ë(
yy_c_buf_p
 - 
yyãxt_±r
) - 1;

867  
i
 = 0; i < 
numbî_to_move
; ++i )

868 *(
de°
++Ë*(
sour˚
++);

870 i‡–
yy_cuºít_buf„r
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

874 
yy_cuºít_buf„r
->
yy_n_ch¨s
 = yy_n_chars = 0;

878 
num_to_ªad
 =

879 
yy_cuºít_buf„r
->
yy_buf_size
 - 
numbî_to_move
 - 1;

881  
num_to_ªad
 <= 0 )

883 #ifde‡
YY_USES_REJECT


884 
	`YY_FATAL_ERROR
(

889 
YY_BUFFER_STATE
 
b
 = 
yy_cuºít_buf„r
;

891 
yy_c_buf_p_off£t
 =

892 (Ë(
yy_c_buf_p
 - 
b
->
yy_ch_buf
);

894 i‡–
b
->
yy_is_our_buf„r
 )

896 
√w_size
 = 
b
->
yy_buf_size
 * 2;

898 i‡–
√w_size
 <= 0 )

899 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

901 
b
->
yy_buf_size
 *= 2;

903 
b
->
yy_ch_buf
 = (*)

905 
	`yy_Êex_ªÆloc
–(*Ë
b
->
yy_ch_buf
,

906 
b
->
yy_buf_size
 + 2 );

910 
b
->
yy_ch_buf
 = 0;

912 i‡–! 
b
->
yy_ch_buf
 )

913 
	`YY_FATAL_ERROR
(

916 
yy_c_buf_p
 = &
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

918 
num_to_ªad
 = 
yy_cuºít_buf„r
->
yy_buf_size
 -

919 
numbî_to_move
 - 1;

923 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

924 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

927 
	`YY_INPUT
–(&
yy_cuºít_buf„r
->
yy_ch_buf
[
numbî_to_move
]),

928 
yy_n_ch¨s
, 
num_to_ªad
 );

930 
yy_cuºít_buf„r
->
yy_n_ch¨s
 = yy_n_chars;

933 i‡–
yy_n_ch¨s
 == 0 )

935 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

937 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

938 
	`yyª°¨t
–
yyö
 );

943 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

944 
yy_cuºít_buf„r
->
yy_buf„r_°©us
 =

945 
YY_BUFFER_EOF_PENDING
;

950 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

952 
yy_n_ch¨s
 +
numbî_to_move
;

953 
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
] = 
YY_END_OF_BUFFER_CHAR
;

954 
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
 + 1] = 
YY_END_OF_BUFFER_CHAR
;

956 
yyãxt_±r
 = &
yy_cuºít_buf„r
->
yy_ch_buf
[0];

958  
ªt_vÆ
;

959 
	}
}

964 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
()

966 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

967 *
yy_˝
;

969 
yy_cuºít_°©e
 = 
yy_°¨t
;

970 
yy_°©e_±r
 = 
yy_°©e_buf
;

971 *
yy_°©e_±r
++ = 
yy_cuºít_°©e
;

973  
yy_˝
 = 
yyãxt_±r
 + 
YY_MORE_ADJ
; yy_˝ < 
yy_c_buf_p
; ++yy_cp )

975 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

976  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

978 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

979 i‡–
yy_cuºít_°©e
 >= 32 )

980 
yy_c
 = 
yy_mëa
[() yy_c];

982 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

983 *
yy_°©e_±r
++ = 
yy_cuºít_°©e
;

986  
yy_cuºít_°©e
;

987 
	}
}

996 #ifde‡
YY_USE_PROTOS


997 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
–
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

999 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
–
yy_cuºít_°©e
 )

1000 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1003 
yy_is_jam
;

1005 
YY_CHAR
 
yy_c
 = 1;

1006  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1008 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1009 i‡–
yy_cuºít_°©e
 >= 32 )

1010 
yy_c
 = 
yy_mëa
[() yy_c];

1012 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1013 
yy_is_jam
 = (
yy_cuºít_°©e
 == 31);

1014 i‡–! 
yy_is_jam
 )

1015 *
yy_°©e_±r
++ = 
yy_cuºít_°©e
;

1017  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1018 
	}
}

1021 #i‚de‡
YY_NO_UNPUT


1022 #ifde‡
YY_USE_PROTOS


1023 
	$yyu≈ut
–
c
, *
yy_bp
 )

1025 
	$yyu≈ut
–
c
, 
yy_bp
 )

1026 
c
;

1027 *
yy_bp
;

1030 *
yy_˝
 = 
yy_c_buf_p
;

1033 *
yy_˝
 = 
yy_hﬁd_ch¨
;

1035 i‡–
yy_˝
 < 
yy_cuºít_buf„r
->
yy_ch_buf
 + 2 )

1038 
numbî_to_move
 = 
yy_n_ch¨s
 + 2;

1039 *
de°
 = &
yy_cuºít_buf„r
->
yy_ch_buf
[

1040 
yy_cuºít_buf„r
->
yy_buf_size
 + 2];

1041 *
sour˚
 =

1042 &
yy_cuºít_buf„r
->
yy_ch_buf
[
numbî_to_move
];

1044  
sour˚
 > 
yy_cuºít_buf„r
->
yy_ch_buf
 )

1045 *--
de°
 = *--
sour˚
;

1047 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

1048 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

1049 
yy_cuºít_buf„r
->
yy_n_ch¨s
 =

1050 
yy_n_ch¨s
 = 
yy_cuºít_buf„r
->
yy_buf_size
;

1052 i‡–
yy_˝
 < 
yy_cuºít_buf„r
->
yy_ch_buf
 + 2 )

1053 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

1056 *--
yy_˝
 = (Ë
c
;

1059 
yyãxt_±r
 = 
yy_bp
;

1060 
yy_hﬁd_ch¨
 = *
yy_˝
;

1061 
yy_c_buf_p
 = 
yy_˝
;

1062 
	}
}

1066 #ifde‡
__˝lu•lus


1067 
	$yyöput
()

1069 
	$öput
()

1072 
c
;

1074 *
yy_c_buf_p
 = 
yy_hﬁd_ch¨
;

1076 i‡–*
yy_c_buf_p
 =
YY_END_OF_BUFFER_CHAR
 )

1082 i‡–
yy_c_buf_p
 < &
yy_cuºít_buf„r
->
yy_ch_buf
[
yy_n_ch¨s
] )

1084 *
yy_c_buf_p
 = '\0';

1088 
off£t
 = 
yy_c_buf_p
 - 
yyãxt_±r
;

1089 ++
yy_c_buf_p
;

1091  
	`yy_gë_√xt_buf„r
() )

1093 
EOB_ACT_LAST_MATCH
:

1105 
	`yyª°¨t
–
yyö
 );

1109 
EOB_ACT_END_OF_FILE
:

1111 i‡–
	`yywøp
() )

1112  
EOF
;

1114 i‡–! 
yy_did_buf„r_swôch_⁄_eof
 )

1115 
YY_NEW_FILE
;

1116 #ifde‡
__˝lu•lus


1117  
	`yyöput
();

1119  
	`öput
();

1123 
EOB_ACT_CONTINUE_SCAN
:

1124 
yy_c_buf_p
 = 
yyãxt_±r
 + 
off£t
;

1130 
c
 = *(*Ë
yy_c_buf_p
;

1131 *
yy_c_buf_p
 = '\0';

1132 
yy_hﬁd_ch¨
 = *++
yy_c_buf_p
;

1135  
c
;

1136 
	}
}

1139 #ifde‡
YY_USE_PROTOS


1140 
	$yyª°¨t
–
FILE
 *
öput_fûe
 )

1142 
	$yyª°¨t
–
öput_fûe
 )

1143 
FILE
 *
öput_fûe
;

1146 i‡–! 
yy_cuºít_buf„r
 )

1147 
yy_cuºít_buf„r
 = 
	`yy_¸óã_buf„r
–
yyö
, 
YY_BUF_SIZE
 );

1149 
	`yy_öô_buf„r
–
yy_cuºít_buf„r
, 
öput_fûe
 );

1150 
	`yy_lﬂd_buf„r_°©e
();

1151 
	}
}

1154 #ifde‡
YY_USE_PROTOS


1155 
	$yy_swôch_to_buf„r
–
YY_BUFFER_STATE
 
√w_buf„r
 )

1157 
	$yy_swôch_to_buf„r
–
√w_buf„r
 )

1158 
YY_BUFFER_STATE
 
√w_buf„r
;

1161 i‡–
yy_cuºít_buf„r
 =
√w_buf„r
 )

1164 i‡–
yy_cuºít_buf„r
 )

1167 *
yy_c_buf_p
 = 
yy_hﬁd_ch¨
;

1168 
yy_cuºít_buf„r
->
yy_buf_pos
 = 
yy_c_buf_p
;

1169 
yy_cuºít_buf„r
->
yy_n_ch¨s
 = yy_n_chars;

1172 
yy_cuºít_buf„r
 = 
√w_buf„r
;

1173 
	`yy_lﬂd_buf„r_°©e
();

1180 
yy_did_buf„r_swôch_⁄_eof
 = 1;

1181 
	}
}

1184 #ifde‡
YY_USE_PROTOS


1185 
	$yy_lﬂd_buf„r_°©e
( )

1187 
	$yy_lﬂd_buf„r_°©e
()

1190 
yy_n_ch¨s
 = 
yy_cuºít_buf„r
->yy_n_chars;

1191 
yyãxt_±r
 = 
yy_c_buf_p
 = 
yy_cuºít_buf„r
->
yy_buf_pos
;

1192 
yyö
 = 
yy_cuºít_buf„r
->
yy_öput_fûe
;

1193 
yy_hﬁd_ch¨
 = *
yy_c_buf_p
;

1194 
	}
}

1197 #ifde‡
YY_USE_PROTOS


1198 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
–
FILE
 *
fûe
, 
size
 )

1200 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
–
fûe
, 
size
 )

1201 
FILE
 *
fûe
;

1202 
size
;

1205 
YY_BUFFER_STATE
 
b
;

1207 
b
 = (
YY_BUFFER_STATE
Ë
	`yy_Êex_Æloc
––
yy_buf„r_°©e
 ) );

1208 i‡–! 
b
 )

1209 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1211 
b
->
yy_buf_size
 = 
size
;

1216 
b
->
yy_ch_buf
 = (*Ë
	`yy_Êex_Æloc
–b->
yy_buf_size
 + 2 );

1217 i‡–! 
b
->
yy_ch_buf
 )

1218 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1220 
b
->
yy_is_our_buf„r
 = 1;

1222 
	`yy_öô_buf„r
–
b
, 
fûe
 );

1224  
b
;

1225 
	}
}

1228 #ifde‡
YY_USE_PROTOS


1229 
	$yy_dñëe_buf„r
–
YY_BUFFER_STATE
 
b
 )

1231 
	$yy_dñëe_buf„r
–
b
 )

1232 
YY_BUFFER_STATE
 
b
;

1235 i‡–! 
b
 )

1238 i‡–
b
 =
yy_cuºít_buf„r
 )

1239 
yy_cuºít_buf„r
 = (
YY_BUFFER_STATE
) 0;

1241 i‡–
b
->
yy_is_our_buf„r
 )

1242 
	`yy_Êex_‰ì
–(*Ë
b
->
yy_ch_buf
 );

1244 
	`yy_Êex_‰ì
–(*Ë
b
 );

1245 
	}
}

1248 #i‚de‡
YY_ALWAYS_INTERACTIVE


1249 #i‚de‡
YY_NEVER_INTERACTIVE


1250 
ißây
 
YY_PROTO
(( ));

1254 #ifde‡
YY_USE_PROTOS


1255 
	$yy_öô_buf„r
–
YY_BUFFER_STATE
 
b
, 
FILE
 *
fûe
 )

1257 
	$yy_öô_buf„r
–
b
, 
fûe
 )

1258 
YY_BUFFER_STATE
 
b
;

1259 
FILE
 *
fûe
;

1264 
	`yy_Êush_buf„r
–
b
 );

1266 
b
->
yy_öput_fûe
 = 
fûe
;

1267 
b
->
yy_fûl_buf„r
 = 1;

1269 #i‡
YY_ALWAYS_INTERACTIVE


1270 
b
->
yy_is_öãø˘ive
 = 1;

1272 #i‡
YY_NEVER_INTERACTIVE


1273 
b
->
yy_is_öãø˘ive
 = 0;

1275 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1278 
	}
}

1281 #ifde‡
YY_USE_PROTOS


1282 
	$yy_Êush_buf„r
–
YY_BUFFER_STATE
 
b
 )

1284 
	$yy_Êush_buf„r
–
b
 )

1285 
YY_BUFFER_STATE
 
b
;

1289 i‡–! 
b
 )

1292 
b
->
yy_n_ch¨s
 = 0;

1298 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1299 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1301 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1303 
b
->
yy_©_bﬁ
 = 1;

1304 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1306 i‡–
b
 =
yy_cuºít_buf„r
 )

1307 
	`yy_lﬂd_buf„r_°©e
();

1308 
	}
}

1311 #i‚de‡
YY_NO_SCAN_BUFFER


1312 #ifde‡
YY_USE_PROTOS


1313 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
–*
ba£
, 
yy_size_t
 
size
 )

1315 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
–
ba£
, 
size
 )

1316 *
ba£
;

1317 
yy_size_t
 
size
;

1320 
YY_BUFFER_STATE
 
b
;

1322 i‡–
size
 < 2 ||

1323 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1324 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1328 
b
 = (
YY_BUFFER_STATE
Ë
	`yy_Êex_Æloc
––
yy_buf„r_°©e
 ) );

1329 i‡–! 
b
 )

1330 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

1332 
b
->
yy_buf_size
 = 
size
 - 2;

1333 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1334 
b
->
yy_is_our_buf„r
 = 0;

1335 
b
->
yy_öput_fûe
 = 0;

1336 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1337 
b
->
yy_is_öãø˘ive
 = 0;

1338 
b
->
yy_©_bﬁ
 = 1;

1339 
b
->
yy_fûl_buf„r
 = 0;

1340 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1342 
	`yy_swôch_to_buf„r
–
b
 );

1344  
b
;

1345 
	}
}

1349 #i‚de‡
YY_NO_SCAN_STRING


1350 #ifde‡
YY_USE_PROTOS


1351 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
–
yyc⁄°
 *
yy_°r
 )

1353 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
–
yy_°r
 )

1354 
yyc⁄°
 *
yy_°r
;

1357 
Àn
;

1358  
Àn
 = 0; 
yy_°r
[len]; ++len )

1361  
	`yy_sˇn_byãs
–
yy_°r
, 
Àn
 );

1362 
	}
}

1366 #i‚de‡
YY_NO_SCAN_BYTES


1367 #ifde‡
YY_USE_PROTOS


1368 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
–
yyc⁄°
 *
byãs
, 
Àn
 )

1370 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
–
byãs
, 
Àn
 )

1371 
yyc⁄°
 *
byãs
;

1372 
Àn
;

1375 
YY_BUFFER_STATE
 
b
;

1376 *
buf
;

1377 
yy_size_t
 
n
;

1378 
i
;

1381 
n
 = 
Àn
 + 2;

1382 
buf
 = (*Ë
	`yy_Êex_Æloc
–
n
 );

1383 i‡–! 
buf
 )

1384 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

1386  
i
 = 0; i < 
Àn
; ++i )

1387 
buf
[
i
] = 
byãs
[i];

1389 
buf
[
Àn
] = buf[Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1391 
b
 = 
	`yy_sˇn_buf„r
–
buf
, 
n
 );

1392 i‡–! 
b
 )

1393 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

1398 
b
->
yy_is_our_buf„r
 = 1;

1400  
b
;

1401 
	}
}

1405 #i‚de‡
YY_NO_PUSH_STATE


1406 #ifde‡
YY_USE_PROTOS


1407 
	$yy_push_°©e
–
√w_°©e
 )

1409 
	$yy_push_°©e
–
√w_°©e
 )

1410 
√w_°©e
;

1413 i‡–
yy_°¨t_°ack_±r
 >
yy_°¨t_°ack_dïth
 )

1415 
yy_size_t
 
√w_size
;

1417 
yy_°¨t_°ack_dïth
 +
YY_START_STACK_INCR
;

1418 
√w_size
 = 
yy_°¨t_°ack_dïth
 * ( );

1420 i‡–! 
yy_°¨t_°ack
 )

1421 
yy_°¨t_°ack
 = (*Ë
	`yy_Êex_Æloc
–
√w_size
 );

1424 
yy_°¨t_°ack
 = (*Ë
	`yy_Êex_ªÆloc
(

1425 (*Ë
yy_°¨t_°ack
, 
√w_size
 );

1427 i‡–! 
yy_°¨t_°ack
 )

1428 
	`YY_FATAL_ERROR
(

1432 
yy_°¨t_°ack
[
yy_°¨t_°ack_±r
++] = 
YY_START
;

1434 
	`BEGIN
(
√w_°©e
);

1435 
	}
}

1439 #i‚de‡
YY_NO_POP_STATE


1440 
	$yy_p›_°©e
()

1442 i‡–--
yy_°¨t_°ack_±r
 < 0 )

1443 
	`YY_FATAL_ERROR
( "start-condition stack underflow" );

1445 
	`BEGIN
(
yy_°¨t_°ack
[
yy_°¨t_°ack_±r
]);

1446 
	}
}

1450 #i‚de‡
YY_NO_TOP_STATE


1451 
	$yy_t›_°©e
()

1453  
yy_°¨t_°ack
[
yy_°¨t_°ack_±r
 - 1];

1454 
	}
}

1457 #i‚de‡
YY_EXIT_FAILURE


1458 
	#YY_EXIT_FAILURE
 2

	)

1461 #ifde‡
YY_USE_PROTOS


1462 
	$yy_Áèl_îr‹
–
yyc⁄°
 
msg
[] )

1464 
	$yy_Áèl_îr‹
–
msg
 )

1465 
msg
[];

1468 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1469 
	`exô
–
YY_EXIT_FAILURE
 );

1470 
	}
}

1476 #unde‡
yyÀss


1477 
	#yyÀss
(
n
) \

1481 
yyãxt
[
yyÀng
] = 
yy_hﬁd_ch¨
; \

1482 
yy_c_buf_p
 = 
yyãxt
 + 
n
; \

1483 
yy_hﬁd_ch¨
 = *
yy_c_buf_p
; \

1484 *
yy_c_buf_p
 = '\0'; \

1485 
yyÀng
 = 
n
; \

1487  0 )

	)

1492 #i‚de‡
yyãxt_±r


1493 #ifde‡
YY_USE_PROTOS


1494 
	$yy_Êex_°∫˝y
–*
s1
, 
yyc⁄°
 *
s2
, 
n
 )

1496 
	$yy_Êex_°∫˝y
–
s1
, 
s2
, 
n
 )

1497 *
s1
;

1498 
yyc⁄°
 *
s2
;

1499 
n
;

1502 
i
;

1503  
i
 = 0; i < 
n
; ++i )

1504 
s1
[
i
] = 
s2
[i];

1505 
	}
}

1508 #ifde‡
YY_NEED_STRLEN


1509 #ifde‡
YY_USE_PROTOS


1510 
	$yy_Êex_°æí
–
yyc⁄°
 *
s
 )

1512 
	$yy_Êex_°æí
–
s
 )

1513 
yyc⁄°
 *
s
;

1516 
n
;

1517  
n
 = 0; 
s
[n]; ++n )

1520  
n
;

1521 
	}
}

1525 #ifde‡
YY_USE_PROTOS


1526 *
	$yy_Êex_Æloc
–
yy_size_t
 
size
 )

1528 *
	$yy_Êex_Æloc
–
size
 )

1529 
yy_size_t
 
size
;

1532  (*Ë
	`mÆloc
–
size
 );

1533 
	}
}

1535 #ifde‡
YY_USE_PROTOS


1536 *
	$yy_Êex_ªÆloc
–*
±r
, 
yy_size_t
 
size
 )

1538 *
	$yy_Êex_ªÆloc
–
±r
, 
size
 )

1539 *
±r
;

1540 
yy_size_t
 
size
;

1550  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

1551 
	}
}

1553 #ifde‡
YY_USE_PROTOS


1554 
	$yy_Êex_‰ì
–*
±r
 )

1556 
	$yy_Êex_‰ì
–
±r
 )

1557 *
±r
;

1560 
	`‰ì
–
±r
 );

1561 
	}
}

1563 #i‡
YY_MAIN


1564 
	$maö
()

1566 
	`yyÀx
();

1568 
	}
}

1572 
	$∑r£
(
Â
)

1573 
FILE
** 
Â
;

1575 
yy∑r£
 
	`__P
(());

1576 
yyö
 = *
Â
;

1577 if(
	`yy∑r£
())

1580 
	}
}

	@log.c

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<˘y≥.h
>

9 
	~<°dlib.h
>

10 
	~<°d¨g.h
>

11 
	~<uni°d.h
>

12 
	~<ph⁄ed.h
>

13 
	~<time.h
>

15 
FILE
* 
	glogf
;

16 
c⁄f
 
cf
;

18 
	$check_logÀvñ
(
…
, 
Œ
)

19 
…y≥
 
…
;

20 
Œ
;

22 
…
) {

23 
debug
:

24 if(!(
Œ
 & 
LL_DEBUG
))

26 
g¨bage
:

27 if(!(
Œ
 & 
LL_GARBAGE
))

29 
öfo
:

30 if(!(
Œ
 & 
LL_INFO
))

32 
w¨n
:

33 if(!(
Œ
 & 
LL_WARN
))

35 
îr‹
:

36 if(!(
Œ
 & 
LL_ERROR
))

38 
¸ôiˇl
:

39 if(!(
Œ
 & 
LL_CRITICAL
))

46 
	}
}

49 
	$Õrötf
(
…y≥
 
logty≥
, c⁄° * 
fmt
, ...)

51 
va_li°
 
≠
;

52 c⁄° * 
fmç
;

53 * 
ofmt
;

54 
˙t
 = 0;

55 
j
, 
i
, 
l
;

56 
uns
;

57 
dou
;

58 
cha
;

59 * 
°r
;

60 * 
voi
;

61 
maxsize
;

62 
time_t
 
now
;

63 
tmt
[128];

64 
now
 = 
	`time
(
NULL
);

65 
l
 = 
cf
.
logÀvñs
;

66 if(!
	`check_logÀvñ
(
logty≥
, 
l
))

68 
	`°r·ime
(
tmt
, 128, "%d%b %H:%M:%S: ", 
	`loˇ…ime
(&
now
));

69 
fmç
 = 
fmt
;

70 
maxsize
 = 
	`°æí
(
fmt
) + 1;

71 
ofmt
 = 
	`mÆloc
((Ë* (
	`°æí
(
fmt
) + 2));

72 
	`Âuts
(
tmt
, 
logf
);

73 
	`va_°¨t
(
≠
, 
fmt
);

74 *
fmç
) {

75 
i
 = 0; 
fmç
[i] && fmç[i] !'%' && i < 
maxsize
; i++)

76 
ofmt
[
i
] = 
fmç
[i];

77 if(
i
) {

78 
ofmt
[
i
] = '\0';

79 
˙t
 +
	`Ârötf
(
logf
, 
ofmt
);

80 
fmç
 +
i
;

82 
i
 = 0; !
	`ißÕha
(
fmç
[i]Ë&& i < 
maxsize
; i++) {

83 
ofmt
[
i
] = 
fmç
[i];

84 if(
i
 && 
fmç
[i] == '%') ;

86 
ofmt
[
i
] = 
fmç
[i];

87 
ofmt
[
i
 + 1] = '\0';

88 
fmç
 +
i
 + 1;

89 
ofmt
[
i
]) {

91 
j
 = 
	`va_¨g
(
≠
, );

92 
˙t
 +
	`Ârötf
(
logf
, 
ofmt
, 
j
);

98 
uns
 = 
	`va_¨g
(
≠
, );

99 
˙t
 +
	`Ârötf
(
logf
, 
ofmt
, 
uns
);

102 
cha
 = (Ë
	`va_¨g
(
≠
, );

103 
˙t
 +
	`Ârötf
(
logf
, 
ofmt
, 
cha
);

106 
°r
 = 
	`va_¨g
(
≠
, *);

107 
˙t
 +
	`Ârötf
(
logf
, 
ofmt
, 
°r
);

114 
dou
 = 
	`va_¨g
(
≠
, );

115 
˙t
 +
	`Ârötf
(
logf
, 
ofmt
, 
dou
);

118 
voi
 = 
	`va_¨g
(
≠
, *);

119 
˙t
 +
	`Ârötf
(
logf
, 
ofmt
, 
voi
);

122 
˙t
 +
	`Ârötf
(
logf
, "%d", cnt);

125 
	`Âutc
('%', 
logf
);

126 
˙t
++;

129 
	`Ârötf
(
°dîr
, "Invalid format inÜog!\n");

134 
	`fÊush
(
logf
);

135 
	`va_íd
(
≠
);

136 
	`‰ì
(
ofmt
);

137  
˙t
;

138 
	}
}

	@main.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

9 
	~<gë›t.h
>

10 
	~<uni°d.h
>

12 
	~<ph⁄ed.h
>

13 
c⁄f
 
cf
;

14 
	gdifÊog
 = 0;

16 
	$ußge
(
¨gv
)

17 c⁄° * 
¨gv
;

19 
	`Ârötf
(
°dîr
, "%s: ußge: %†[-h] [-¯c⁄fig] [-»log]\n", 
¨gv
,árgv);

20 
	}
}

22 
	$maö
(
¨gc
, 
¨gv
)

23 
¨gc
;

24 * 
¨gv
[];

26 
c
;

27 
cf
.
cfûe
 = 
CONFIGFILE
;

28 
	#OPTSTRING
 "hc:l:"

	)

29 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
OPTSTRING
)) != -1)

30 
c
) {

32 
cf
.
cfûe
 = 
	`°rdup
(
›èrg
);

35 
	`ußge
(
	`°rdup
(*
¨gv
));

38 
cf
.
logfûe
 = 
	`°rdup
(
›èrg
);

39 
difÊog
 = 1;

42 
	`ußge
(
	`°rdup
(*
¨gv
));

45 
cf
.
logÀvñs
 = 
LL_ALL
;

46 
	`öôülize
();

47 
	`√tw‹k
();

48 
	`shutd
();

50 
	}
}

	@signals.c

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<sig«l.h
>

34 
	~<uni°d.h
>

35 
	~<ph⁄ed.h
>

37 
	$h™dsig
(
sig
)

38 
sig
;

40 
	`sig«l
(
sig
, 
h™dsig
);

41 
sig
) {

42 
SIGINT
:

43 
SIGQUIT
:

44 
SIGTERM
:

45 
	`Õrötf
(
Áèl
, "Re˚ived sig«»%d, cÀ™ög up...\n", 
sig
);

46 
	`shutd
();

47 
	`exô
(0);

49 
SIGHUP
:

50 
	`Õrötf
(
öfo
, "Received HUP,Ñereading configuration files...\n");

53 
	`Õrötf
(
w¨n
, "Re˚ived sig«»%d!\n", 
sig
);

55 
	}
}

57 
	$ö°Æl_h™dÀrs
()

59 
	`sig«l
(
SIGINT
, 
h™dsig
);

60 
	`sig«l
(
SIGQUIT
, 
h™dsig
);

61 
	`sig«l
(
SIGHUP
, 
h™dsig
);

62 
	`sig«l
(
SIGTERM
, 
h™dsig
);

63 
	}
}

	@socket.c

31 
	~<°dio.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

34 
	~<°dlib.h
>

35 
	~<î∫o.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<sig«l.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/£À˘.h
>

41 
	~<sys/sockë.h
>

42 
	~<¨∑/öë.h
>

43 
	~<√töë/ö.h
>

44 
	~<sys/un.h
>

46 
	~<ph⁄ed.h
>

48 
	$h™d˛õ¡
(
sk
)

49 
sk
;

51 
buf„r
[1024];

52 
æí
;

53 
æí
 = 
	`ªcv
(
sk
, 
buf„r
, (buffer), 0);

54 
	`Õrötf
(
debug
, "Clõ¡ said %s.", 
buf„r
);

55 
	}
}

57 
	$√tw‹k
()

59 
s
, 
us
, 
¢
;

60 
fd_£t
 
fds
;

61 
timevÆ
 
tv
;

62 
si
 = 1;

63 
sö_size
, 
ûí
;

64 
sockaddr_un
 
ô
;

65 if((
s
 = 
	`sockë
(
AF_LOCAL
, 
SOCK_STREAM
, 0)) == -1) {

66 
	`≥º‹
("socket");

67 
	`exô
(-1);

69 
	`°r˝y
(
ô
.
sun_∑th
, 
SOCKETFILE
);

70 
ô
.
sun_Ámûy
 = 
AF_LOCAL
;

71 if(
	`böd
(
s
, (
sockaddr
 *)&
ô
, 1 + 
	`°æí
(ô.
sun_∑th
) +

72 (
ô
.
sun_Ámûy
)) == -1) {

73 
	`≥º‹
("bind");

74 
	`exô
(-1);

76 if(
	`li°í
(
s
, 5) == -1) {

77 
	`≥º‹
("listen");

78 
	`exô
(-1);

80 
sö_size
 = (
sockaddr_ö
);

82 
	`FD_ZERO
(&
fds
);

83 
	`FD_SET
(
s
, &
fds
);

84 
	`£À˘
(
s
 + 1, &
fds
, 
NULL
, NULL, NULL)) {

86 
	`≥º‹
("select");

87 
	`exô
(-1);

95 if(
	`FD_ISSET
(
s
, &
fds
) != 0) {

96 
ûí
 = (
ô
);

97 if((
¢
 = 
	`ac˚±
(
s
,

98 (
sockaddr
 *)&
ô
, &
ûí
))

100 
	`≥º‹
("sáccept");

101 
	`exô
(-3);

103 
	`h™d˛õ¡
(
¢
);

104 
	`˛o£
(
¢
);

109 
	`˛o£
(
s
);

110 
	`u∆ök
(
SOCKETFILE
);

111 
	}
}

	@y.tab.c

1 
	~<°dlib.h
>

2 #i‚de‡
löt


3 #ifde‡
__unu£d


4 
	g__unu£d


7 
	gyyrcsid
[] = "$FreeBSD: src/usr.bin/yacc/skeleton.c,v 1.37 2003/02/12 18:03:55 davidc Exp $";

9 
	#YYBYACC
 1

	)

10 
	#YYMAJOR
 1

	)

11 
	#YYMINOR
 9

	)

12 
	#YYLEX
 
	`yyÀx
()

	)

13 
	#YYEMPTY
 -1

	)

14 
	#yy˛órö
 (
yych¨
=(
YYEMPTY
))

	)

15 
	#yyîrok
 (
yyîrÊag
=0)

	)

16 
	#YYRECOVERING
(Ë(
yyîrÊag
!=0)

	)

17 #i‡
deföed
(
__˝lu•lus
Ë|| 
__STDC__


18 
yygrow°ack
();

20 
yygrow°ack
();

22 
	#YYPREFIX
 "yy"

	)

26 
	mnumbî
;

27 * 
	m°rög
;

28 } 
	tYYSTYPE
;

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<ph⁄ed.h
>

33 
	gchr˙t
 = 0;

34 
	glö˙t
 = 0;

35 
yyÀx
();

36 
	$yyîr‹
(
°r
)

37 * 
°r
;

39 
	`Õrötf
(
Áèl
, "∑r£r:Éº‹: %†©Üöê%d ch∏%d\n", 
°r
, 
lö˙t
,

40 
chr˙t
);

41 
	`exô
(-1);

42 
	}
}

43 
	$yywøp
()

46 
	}
}

48 
	#YYERRCODE
 256

	)

49 
	#NOTIFY
 257

	)

50 
	#OBRACE
 258

	)

51 
	#CBRACE
 259

	)

52 
	#SCOLON
 260

	)

53 
	#IPADDR
 261

	)

54 c⁄° 
	gyylhs
[] = { -1,

57 c⁄° 
	gyyÀn
[] = { 2,

60 c⁄° 
	gyyde‰ed
[] = { 0,

64 c⁄° 
	gyydgŸo
[] = { 2,

67 c⁄° 
	gyysödex
[] = { -256,

71 c⁄° 
	gyyrödex
[] = { 4,

75 c⁄° 
	gyygödex
[] = { 2,

78 
	#YYTABLESIZE
 8

	)

79 c⁄° 
	gyyèbÀ
[] = { 10,

82 c⁄° 
	gyycheck
[] = { 259,

85 
	#YYFINAL
 2

	)

86 #i‚de‡
YYDEBUG


87 
	#YYDEBUG
 0

	)

89 
	#YYMAXTOKEN
 261

	)

90 #i‡
YYDEBUG


91 c⁄° * c⁄° 
	gyy«me
[] = {

101 c⁄° * c⁄° 
	gyyruÀ
[] = {

113 #i‡
YYDEBUG


114 
	~<°dio.h
>

116 #ifde‡
YYSTACKSIZE


117 #unde‡
YYMAXDEPTH


118 
	#YYMAXDEPTH
 
YYSTACKSIZE


	)

120 #ifde‡
YYMAXDEPTH


121 
	#YYSTACKSIZE
 
YYMAXDEPTH


	)

123 
	#YYSTACKSIZE
 10000

	)

124 
	#YYMAXDEPTH
 10000

	)

127 
	#YYINITSTACKSIZE
 200

	)

128 
	gyydebug
;

129 
	gyy√ºs
;

130 
	gyyîrÊag
;

131 
	gyych¨
;

132 *
	gyys•
;

133 
YYSTYPE
 *
	gyyv•
;

134 
YYSTYPE
 
	gyyvÆ
;

135 
YYSTYPE
 
	gyylvÆ
;

136 *
	gyyss
;

137 *
	gyys¶im
;

138 
YYSTYPE
 *
	gyyvs
;

139 
	gyy°acksize
;

141 
	$yygrow°ack
()

143 
√wsize
, 
i
;

144 *
√wss
;

145 
YYSTYPE
 *
√wvs
;

147 i‡((
√wsize
 = 
yy°acksize
) == 0)

148 
√wsize
 = 
YYINITSTACKSIZE
;

149 i‡(
√wsize
 >
YYMAXDEPTH
)

151 i‡((
√wsize
 *2Ë> 
YYMAXDEPTH
)

152 
√wsize
 = 
YYMAXDEPTH
;

153 
i
 = 
yys•
 - 
yyss
;

154 
√wss
 = 
yyss
 ? (*)
	`ªÆloc
(yyss, 
√wsize
 *  *newss) :

155 (*)
	`mÆloc
(
√wsize
 *  *
√wss
);

156 i‡(
√wss
 =
NULL
)

158 
yyss
 = 
√wss
;

159 
yys•
 = 
√wss
 + 
i
;

160 
√wvs
 = 
yyvs
 ? (
YYSTYPE
 *)
	`ªÆloc
(yyvs, 
√wsize
 *  *newvs) :

161 (
YYSTYPE
 *)
	`mÆloc
(
√wsize
 *  *
√wvs
);

162 i‡(
√wvs
 =
NULL
)

164 
yyvs
 = 
√wvs
;

165 
yyv•
 = 
√wvs
 + 
i
;

166 
yy°acksize
 = 
√wsize
;

167 
yys¶im
 = 
yyss
 + 
√wsize
 - 1;

169 
	}
}

171 
	#YYABORT
 
yyab‹t


	)

172 
	#YYREJECT
 
yyab‹t


	)

173 
	#YYACCEPT
 
yyac˚±


	)

174 
	#YYERROR
 
yyîæab


	)

176 #i‚de‡
YYPARSE_PARAM


177 #i‡
deföed
(
__˝lu•lus
Ë|| 
__STDC__


178 
	#YYPARSE_PARAM_ARG
 

	)

179 
	#YYPARSE_PARAM_DECL


	)

181 
	#YYPARSE_PARAM_ARG


	)

182 
	#YYPARSE_PARAM_DECL


	)

185 #i‚de‡
YYPARSE_PARAM_TYPE


186 
	#YYPARSE_PARAM_TYPE
 *

	)

188 #i‡
deföed
(
__˝lu•lus
Ë|| 
__STDC__


189 
	#YYPARSE_PARAM_ARG
 
YYPARSE_PARAM_TYPE
 
YYPARSE_PARAM


	)

190 
	#YYPARSE_PARAM_DECL


	)

192 
	#YYPARSE_PARAM_ARG
 
YYPARSE_PARAM


	)

193 
	#YYPARSE_PARAM_DECL
 
YYPARSE_PARAM_TYPE
 
YYPARSE_PARAM
;

	)

198 
	$yy∑r£
 (
YYPARSE_PARAM_ARG
)

199 
YYPARSE_PARAM_DECL


201 
yym
, 
yyn
, 
yy°©e
;

202 #i‡
YYDEBUG


203 c⁄° *
yys
;

205 i‡((
yys
 = 
	`gëív
("YYDEBUG")))

207 
yyn
 = *
yys
;

208 i‡(
yyn
 >= '0' && yyn <= '9')

209 
yydebug
 = 
yyn
 - '0';

213 
yy√ºs
 = 0;

214 
yyîrÊag
 = 0;

215 
yych¨
 = (-1);

217 i‡(
yyss
 =
NULL
 && 
	`yygrow°ack
()Ë
yyovîÊow
;

218 
yys•
 = 
yyss
;

219 
yyv•
 = 
yyvs
;

220 *
yys•
 = 
yy°©e
 = 0;

222 
yylo›
:

223 i‡((
yyn
 = 
yyde‰ed
[
yy°©e
])Ë
yyªdu˚
;

224 i‡(
yych¨
 < 0)

226 i‡((
yych¨
 = 
	`yyÀx
()) < 0) yychar = 0;

227 #i‡
YYDEBUG


228 i‡(
yydebug
)

230 
yys
 = 0;

231 i‡(
yych¨
 <
YYMAXTOKEN
Ë
yys
 = 
yy«me
[yychar];

232 i‡(!
yys
) yys = "illegal-symbol";

233 
	`¥ötf
("%sdebug: state %d,Ñeading %d (%s)\n",

234 
YYPREFIX
, 
yy°©e
, 
yych¨
, 
yys
);

238 i‡((
yyn
 = 
yysödex
[
yy°©e
]Ë&& (yy¿+
yych¨
) >= 0 &&

239 
yyn
 <
YYTABLESIZE
 && 
yycheck
[yyn] =
yych¨
)

241 #i‡
YYDEBUG


242 i‡(
yydebug
)

243 
	`¥ötf
("%sdebug: state %d, shiftingÅo state %d\n",

244 
YYPREFIX
, 
yy°©e
, 
yyèbÀ
[
yyn
]);

246 i‡(
yys•
 >
yys¶im
 && 
	`yygrow°ack
())

248 
yyovîÊow
;

250 *++
yys•
 = 
yy°©e
 = 
yyèbÀ
[
yyn
];

251 *++
yyv•
 = 
yylvÆ
;

252 
yych¨
 = (-1);

253 i‡(
yyîrÊag
 > 0) --yyerrflag;

254 
yylo›
;

256 i‡((
yyn
 = 
yyrödex
[
yy°©e
]Ë&& (yy¿+
yych¨
) >= 0 &&

257 
yyn
 <
YYTABLESIZE
 && 
yycheck
[yyn] =
yych¨
)

259 
yyn
 = 
yyèbÀ
[yyn];

260 
yyªdu˚
;

262 i‡(
yyîrÊag
Ë
yyöªcovîy
;

263 #i‡
	`deföed
(
löt
Ë|| deföed(
__GNUC__
)

264 
yy√wîr‹
;

266 
yy√wîr‹
:

267 
	`yyîr‹
("syntaxÉrror");

268 #i‡
	`deföed
(
löt
Ë|| deföed(
__GNUC__
)

269 
yyîæab
;

271 
yyîæab
:

272 ++
yy√ºs
;

273 
yyöªcovîy
:

274 i‡(
yyîrÊag
 < 3)

276 
yyîrÊag
 = 3;

279 i‡((
yyn
 = 
yysödex
[*
yys•
]Ë&& (yy¿+
YYERRCODE
) >= 0 &&

280 
yyn
 <
YYTABLESIZE
 && 
yycheck
[yyn] =
YYERRCODE
)

282 #i‡
YYDEBUG


283 i‡(
yydebug
)

284 
	`¥ötf
("%sdebug: sèã %d,Éº‹Ñecovîy shi·ög\
 sèã %d\n", 
YYPREFIX
, *
yys•
, 
yyèbÀ
[
yyn
]);

287 i‡(
yys•
 >
yys¶im
 && 
	`yygrow°ack
())

289 
yyovîÊow
;

291 *++
yys•
 = 
yy°©e
 = 
yyèbÀ
[
yyn
];

292 *++
yyv•
 = 
yylvÆ
;

293 
yylo›
;

297 #i‡
YYDEBUG


298 i‡(
yydebug
)

299 
	`¥ötf
("%sdebug:ÉrrorÑecovery discarding state %d\n",

300 
YYPREFIX
, *
yys•
);

302 i‡(
yys•
 <
yyss
Ë
yyab‹t
;

303 --
yys•
;

304 --
yyv•
;

310 i‡(
yych¨
 =0Ë
yyab‹t
;

311 #i‡
YYDEBUG


312 i‡(
yydebug
)

314 
yys
 = 0;

315 i‡(
yych¨
 <
YYMAXTOKEN
Ë
yys
 = 
yy«me
[yychar];

316 i‡(!
yys
) yys = "illegal-symbol";

317 
	`¥ötf
("%sdebug: state %d,ÉrrorÑecovery discardsÅoken %d (%s)\n",

318 
YYPREFIX
, 
yy°©e
, 
yych¨
, 
yys
);

321 
yych¨
 = (-1);

322 
yylo›
;

324 
yyªdu˚
:

325 #i‡
YYDEBUG


326 i‡(
yydebug
)

327 
	`¥ötf
("%sdebug: state %d,Ñeducing byÑule %d (%s)\n",

328 
YYPREFIX
, 
yy°©e
, 
yyn
, 
yyruÀ
[yyn]);

330 
yym
 = 
yyÀn
[
yyn
];

331 
yyvÆ
 = 
yyv•
[1-
yym
];

332 
yyn
)

337 
	`Õrötf
(
öfo
, "parser:ÉndÇotify\n");

343 
	`Õrötf
(
debug
, "Encou¡îed i∑ddªs†%s\n", 
yyv•
[0].
°rög
);

348 
yys•
 -
yym
;

349 
yy°©e
 = *
yys•
;

350 
yyv•
 -
yym
;

351 
yym
 = 
yylhs
[
yyn
];

352 i‡(
yy°©e
 =0 && 
yym
 == 0)

354 #i‡
YYDEBUG


355 i‡(
yydebug
)

356 
	`¥ötf
("%sdebug:á·îÑedu˘i⁄, shi·ög from sèã 0Åo\
 %d\n", 
YYPREFIX
, 
YYFINAL
);

359 
yy°©e
 = 
YYFINAL
;

360 *++
yys•
 = 
YYFINAL
;

361 *++
yyv•
 = 
yyvÆ
;

362 i‡(
yych¨
 < 0)

364 i‡((
yych¨
 = 
	`yyÀx
()) < 0) yychar = 0;

365 #i‡
YYDEBUG


366 i‡(
yydebug
)

368 
yys
 = 0;

369 i‡(
yych¨
 <
YYMAXTOKEN
Ë
yys
 = 
yy«me
[yychar];

370 i‡(!
yys
) yys = "illegal-symbol";

371 
	`¥ötf
("%sdebug: state %d,Ñeading %d (%s)\n",

372 
YYPREFIX
, 
YYFINAL
, 
yych¨
, 
yys
);

376 i‡(
yych¨
 =0Ë
yyac˚±
;

377 
yylo›
;

379 i‡((
yyn
 = 
yygödex
[
yym
]Ë&& (yy¿+
yy°©e
) >= 0 &&

380 
yyn
 <
YYTABLESIZE
 && 
yycheck
[yyn] =
yy°©e
)

381 
yy°©e
 = 
yyèbÀ
[
yyn
];

383 
yy°©e
 = 
yydgŸo
[
yym
];

384 #i‡
YYDEBUG


385 i‡(
yydebug
)

386 
	`¥ötf
("%sdebug:á·îÑedu˘i⁄, shi·ög from sèã %d \
 sèã %d\n", 
YYPREFIX
, *
yys•
, 
yy°©e
);

389 i‡(
yys•
 >
yys¶im
 && 
	`yygrow°ack
())

391 
yyovîÊow
;

393 *++
yys•
 = 
yy°©e
;

394 *++
yyv•
 = 
yyvÆ
;

395 
yylo›
;

396 
yyovîÊow
:

397 
	`yyîr‹
("yacc stack overflow");

398 
yyab‹t
:

400 
yyac˚±
:

402 
	}
}

	@/usr/include/arpa/inet.h

56 #i‚de‡
_ARPA_INET_H_


57 
	#_ARPA_INET_H_


	)

61 
	~<sys/cdefs.h
>

62 
	~<sys/_ty≥s.h
>

65 
	~<machöe/ídün.h
>

67 
	#INET_ADDRSTRLEN
 16

	)

68 
	#INET6_ADDRSTRLEN
 46

	)

70 #i‚de‡
_UINT16_T_DECLARED


71 
__uöt16_t
 
	tuöt16_t
;

72 
	#_UINT16_T_DECLARED


	)

75 #i‚de‡
_UINT32_T_DECLARED


76 
__uöt32_t
 
	tuöt32_t
;

77 
	#_UINT32_T_DECLARED


	)

80 #i‚de‡
_IN_ADDR_T_DECLARED


81 
uöt32_t
 
	tö_addr_t
;

82 
	#_IN_ADDR_T_DECLARED


	)

85 #i‚de‡
_IN_PORT_T_DECLARED


86 
uöt16_t
 
	tö_p‹t_t
;

87 
	#_IN_PORT_T_DECLARED


	)

90 #i‡
__BSD_VISIBLE


91 #i‚de‡
_SIZE_T_DECLARED


92 
__size_t
 
	tsize_t
;

93 
	#_SIZE_T_DECLARED


	)

101 #i‚de‡
_SOCKLEN_T_DECLARED


102 
__sockÀn_t
 
	tsockÀn_t
;

103 
	#_SOCKLEN_T_DECLARED


	)

106 #i‚de‡
_STRUCT_IN_ADDR_DECLARED


107 
	sö_addr
 {

108 
ö_addr_t
 
	ms_addr
;

110 
	#_STRUCT_IN_ADDR_DECLARED


	)

114 #i‡
__BSD_VISIBLE


115 
	#öë_addr
 
__öë_addr


	)

116 
	#öë_©⁄
 
__öë_©⁄


	)

117 
	#öë_ aof
 
__öë_ aof


	)

118 
	#öë_makóddr
 
__öë_makóddr


	)

119 
	#öë_√è
 
__öë_√è


	)

120 
	#öë_√tof
 
__öë_√tof


	)

121 
	#öë_√tw‹k
 
__öë_√tw‹k


	)

122 
	#öë_√t_¡›
 
__öë_√t_¡›


	)

123 
	#öë_√t_±⁄
 
__öë_√t_±⁄


	)

124 
	#öë_¡ﬂ
 
__öë_¡ﬂ


	)

125 
	#öë_±⁄
 
__öë_±⁄


	)

126 
	#öë_¡›
 
__öë_¡›


	)

127 
	#öë_nßp_addr
 
__öë_nßp_addr


	)

128 
	#öë_nßp_¡ﬂ
 
__öë_nßp_¡ﬂ


	)

131 
	g__BEGIN_DECLS


132 #i‚de‡
_BYTEORDER_PROTOTYPED


133 
	#_BYTEORDER_PROTOTYPED


	)

134 
uöt32_t
 
ht⁄l
(uint32_t);

135 
uöt16_t
 
ht⁄s
(uint16_t);

136 
uöt32_t
 
¡ohl
(uint32_t);

137 
uöt16_t
 
¡ohs
(uint16_t);

140 
ö_addr_t
 
öë_addr
(const *);

141 *
öë_¡ﬂ
(
ö_addr
);

142 c⁄° *
öë_¡›
(, c⁄° * 
__ª°ri˘
, * __restrict,

143 
sockÀn_t
);

144 
öë_±⁄
(, c⁄° * 
__ª°ri˘
, * __restrict);

146 #i‡
__BSD_VISIBLE


147 
ascii2addr
(, const *, *);

148 *
addr2ascii
(, const *, , *);

149 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

150 
ö_addr_t
 
öë_ aof
(
ö_addr
);

151 
ö_addr
 
öë_makóddr
(
ö_addr_t
, in_addr_t);

152 * 
öë_√è
(
ö_addr_t
, *, 
size_t
);

153 
ö_addr_t
 
öë_√tof
(
ö_addr
);

154 
ö_addr_t
 
öë_√tw‹k
(const *);

155 *
öë_√t_¡›
(, c⁄° *, , *, 
size_t
);

156 
öë_√t_±⁄
(, c⁄° *, *, 
size_t
);

157 
öë_nßp_addr
(const *, *, );

158 *
öë_nßp_¡ﬂ
(, const *, *);

160 
	g__END_DECLS


162 #i‚de‡
_BYTEORDER_FUNC_DEFINED


163 
	#_BYTEORDER_FUNC_DEFINED


	)

164 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

165 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

166 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

167 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

	@/usr/include/ctype.h

45 #i‚de‡
_CTYPE_H_


46 
	#_CTYPE_H_


	)

48 
	~<sys/cdefs.h
>

49 
	~<sys/_ty≥s.h
>

50 
	~<_˘y≥.h
>

52 
__BEGIN_DECLS


53 
iß um
();

54 
ißÕha
();

55 
is˙ål
();

56 
isdigô
();

57 
isgøph
();

58 
i¶owî
();

59 
i•röt
();

60 
i•un˘
();

61 
is•a˚
();

62 
isuµî
();

63 
isxdigô
();

64 
tﬁowî
();

65 
touµî
();

67 #i‡
__XSI_VISIBLE


68 
_tﬁowî
();

69 
_touµî
();

70 
ißscii
();

71 
tﬂscii
();

74 #i‡
__ISO_C_VISIBLE
 >= 1999

75 
isbœnk
();

78 #i‡
__BSD_VISIBLE


79 
digôtoöt
();

80 
ishexnumbî
();

81 
isideogøm
();

82 
i¢umbî
();

83 
i•h⁄ogøm
();

84 
i§u√
();

85 
is•ecül
();

87 
	g__END_DECLS


89 
	#iß um
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_A
|
_CTYPE_D
)

	)

90 
	#ißÕha
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_A
)

	)

91 
	#is˙ål
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_C
)

	)

92 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_D
Ë

	)

93 
	#isgøph
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_G
)

	)

94 
	#i¶owî
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_L
)

	)

95 
	#i•röt
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_R
)

	)

96 
	#i•un˘
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_P
)

	)

97 
	#is•a˚
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_S
)

	)

98 
	#isuµî
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_U
)

	)

99 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_X
Ë

	)

100 
	#tﬁowî
(
c
Ë
	`__tﬁowî
(c)

	)

101 
	#touµî
(
c
Ë
	`__touµî
(c)

	)

103 #i‡
__XSI_VISIBLE


115 
	#_tﬁowî
(
c
Ë
	`__tﬁowî
(c)

	)

116 
	#_touµî
(
c
Ë
	`__touµî
(c)

	)

117 
	#ißscii
(
c
Ë(((cË& ~0x7FË=0)

	)

118 
	#tﬂscii
(
c
Ë((cË& 0x7F)

	)

121 #i‡
__ISO_C_VISIBLE
 >= 1999

122 
	#isbœnk
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_B
)

	)

125 #i‡
__BSD_VISIBLE


126 
	#digôtoöt
(
c
Ë
	`__maskru√
((c), 0xFF)

	)

127 
	#ishexnumbî
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_X
)

	)

128 
	#isideogøm
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_I
)

	)

129 
	#i¢umbî
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_D
)

	)

130 
	#i•h⁄ogøm
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_Q
)

	)

131 
	#i§u√
(
c
Ë
	`__i°y≥
((c), 0xFFFFFF00L)

	)

132 
	#is•ecül
(
c
Ë
	`__i°y≥
((c), 
_CTYPE_T
)

	)

	@/usr/include/errno.h

38 #i‚de‡
_SYS_ERRNO_H_


39 
	#_SYS_ERRNO_H_


	)

41 #i‚de‡
_KERNEL


42 
	~<sys/cdefs.h
>

43 
__BEGIN_DECLS


44 * 
__îr‹
();

45 
	g__END_DECLS


46 
	#î∫o
 (* 
	`__îr‹
())

	)

49 
	#EPERM
 1

	)

50 
	#ENOENT
 2

	)

51 
	#ESRCH
 3

	)

52 
	#EINTR
 4

	)

53 
	#EIO
 5

	)

54 
	#ENXIO
 6

	)

55 
	#E2BIG
 7

	)

56 
	#ENOEXEC
 8

	)

57 
	#EBADF
 9

	)

58 
	#ECHILD
 10

	)

59 
	#EDEADLK
 11

	)

61 
	#ENOMEM
 12

	)

62 
	#EACCES
 13

	)

63 
	#EFAULT
 14

	)

64 #i‚de‡
_POSIX_SOURCE


65 
	#ENOTBLK
 15

	)

67 
	#EBUSY
 16

	)

68 
	#EEXIST
 17

	)

69 
	#EXDEV
 18

	)

70 
	#ENODEV
 19

	)

71 
	#ENOTDIR
 20

	)

72 
	#EISDIR
 21

	)

73 
	#EINVAL
 22

	)

74 
	#ENFILE
 23

	)

75 
	#EMFILE
 24

	)

76 
	#ENOTTY
 25

	)

77 #i‚de‡
_POSIX_SOURCE


78 
	#ETXTBSY
 26

	)

80 
	#EFBIG
 27

	)

81 
	#ENOSPC
 28

	)

82 
	#ESPIPE
 29

	)

83 
	#EROFS
 30

	)

84 
	#EMLINK
 31

	)

85 
	#EPIPE
 32

	)

88 
	#EDOM
 33

	)

89 
	#ERANGE
 34

	)

92 
	#EAGAIN
 35

	)

93 #i‚de‡
_POSIX_SOURCE


94 
	#EWOULDBLOCK
 
EAGAIN


	)

95 
	#EINPROGRESS
 36

	)

96 
	#EALREADY
 37

	)

99 
	#ENOTSOCK
 38

	)

100 
	#EDESTADDRREQ
 39

	)

101 
	#EMSGSIZE
 40

	)

102 
	#EPROTOTYPE
 41

	)

103 
	#ENOPROTOOPT
 42

	)

104 
	#EPROTONOSUPPORT
 43

	)

105 
	#ESOCKTNOSUPPORT
 44

	)

106 
	#EOPNOTSUPP
 45

	)

107 
	#ENOTSUP
 
EOPNOTSUPP


	)

108 
	#EPFNOSUPPORT
 46

	)

109 
	#EAFNOSUPPORT
 47

	)

110 
	#EADDRINUSE
 48

	)

111 
	#EADDRNOTAVAIL
 49

	)

114 
	#ENETDOWN
 50

	)

115 
	#ENETUNREACH
 51

	)

116 
	#ENETRESET
 52

	)

117 
	#ECONNABORTED
 53

	)

118 
	#ECONNRESET
 54

	)

119 
	#ENOBUFS
 55

	)

120 
	#EISCONN
 56

	)

121 
	#ENOTCONN
 57

	)

122 
	#ESHUTDOWN
 58

	)

123 
	#ETOOMANYREFS
 59

	)

124 
	#ETIMEDOUT
 60

	)

125 
	#ECONNREFUSED
 61

	)

127 
	#ELOOP
 62

	)

129 
	#ENAMETOOLONG
 63

	)

132 #i‚de‡
_POSIX_SOURCE


133 
	#EHOSTDOWN
 64

	)

134 
	#EHOSTUNREACH
 65

	)

136 
	#ENOTEMPTY
 66

	)

139 #i‚de‡
_POSIX_SOURCE


140 
	#EPROCLIM
 67

	)

141 
	#EUSERS
 68

	)

142 
	#EDQUOT
 69

	)

145 
	#ESTALE
 70

	)

146 
	#EREMOTE
 71

	)

147 
	#EBADRPC
 72

	)

148 
	#ERPCMISMATCH
 73

	)

149 
	#EPROGUNAVAIL
 74

	)

150 
	#EPROGMISMATCH
 75

	)

151 
	#EPROCUNAVAIL
 76

	)

154 
	#ENOLCK
 77

	)

155 
	#ENOSYS
 78

	)

157 #i‚de‡
_POSIX_SOURCE


158 
	#EFTYPE
 79

	)

159 
	#EAUTH
 80

	)

160 
	#ENEEDAUTH
 81

	)

161 
	#EIDRM
 82

	)

162 
	#ENOMSG
 83

	)

163 
	#EOVERFLOW
 84

	)

164 
	#ECANCELED
 85

	)

165 
	#EILSEQ
 86

	)

166 
	#ENOATTR
 87

	)

168 
	#EDOOFUS
 88

	)

170 
	#ELAST
 88

	)

174 #ifde‡
_KERNEL


176 
	#ERESTART
 (-1Ë

	)

177 
	#EJUSTRETURN
 (-2Ë

	)

178 
	#ENOIOCTL
 (-3Ë

	)

179 
	#EDIRIOCTL
 (-4Ë

	)

	@/usr/include/getopt.h

40 #i‚de‡
_GETOPT_H_


41 
	#_GETOPT_H_


	)

43 
	~<sys/cdefs.h
>

49 
	#no_¨gumít
 0

	)

50 
	#ªquúed_¨gumít
 1

	)

51 
	#›ti⁄Æ_¨gumít
 2

	)

53 
	s›ti⁄
 {

55 c⁄° *
	m«me
;

60 
	mhas_¨g
;

62 *
	mÊag
;

64 
	mvÆ
;

67 
__BEGIN_DECLS


68 
gë›t_l⁄g
(, * const *, const *,

69 c⁄° 
›ti⁄
 *, *);

70 
gë›t_l⁄g_⁄ly
(, * const *, const *,

71 c⁄° 
›ti⁄
 *, *);

72 #i‚de‡
_GETOPT_DECLARED


73 
	#_GETOPT_DECLARED


	)

74 
gë›t
(, * const [], const *);

76 *
›èrg
;

77 
›töd
, 
›ãº
, 
›t›t
;

79 #i‚de‡
_OPTRESET_DECLARED


80 
	#_OPTRESET_DECLARED


	)

81 
›åe£t
;

83 
	g__END_DECLS


	@/usr/include/netinet/in.h

33 #i‚de‡
_NETINET_IN_H_


34 
	#_NETINET_IN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<machöe/ídün.h
>

41 
	#IPPROTO_IP
 0

	)

42 
	#IPPROTO_ICMP
 1

	)

43 
	#IPPROTO_TCP
 6

	)

44 
	#IPPROTO_UDP
 17

	)

46 
	#INADDR_ANY
 (
u_öt32_t
)0x00000000

	)

47 
	#INADDR_BROADCAST
 (
u_öt32_t
)0xfffffff‡

	)

49 #i‚de‡
_UINT8_T_DECLARED


50 
__uöt8_t
 
	tuöt8_t
;

51 
	#_UINT8_T_DECLARED


	)

54 #i‚de‡
_UINT16_T_DECLARED


55 
__uöt16_t
 
	tuöt16_t
;

56 
	#_UINT16_T_DECLARED


	)

59 #i‚de‡
_UINT32_T_DECLARED


60 
__uöt32_t
 
	tuöt32_t
;

61 
	#_UINT32_T_DECLARED


	)

64 #i‚de‡
_IN_ADDR_T_DECLARED


65 
uöt32_t
 
	tö_addr_t
;

66 
	#_IN_ADDR_T_DECLARED


	)

69 #i‚de‡
_IN_PORT_T_DECLARED


70 
uöt16_t
 
	tö_p‹t_t
;

71 
	#_IN_PORT_T_DECLARED


	)

74 #i‚de‡
_SA_FAMILY_T_DECLARED


75 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

76 
	#_SA_FAMILY_T_DECLARED


	)

80 #i‚def 
_STRUCT_IN_ADDR_DECLARED


81 
	sö_addr
 {

82 
ö_addr_t
 
	ms_addr
;

84 
	#_STRUCT_IN_ADDR_DECLARED


	)

88 
	ssockaddr_ö
 {

89 
uöt8_t
 
	msö_Àn
;

90 
ß_Ámûy_t
 
	msö_Ámûy
;

91 
ö_p‹t_t
 
	msö_p‹t
;

92 
ö_addr
 
	msö_addr
;

93 
	msö_zîo
[8];

96 #i‚de‡
_KERNEL


98 #i‚de‡
_BYTEORDER_PROTOTYPED


99 
	#_BYTEORDER_PROTOTYPED


	)

100 
__BEGIN_DECLS


101 
uöt32_t
 
ht⁄l
(uint32_t);

102 
uöt16_t
 
ht⁄s
(uint16_t);

103 
uöt32_t
 
¡ohl
(uint32_t);

104 
uöt16_t
 
¡ohs
(uint16_t);

105 
	g__END_DECLS


108 #i‚de‡
_BYTEORDER_FUNC_DEFINED


109 
	#_BYTEORDER_FUNC_DEFINED


	)

110 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

111 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

112 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

113 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

118 #i‡
__POSIX_VISIBLE
 >= 200112

119 
	#IPPROTO_RAW
 255

	)

120 
	#INET_ADDRSTRLEN
 16

	)

123 #i‡
__BSD_VISIBLE


132 
	#IPPROTO_HOPOPTS
 0

	)

133 
	#IPPROTO_IGMP
 2

	)

134 
	#IPPROTO_GGP
 3

	)

135 
	#IPPROTO_IPV4
 4

	)

136 
	#IPPROTO_IPIP
 
IPPROTO_IPV4


	)

137 
	#IPPROTO_ST
 7

	)

138 
	#IPPROTO_EGP
 8

	)

139 
	#IPPROTO_PIGP
 9

	)

140 
	#IPPROTO_RCCMON
 10

	)

141 
	#IPPROTO_NVPII
 11

	)

142 
	#IPPROTO_PUP
 12

	)

143 
	#IPPROTO_ARGUS
 13

	)

144 
	#IPPROTO_EMCON
 14

	)

145 
	#IPPROTO_XNET
 15

	)

146 
	#IPPROTO_CHAOS
 16

	)

147 
	#IPPROTO_MUX
 18

	)

148 
	#IPPROTO_MEAS
 19

	)

149 
	#IPPROTO_HMP
 20

	)

150 
	#IPPROTO_PRM
 21

	)

151 
	#IPPROTO_IDP
 22

	)

152 
	#IPPROTO_TRUNK1
 23

	)

153 
	#IPPROTO_TRUNK2
 24

	)

154 
	#IPPROTO_LEAF1
 25

	)

155 
	#IPPROTO_LEAF2
 26

	)

156 
	#IPPROTO_RDP
 27

	)

157 
	#IPPROTO_IRTP
 28

	)

158 
	#IPPROTO_TP
 29

	)

159 
	#IPPROTO_BLT
 30

	)

160 
	#IPPROTO_NSP
 31

	)

161 
	#IPPROTO_INP
 32

	)

162 
	#IPPROTO_SEP
 33

	)

163 
	#IPPROTO_3PC
 34

	)

164 
	#IPPROTO_IDPR
 35

	)

165 
	#IPPROTO_XTP
 36

	)

166 
	#IPPROTO_DDP
 37

	)

167 
	#IPPROTO_CMTP
 38

	)

168 
	#IPPROTO_TPXX
 39

	)

169 
	#IPPROTO_IL
 40

	)

170 
	#IPPROTO_IPV6
 41

	)

171 
	#IPPROTO_SDRP
 42

	)

172 
	#IPPROTO_ROUTING
 43

	)

173 
	#IPPROTO_FRAGMENT
 44

	)

174 
	#IPPROTO_IDRP
 45

	)

175 
	#IPPROTO_RSVP
 46

	)

176 
	#IPPROTO_GRE
 47

	)

177 
	#IPPROTO_MHRP
 48

	)

178 
	#IPPROTO_BHA
 49

	)

179 
	#IPPROTO_ESP
 50

	)

180 
	#IPPROTO_AH
 51

	)

181 
	#IPPROTO_INLSP
 52

	)

182 
	#IPPROTO_SWIPE
 53

	)

183 
	#IPPROTO_NHRP
 54

	)

184 
	#IPPROTO_MOBILE
 55

	)

185 
	#IPPROTO_TLSP
 56

	)

186 
	#IPPROTO_SKIP
 57

	)

187 
	#IPPROTO_ICMPV6
 58

	)

188 
	#IPPROTO_NONE
 59

	)

189 
	#IPPROTO_DSTOPTS
 60

	)

190 
	#IPPROTO_AHIP
 61

	)

191 
	#IPPROTO_CFTP
 62

	)

192 
	#IPPROTO_HELLO
 63

	)

193 
	#IPPROTO_SATEXPAK
 64

	)

194 
	#IPPROTO_KRYPTOLAN
 65

	)

195 
	#IPPROTO_RVD
 66

	)

196 
	#IPPROTO_IPPC
 67

	)

197 
	#IPPROTO_ADFS
 68

	)

198 
	#IPPROTO_SATMON
 69

	)

199 
	#IPPROTO_VISA
 70

	)

200 
	#IPPROTO_IPCV
 71

	)

201 
	#IPPROTO_CPNX
 72

	)

202 
	#IPPROTO_CPHB
 73

	)

203 
	#IPPROTO_WSN
 74

	)

204 
	#IPPROTO_PVP
 75

	)

205 
	#IPPROTO_BRSATMON
 76

	)

206 
	#IPPROTO_ND
 77

	)

207 
	#IPPROTO_WBMON
 78

	)

208 
	#IPPROTO_WBEXPAK
 79

	)

209 
	#IPPROTO_EON
 80

	)

210 
	#IPPROTO_VMTP
 81

	)

211 
	#IPPROTO_SVMTP
 82

	)

212 
	#IPPROTO_VINES
 83

	)

213 
	#IPPROTO_TTP
 84

	)

214 
	#IPPROTO_IGP
 85

	)

215 
	#IPPROTO_DGP
 86

	)

216 
	#IPPROTO_TCF
 87

	)

217 
	#IPPROTO_IGRP
 88

	)

218 
	#IPPROTO_OSPFIGP
 89

	)

219 
	#IPPROTO_SRPC
 90

	)

220 
	#IPPROTO_LARP
 91

	)

221 
	#IPPROTO_MTP
 92

	)

222 
	#IPPROTO_AX25
 93

	)

223 
	#IPPROTO_IPEIP
 94

	)

224 
	#IPPROTO_MICP
 95

	)

225 
	#IPPROTO_SCCSP
 96

	)

226 
	#IPPROTO_ETHERIP
 97

	)

227 
	#IPPROTO_ENCAP
 98

	)

228 
	#IPPROTO_APES
 99

	)

229 
	#IPPROTO_GMTP
 100

	)

230 
	#IPPROTO_IPCOMP
 108

	)

232 
	#IPPROTO_PIM
 103

	)

233 
	#IPPROTO_PGM
 113

	)

234 
	#IPPROTO_PFSYNC
 240

	)

237 
	#IPPROTO_OLD_DIVERT
 254

	)

238 
	#IPPROTO_MAX
 256

	)

241 
	#IPPROTO_DONE
 257

	)

244 
	#IPPROTO_DIVERT
 258

	)

296 
	#IPPORT_RESERVED
 1024

	)

302 
	#IPPORT_HIFIRSTAUTO
 49152

	)

303 
	#IPPORT_HILASTAUTO
 65535

	)

311 
	#IPPORT_RESERVEDSTART
 600

	)

313 
	#IPPORT_MAX
 65535

	)

320 
	#IN_CLASSA
(
i
Ë(((
u_öt32_t
)(iË& 0x80000000Ë=0)

	)

321 
	#IN_CLASSA_NET
 0xff000000

	)

322 
	#IN_CLASSA_NSHIFT
 24

	)

323 
	#IN_CLASSA_HOST
 0x00ffffff

	)

324 
	#IN_CLASSA_MAX
 128

	)

326 
	#IN_CLASSB
(
i
Ë(((
u_öt32_t
)(iË& 0xc0000000Ë=0x80000000)

	)

327 
	#IN_CLASSB_NET
 0xffff0000

	)

328 
	#IN_CLASSB_NSHIFT
 16

	)

329 
	#IN_CLASSB_HOST
 0x0000ffff

	)

330 
	#IN_CLASSB_MAX
 65536

	)

332 
	#IN_CLASSC
(
i
Ë(((
u_öt32_t
)(iË& 0xe0000000Ë=0xc0000000)

	)

333 
	#IN_CLASSC_NET
 0xffffff00

	)

334 
	#IN_CLASSC_NSHIFT
 8

	)

335 
	#IN_CLASSC_HOST
 0x000000ff

	)

337 
	#IN_CLASSD
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xe0000000)

	)

338 
	#IN_CLASSD_NET
 0xf0000000

	)

339 
	#IN_CLASSD_NSHIFT
 28

	)

340 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

341 
	#IN_MULTICAST
(
i
Ë
	`IN_CLASSD
(i)

	)

343 
	#IN_EXPERIMENTAL
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

344 
	#IN_BADCLASS
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

346 
	#INADDR_LOOPBACK
 (
u_öt32_t
)0x7f000001

	)

347 #i‚de‡
_KERNEL


348 
	#INADDR_NONE
 0xfffffff‡

	)

351 
	#INADDR_UNSPEC_GROUP
 (
u_öt32_t
)0xe0000000

	)

352 
	#INADDR_ALLHOSTS_GROUP
 (
u_öt32_t
)0xe0000001

	)

353 
	#INADDR_ALLRTRS_GROUP
 (
u_öt32_t
)0xe0000002

	)

354 
	#INADDR_PFSYNC_GROUP
 (
u_öt32_t
)0xe00000f0

	)

355 
	#INADDR_ALLMDNS_GROUP
 (
u_öt32_t
)0xe00000fb

	)

356 
	#INADDR_MAX_LOCAL_GROUP
 (
u_öt32_t
)0xe00000f‡

	)

358 
	#IN_LOOPBACKNET
 127

	)

364 
	#IP_OPTIONS
 1

	)

365 
	#IP_HDRINCL
 2

	)

366 
	#IP_TOS
 3

	)

367 
	#IP_TTL
 4

	)

368 
	#IP_RECVOPTS
 5

	)

369 
	#IP_RECVRETOPTS
 6

	)

370 
	#IP_RECVDSTADDR
 7

	)

371 
	#IP_SENDSRCADDR
 
IP_RECVDSTADDR


	)

372 
	#IP_RETOPTS
 8

	)

373 
	#IP_MULTICAST_IF
 9

	)

374 
	#IP_MULTICAST_TTL
 10

	)

375 
	#IP_MULTICAST_LOOP
 11

	)

376 
	#IP_ADD_MEMBERSHIP
 12

	)

377 
	#IP_DROP_MEMBERSHIP
 13

	)

378 
	#IP_MULTICAST_VIF
 14

	)

379 
	#IP_RSVP_ON
 15

	)

380 
	#IP_RSVP_OFF
 16

	)

381 
	#IP_RSVP_VIF_ON
 17

	)

382 
	#IP_RSVP_VIF_OFF
 18

	)

383 
	#IP_PORTRANGE
 19

	)

384 
	#IP_RECVIF
 20

	)

386 
	#IP_IPSEC_POLICY
 21

	)

387 
	#IP_FAITH
 22

	)

389 
	#IP_ONESBCAST
 23

	)

391 
	#IP_FW_TABLE_ADD
 40

	)

392 
	#IP_FW_TABLE_DEL
 41

	)

393 
	#IP_FW_TABLE_FLUSH
 42

	)

394 
	#IP_FW_TABLE_GETSIZE
 43

	)

395 
	#IP_FW_TABLE_LIST
 44

	)

397 
	#IP_FW_ADD
 50

	)

398 
	#IP_FW_DEL
 51

	)

399 
	#IP_FW_FLUSH
 52

	)

400 
	#IP_FW_ZERO
 53

	)

401 
	#IP_FW_GET
 54

	)

402 
	#IP_FW_RESETLOG
 55

	)

404 
	#IP_DUMMYNET_CONFIGURE
 60

	)

405 
	#IP_DUMMYNET_DEL
 61

	)

406 
	#IP_DUMMYNET_FLUSH
 62

	)

407 
	#IP_DUMMYNET_GET
 64

	)

409 
	#IP_RECVTTL
 65

	)

414 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

415 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

416 
	#IP_MAX_MEMBERSHIPS
 20

	)

421 
	sù_mªq
 {

422 
ö_addr
 
	mimr_mu…üddr
;

423 
ö_addr
 
	mimr_öãrÁ˚
;

430 
	#IP_PORTRANGE_DEFAULT
 0

	)

431 
	#IP_PORTRANGE_HIGH
 1

	)

432 
	#IP_PORTRANGE_LOW
 2

	)

440 
	#IPPROTO_MAXID
 (
IPPROTO_AH
 + 1Ë

	)

442 
	#CTL_IPPROTO_NAMES
 { \

443 { "ù", 
CTLTYPE_NODE
 }, \

444 { "icmp", 
CTLTYPE_NODE
 }, \

445 { "igmp", 
CTLTYPE_NODE
 }, \

446 { "ggp", 
CTLTYPE_NODE
 }, \

449 { "t˝", 
CTLTYPE_NODE
 }, \

451 { "egp", 
CTLTYPE_NODE
 }, \

455 { "pup", 
CTLTYPE_NODE
 }, \

460 { "udp", 
CTLTYPE_NODE
 }, \

465 { "idp", 
CTLTYPE_NODE
 }, \

494 { "ù£c", 
CTLTYPE_NODE
 }, \

510 { "pim", 
CTLTYPE_NODE
 }, \

511 }

	)

516 
	#IPCTL_FORWARDING
 1

	)

517 
	#IPCTL_SENDREDIRECTS
 2

	)

518 
	#IPCTL_DEFTTL
 3

	)

519 #ifde‡
nŸyë


520 
	#IPCTL_DEFMTU
 4

	)

522 
	#IPCTL_RTEXPIRE
 5

	)

523 
	#IPCTL_RTMINEXPIRE
 6

	)

524 
	#IPCTL_RTMAXCACHE
 7

	)

525 
	#IPCTL_SOURCEROUTE
 8

	)

526 
	#IPCTL_DIRECTEDBROADCAST
 9

	)

527 
	#IPCTL_INTRQMAXLEN
 10

	)

528 
	#IPCTL_INTRQDROPS
 11

	)

529 
	#IPCTL_STATS
 12

	)

530 
	#IPCTL_ACCEPTSOURCEROUTE
 13

	)

531 
	#IPCTL_FASTFORWARDING
 14

	)

532 
	#IPCTL_KEEPFAITH
 15

	)

533 
	#IPCTL_GIF_TTL
 16

	)

534 
	#IPCTL_MAXID
 17

	)

536 
	#IPCTL_NAMES
 { \

538 { "f‹w¨dög", 
CTLTYPE_INT
 }, \

539 { "ªdúe˘", 
CTLTYPE_INT
 }, \

540 { "âl", 
CTLTYPE_INT
 }, \

541 { "mtu", 
CTLTYPE_INT
 }, \

542 { "πexpúe", 
CTLTYPE_INT
 }, \

543 { "πmöexpúe", 
CTLTYPE_INT
 }, \

544 { "πmaxˇche", 
CTLTYPE_INT
 }, \

545 { "sour˚rouã", 
CTLTYPE_INT
 }, \

546 { "dúe˘ed-brﬂdˇ°", 
CTLTYPE_INT
 }, \

547 { "öå-queue-maxÀn", 
CTLTYPE_INT
 }, \

548 { "öå-queue-dr›s", 
CTLTYPE_INT
 }, \

549 { "°©s", 
CTLTYPE_STRUCT
 }, \

550 { "ac˚±_sour˚rouã", 
CTLTYPE_INT
 }, \

551 { "Á°f‹w¨dög", 
CTLTYPE_INT
 }, \

552 }

	)

556 #ifde‡
_KERNEL


558 
	gi‚ë
; 
	gmbuf
;

560 
ö_brﬂdˇ°
(
ö_addr
, 
i‚ë
 *);

561 
ö_ˇnf‹w¨d
(
ö_addr
);

562 
ö_loˇœddr
(
ö_addr
);

563 
ö_loˇlù
(
ö_addr
);

564 *
öë_¡ﬂ
(
ö_addr
);

565 *
öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
);

567 
	#ö_ho°eq
(
s
, 
t
Ë((s).
s_addr
 =—).s_addr)

	)

568 
	#ö_nuŒho°
(
x
Ë((x).
s_addr
 =
INADDR_ANY
)

	)

570 
	#ßtosö
(
ß
Ë((
sockaddr_ö
 *)(ß))

	)

571 
	#sötoß
(
sö
Ë((
sockaddr
 *)(sö))

	)

572 
	#iÁtoü
(
iÁ
Ë((
ö_iÁddr
 *)(iÁ))

	)

577 #i‡
__POSIX_VISIBLE
 >= 200112

578 
	#__KAME_NETINET_IN_H_INCLUDED_


	)

579 
	~<√töë6/ö6.h
>

580 #unde‡
__KAME_NETINET_IN_H_INCLUDED_


	@/usr/include/signal.h

37 #i‚de‡
_SIGNAL_H_


38 
	#_SIGNAL_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/_ty≥s.h
>

42 
	~<sys/sig«l.h
>

44 #i‡
__BSD_VISIBLE


49 
__c⁄°
 *__c⁄° 
sys_sig«me
[
NSIG
];

50 
__c⁄°
 *__c⁄° 
sys_sigli°
[
NSIG
];

51 
__c⁄°
 
sys_nsig
;

54 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


55 #i‚de‡
_PID_T_DECLARED


56 
__pid_t
 
	tpid_t
;

57 
	#_PID_T_DECLARED


	)

61 
__BEGIN_DECLS


62 
øi£
();

64 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


65 
kûl
(
__pid_t
, );

66 
siga˘i⁄
(, c⁄° siga˘i⁄ * 
__ª°ri˘
,

67 
siga˘i⁄
 * 
__ª°ri˘
);

68 
sigadd£t
(
sig£t_t
 *, );

69 
sigdñ£t
(
sig£t_t
 *, );

70 
sigem±y£t
(
sig£t_t
 *);

71 
sigfûl£t
(
sig£t_t
 *);

72 
sigismembî
(c⁄° 
sig£t_t
 *, );

73 
sig≥ndög
(
sig£t_t
 *);

74 
sig¥ocmask
(, c⁄° 
sig£t_t
 * 
__ª°ri˘
, sigset_t * __restrict);

75 
sigsu•íd
(c⁄° 
sig£t_t
 *);

76 
sigwaô
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, * __restrict);

79 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE
 >= 600

87 
sigqueue
(
__pid_t
, , c⁄° 
sigvÆ
);

89 
	gtime•ec
;

90 
sigtimedwaô
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, 
sigöfo_t
 * __restrict,

91 c⁄° 
time•ec
 * 
__ª°ri˘
);

92 
sigwaôöfo
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, 
sigöfo_t
 * __restrict);

95 #i‡
__XSI_VISIBLE


96 
kûÕg
(
__pid_t
, );

97 
sigÆt°ack
(c⁄° 
°ack_t
 * 
__ª°ri˘
, stack_t * __restrict);

98 
sig∑u£
();

101 #i‡
__POSIX_VISIBLE
 >= 200112

102 
sigöãºu±
(, );

105 #i‡
__BSD_VISIBLE


106 
sigblock
();

107 
	g__uc⁄ãxt
;

108 
sigªtu∫
(c⁄° 
__uc⁄ãxt
 *);

109 
sig£tmask
();

110 
sig°ack
(const sigstack *, sigstack *);

111 
sigvec
(, sigvec *, sigvec *);

112 
psig«l
(, const *);

114 
	g__END_DECLS


	@/usr/include/stdarg.h

38 #i‚de‡
_MACHINE_STDARG_H_


39 
	#_MACHINE_STDARG_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_ty≥s.h
>

44 #i‚de‡
_VA_LIST_DECLARED


45 
	#_VA_LIST_DECLARED


	)

46 
__va_li°
 
	tva_li°
;

49 #i‡(
deföed
(
__GNUC__
Ë&& (__GNUC__ =2 && 
__GNUC_MINOR__
 > 95 || __GNUC__ >3Ë&& !deföed(
__INTEL_COMPILER
))

51 
	#va_°¨t
(
≠
, 
œ°
) \

52 
	`__buûtö_°d¨g_°¨t
((
≠
), (
œ°
))

	)

54 
	#va_¨g
(
≠
, 
ty≥
) \

55 
	`__buûtö_va_¨g
((
≠
), 
ty≥
)

	)

57 #i‡
__ISO_C_VISIBLE
 >= 1999

58 
	#va_c›y
(
de°
, 
§c
) \

59 
	`__buûtö_va_c›y
((
de°
), (
§c
))

	)

62 
	#va_íd
(
≠
) \

63 
	`__buûtö_va_íd
(
≠
)

	)

67 
	#__va_size
(
ty≥
) \

68 ((((
ty≥
Ë+ (Ë- 1Ë/ ()Ë* ())

	)

70 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

71 
	#va_°¨t
(
≠
, 
œ°
) \

72 ((
≠
Ë(
va_li°
)
	`__buûtö_√xt_¨g
(
œ°
))

	)

74 
	#va_°¨t
(
≠
, 
œ°
) \

75 ((
≠
Ë(
va_li°
)&(
œ°
Ë+ 
	`__va_size
÷a°))

	)

78 
	#va_¨g
(
≠
, 
ty≥
) \

79 (*(
ty≥
 *)((
≠
Ë+
	`__va_size
—y≥), (≠Ë- __va_size—y≥)))

	)

81 #i‡
__ISO_C_VISIBLE
 >= 1999

82 
	#va_c›y
(
de°
, 
§c
) \

83 ((
de°
Ë(
§c
))

	)

86 
	#va_íd
(
≠
)

	)

	@/usr/include/stdio.h

40 #i‚def 
_STDIO_H_


41 
	#_STDIO_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_nuŒ.h
>

45 
	~<sys/_ty≥s.h
>

47 
__off_t
 
	tÂos_t
;

49 #i‚de‡
_SIZE_T_DECLARED


50 
__size_t
 
	tsize_t
;

51 
	#_SIZE_T_DECLARED


	)

54 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


55 #i‚de‡
_VA_LIST_DECLARED


56 
__va_li°
 
	tva_li°
;

57 
	#_VA_LIST_DECLARED


	)

61 
	#_FSTDIO


	)

70 
	s__sbuf
 {

71 *
	m_ba£
;

72 
	m_size
;

76 
	g__sFILEX
;

102 
	s__sFILE
 {

103 *
	m_p
;

104 
	m_r
;

105 
	m_w
;

106 
	m_Êags
;

107 
	m_fûe
;

108 
__sbuf
 
	m_bf
;

109 
	m_lbfsize
;

112 *
	m_cookõ
;

113 (*
	m_˛o£
)(*);

114 (*
	m_ªad
)(*, *, );

115 
Âos_t
 (*
_£ek
)(*, 
	mÂos_t
, );

116 (*
	m_wrôe
)(*, const *, );

119 
__sbuf
 
	m_ub
;

120 
__sFILEX
 *
	m_exåa
;

121 
	m_ur
;

124 
	m_ubuf
[3];

125 
	m_nbuf
[1];

128 
__sbuf
 
	m_lb
;

131 
	m_blksize
;

132 
Âos_t
 
	m_off£t
;

133 } 
	tFILE
;

135 #i‚de‡
_STDSTREAM_DECLARED


136 
__BEGIN_DECLS


137 
FILE
 *
__°döp
;

138 
FILE
 *
__°douç
;

139 
FILE
 *
__°dîΩ
;

140 
	g__END_DECLS


141 
	#_STDSTREAM_DECLARED


	)

144 
	#__SLBF
 0x0001

	)

145 
	#__SNBF
 0x0002

	)

146 
	#__SRD
 0x0004

	)

147 
	#__SWR
 0x0008

	)

149 
	#__SRW
 0x0010

	)

150 
	#__SEOF
 0x0020

	)

151 
	#__SERR
 0x0040

	)

152 
	#__SMBF
 0x0080

	)

153 
	#__SAPP
 0x0100

	)

154 
	#__SSTR
 0x0200

	)

155 
	#__SOPT
 0x0400

	)

156 
	#__SNPT
 0x0800

	)

157 
	#__SOFF
 0x1000

	)

158 
	#__SMOD
 0x2000

	)

159 
	#__SALC
 0x4000

	)

160 
	#__SIGN
 0x8000

	)

171 
	#_IOFBF
 0

	)

172 
	#_IOLBF
 1

	)

173 
	#_IONBF
 2

	)

175 
	#BUFSIZ
 1024

	)

176 
	#EOF
 (-1)

	)

184 
	#FOPEN_MAX
 20

	)

185 
	#FILENAME_MAX
 1024

	)

188 #i‡
__XSI_VISIBLE


189 
	#P_tmpdú
 "/v¨/tmp/"

	)

191 
	#L_tm≤am
 1024

	)

192 
	#TMP_MAX
 308915776

	)

194 #i‚de‡
SEEK_SET


195 
	#SEEK_SET
 0

	)

197 #i‚de‡
SEEK_CUR


198 
	#SEEK_CUR
 1

	)

200 #i‚de‡
SEEK_END


201 
	#SEEK_END
 2

	)

204 
	#°dö
 
__°döp


	)

205 
	#°dout
 
__°douç


	)

206 
	#°dîr
 
__°dîΩ


	)

208 
__BEGIN_DECLS


212 
˛óªº
(
FILE
 *);

213 
f˛o£
(
FILE
 *);

214 
„of
(
FILE
 *);

215 
„º‹
(
FILE
 *);

216 
fÊush
(
FILE
 *);

217 
fgëc
(
FILE
 *);

218 
fgëpos
(
FILE
 * 
__ª°ri˘
, 
Âos_t
 * __restrict);

219 *
fgës
(* 
__ª°ri˘
, , 
FILE
 * __restrict);

220 
FILE
 *
f›í
(c⁄° * 
__ª°ri˘
, const * __restrict);

221 
Ârötf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

222 
Âutc
(, 
FILE
 *);

223 
Âuts
(c⁄° * 
__ª°ri˘
, 
FILE
 * __restrict);

224 
size_t
 
‰ód
(* 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

225 
FILE
 *
‰e›í
(c⁄° * 
__ª°ri˘
, const * __restrict, FILE * __restrict);

226 
fsˇnf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

227 
f£ek
(
FILE
 *, , );

228 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

229 
·ñl
(
FILE
 *);

230 
size_t
 
fwrôe
(c⁄° * 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

231 
gëc
(
FILE
 *);

232 
gëch¨
();

233 *
gës
(*);

234 
≥º‹
(const *);

235 
¥ötf
(c⁄° * 
__ª°ri˘
, ...);

236 
putc
(, 
FILE
 *);

237 
putch¨
();

238 
puts
(const *);

239 
ªmove
(const *);

240 
ª«me
(const *, const *);

241 
ªwöd
(
FILE
 *);

242 
sˇnf
(c⁄° * 
__ª°ri˘
, ...);

243 
£tbuf
(
FILE
 * 
__ª°ri˘
, * __restrict);

244 
£tvbuf
(
FILE
 * 
__ª°ri˘
, * __ª°ri˘, , 
size_t
);

245 
•rötf
(* 
__ª°ri˘
, const * __restrict, ...);

246 
ssˇnf
(c⁄° * 
__ª°ri˘
, const * __restrict, ...);

247 
FILE
 *
tmpfûe
();

248 *
tm≤am
(*);

249 
ungëc
(, 
FILE
 *);

250 
vÂrötf
(
FILE
 * 
__ª°ri˘
, const * __restrict,

251 
__va_li°
);

252 
v¥ötf
(c⁄° * 
__ª°ri˘
, 
__va_li°
);

253 
v•rötf
(* 
__ª°ri˘
, const * __restrict,

254 
__va_li°
);

256 #i‡
__ISO_C_VISIBLE
 >= 1999

257 
	$¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

258 ...Ë
	`__¥ötÊike
(3, 4);

259 
	$vfsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

260 
	`__sˇnÊike
(2, 0);

261 
	$vsˇnf
(c⁄° * 
__ª°ri˘
, 
__va_li°
Ë
	`__sˇnÊike
(1, 0);

262 
	$v¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

263 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

264 
	$vssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

265 
	`__sˇnÊike
(2, 0);

271 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 199506

273 
	#L_cu£rid
 17

	)

276 #i‡
__POSIX_VISIBLE


277 
	#L_˘îmid
 1024

	)

279 *
	`˘îmid
(*);

280 
FILE
 *
	`fd›í
(, const *);

281 
	`fûío
(
FILE
 *);

284 #i‡
__POSIX_VISIBLE
 >= 199209

285 
	`p˛o£
(
FILE
 *);

286 
FILE
 *
	`p›í
(const *, const *);

289 #i‡
__POSIX_VISIBLE
 >= 199506

290 
	`·rylockfûe
(
FILE
 *);

291 
	`Êockfûe
(
FILE
 *);

292 
	`fu∆ockfûe
(
FILE
 *);

298 
	`gëc_u∆ocked
(
FILE
 *);

299 
	`gëch¨_u∆ocked
();

300 
	`putc_u∆ocked
(, 
FILE
 *);

301 
	`putch¨_u∆ocked
();

303 #i‡
__BSD_VISIBLE


304 
	`˛óªº_u∆ocked
(
FILE
 *);

305 
	`„of_u∆ocked
(
FILE
 *);

306 
	`„º‹_u∆ocked
(
FILE
 *);

307 
	`fûío_u∆ocked
(
FILE
 *);

310 #i‡
__POSIX_VISIBLE
 >= 200112

311 
	`f£eko
(
FILE
 *, 
__off_t
, );

312 
__off_t
 
	`·ñlo
(
FILE
 *);

315 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 > 0 && __XSI_VISIBLE < 600

316 
	`gëw
(
FILE
 *);

317 
	`putw
(, 
FILE
 *);

320 #i‡
__XSI_VISIBLE


321 *
	`ãm≤am
(const *, const *);

327 #i‡
__BSD_VISIBLE


328 
	$a•rötf
(**, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

329 *
	`˘îmid_r
(*);

330 *
	`fgë 
(
FILE
 *, 
size_t
 *);

331 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >= 7 || __GNUC__ >= 3

332 
	#__ATTR_FORMAT_ARG
 
	`__©åibuã__
((
	`__f‹m©_¨g__
(2)))

	)

334 
	#__ATTR_FORMAT_ARG


	)

336 
__c⁄°
 *
	$fmtcheck
(c⁄° *, c⁄° *Ë
__ATTR_FORMAT_ARG
;

337 
	`Âurge
(
FILE
 *);

338 
	`£tbuf„r
(
FILE
 *, *, );

339 
	`£éöebuf
(
FILE
 *);

340 
	$va•rötf
(**, c⁄° *, 
__va_li°
)

341 
	`__¥ötÊike
(2, 0);

348 
__c⁄°
 
sys_√º
;

349 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

354 
FILE
 *
	`fun›í
(const *,

357 
	$Âos_t
 (*)(*, 
Âos_t
, ),

359 
	#‰›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, fn, 0, 0, 0)

	)

360 
	#fw›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, 0, fn, 0, 0)

	)

365 #i‚de‡
_FTRUNCATE_DECLARED


366 
	#_FTRUNCATE_DECLARED


	)

367 
	`·runˇã
(, 
__off_t
);

369 #i‚de‡
_LSEEK_DECLARED


370 
	#_LSEEK_DECLARED


	)

371 
__off_t
 
	`l£ek
(, __off_t, );

373 #i‚de‡
_MMAP_DECLARED


374 
	#_MMAP_DECLARED


	)

375 *
	`mm≠
(*, 
size_t
, , , , 
__off_t
);

377 #i‚de‡
_TRUNCATE_DECLARED


378 
	#_TRUNCATE_DECLARED


	)

379 
	`åunˇã
(c⁄° *, 
__off_t
);

386 
	`__§gë
(
FILE
 *);

387 
	`__swbuf
(, 
FILE
 *);

393 
	#__sgëc
(
p
Ë(--’)->
_r
 < 0 ? 
	`__§gë
’Ë: ()(*’)->
_p
++))

	)

394 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__STDC__
)

395 
__ölöe
 
	$__•utc
(
_c
, 
FILE
 *
_p
) {

396 i‡(--
_p
->
_w
 >0 || (_p->_w >_p->
_lbfsize
 && ()
_c
 != '\n'))

397  (*
_p
->_p++ = 
_c
);

399  (
	`__swbuf
(
_c
, 
_p
));

400 
	}
}

405 
	#__•utc
(
c
, 
p
) \

406 (--(
p
)->
_w
 < 0 ? \

407 (
p
)->
_w
 >’)->
_lbfsize
 ? \

408 (*(
p
)->
_p
 = (
c
)), *(p)->_p != '\n' ? \

409 ()*(
p
)->
_p
++ : \

410 
	`__swbuf
('\n', 
p
) : \

411 
	`__swbuf
(()(
c
), 
p
) : \

412 (*(
p
)->
_p
 = (
c
), ()*’)->_p++))

	)

415 
	#__s„of
(
p
Ë((’)->
_Êags
 & 
__SEOF
Ë!0)

	)

416 
	#__s„º‹
(
p
Ë((’)->
_Êags
 & 
__SERR
Ë!0)

	)

417 
	#__s˛óªº
(
p
Ë(()(’)->
_Êags
 &~(
__SERR
|
__SEOF
)))

	)

418 
	#__sfûío
(
p
Ë(’)->
_fûe
)

	)

420 
__i°hªaded
;

422 
	#„of
(
p
Ë(!
__i°hªaded
 ? 
	`__s„of
’Ë: (
„of
)’))

	)

423 
	#„º‹
(
p
Ë(!
__i°hªaded
 ? 
	`__s„º‹
’Ë: (
„º‹
)’))

	)

424 
	#˛óªº
(
p
Ë(!
__i°hªaded
 ? 
	`__s˛óªº
’Ë: (
˛óªº
)’))

	)

426 #i‡
__POSIX_VISIBLE


427 
	#fûío
(
p
Ë(!
__i°hªaded
 ? 
	`__sfûío
’Ë: (
fûío
)’))

	)

430 
	#gëc
(
Â
Ë(!
__i°hªaded
 ? 
	`__sgëc
(ÂË: (
gëc
)(Â))

	)

431 
	#putc
(
x
, 
Â
Ë(!
__i°hªaded
 ? 
	`__•utc
(x, fpË: (
putc
)(x, fp))

	)

433 
	#gëch¨
(Ë
	`gëc
(
°dö
)

	)

434 
	#putch¨
(
x
Ë
	`putc
(x, 
°dout
)

	)

436 #i‡
__BSD_VISIBLE


441 
	#„of_u∆ocked
(
p
Ë
	`__s„of
’)

	)

442 
	#„º‹_u∆ocked
(
p
Ë
	`__s„º‹
’)

	)

443 
	#˛óªº_u∆ocked
(
p
Ë
	`__s˛óªº
’)

	)

444 
	#fûío_u∆ocked
(
p
Ë
	`__sfûío
’)

	)

446 #i‡
__POSIX_VISIBLE
 >= 199506

447 
	#gëc_u∆ocked
(
Â
Ë
	`__sgëc
(Â)

	)

448 
	#putc_u∆ocked
(
x
, 
Â
Ë
	`__•utc
(x, fp)

	)

450 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

451 
	#putch¨_u∆ocked
(
x
Ë
	`putc_u∆ocked
(x, 
°dout
)

	)

454 
	g__END_DECLS


	@/usr/include/stdlib.h

37 #i‚de‡
_STDLIB_H_


38 
	#_STDLIB_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/_nuŒ.h
>

42 
	~<sys/_ty≥s.h
>

44 #i‡
__BSD_VISIBLE


45 #i‚de‡
_RUNE_T_DECLARED


46 
__ru√_t
 
	tru√_t
;

47 
	#_RUNE_T_DECLARED


	)

51 #i‚de‡
_SIZE_T_DECLARED


52 
__size_t
 
	tsize_t
;

53 
	#_SIZE_T_DECLARED


	)

56 #i‚def 
__˝lu•lus


57 #i‚de‡
_WCHAR_T_DECLARED


58 
__wch¨_t
 
	twch¨_t
;

59 
	#_WCHAR_T_DECLARED


	)

64 
	mquŸ
;

65 
	mªm
;

66 } 
	tdiv_t
;

69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

73 
	#EXIT_FAILURE
 1

	)

74 
	#EXIT_SUCCESS
 0

	)

76 
	#RAND_MAX
 0x7fffffff

	)

78 
__mb_cur_max
;

79 
	#MB_CUR_MAX
 
__mb_cur_max


	)

81 
__BEGIN_DECLS


82 
	$ab‹t
(Ë
__dód2
;

83 
	$abs
(Ë
__puª2
;

84 
	`©exô
((*)());

85 
	`©of
(const *);

86 
	`©oi
(const *);

87 
	`©ﬁ
(const *);

88 *
	`b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

89 
size_t
, (*)(const *, const *));

90 *
	`ˇŒoc
(
size_t
, size_t);

91 
div_t
 
	$div
(, Ë
__puª2
;

92 
	$exô
(Ë
__dód2
;

93 
	`‰ì
(*);

94 *
	`gëív
(const *);

95 
	$œbs
(Ë
__puª2
;

96 
ldiv_t
 
	$ldiv
(, Ë
__puª2
;

97 *
	`mÆloc
(
size_t
);

98 
	`mbÀn
(c⁄° *, 
size_t
);

99 
size_t
 
	`mb°owcs
(
wch¨_t
 * 
__ª°ri˘
 , const * __restrict, size_t);

100 
	`mbtowc
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

101 
	`qs‹t
(*, 
size_t
, size_t,

103 
	`ønd
();

104 *
	`ªÆloc
(*, 
size_t
);

105 
	`§™d
();

106 
	`°πod
(c⁄° * 
__ª°ri˘
, ** __restrict);

107 
	`°πof
(c⁄° * 
__ª°ri˘
, ** __restrict);

108 
	`°πﬁ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

110 
	`°πﬁd
(c⁄° * 
__ª°ri˘
, ** __restrict);

112 
	`°πoul
(c⁄° * 
__ª°ri˘
, ** __restrict, );

113 
	`sy°em
(const *);

114 
	`w˘omb
(*, 
wch¨_t
);

115 
size_t
 
	`wc°ombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t);

127 #i‡
__ISO_C_VISIBLE
 >= 1999

128 #ifde‡
__LONG_LONG_SUPPORTED


131 
quŸ
;

132 
ªm
;

133 } 
	tŒdiv_t
;

137 
	`©ﬁl
(const *);

140 
	$Œabs
(Ë
__puª2
;

142 
Œdiv_t
 
	$Œdiv
(, Ë
__puª2
;

145 
	`°πﬁl
(c⁄° * 
__ª°ri˘
, ** __restrict, );

148 
	`°πouŒ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

151 
	$_Exô
(Ë
__dód2
;

159 #i‡
__POSIX_VISIBLE


161 
	`ønd_r
(*);

162 
	`£ãnv
(const *, const *, );

163 
	`un£ãnv
(const *);

172 #i‡
__XSI_VISIBLE


175 
	`dønd48
();

177 
	`î™d48
([3]);

180 
	`gësub›t
(**, *const *, **);

181 
	`gø¡±
();

182 *
	`öô°©e
(, *, );

183 
	`jønd48
([3]);

185 
	`lc⁄g48
([7]);

186 
	`Ã™d48
();

187 #i‚de‡
_MKSTEMP_DECLARED


188 
	`mk°emp
(*);

189 
	#_MKSTEMP_DECLARED


	)

191 #i‚de‡
_MKTEMP_DECLARED


192 *
	`mkãmp
(*);

193 
	#_MKTEMP_DECLARED


	)

195 
	`mønd48
();

196 
	`ƒ™d48
([3]);

197 
	`posix_›í±
();

198 *
	`±¢ame
();

199 
	`puãnv
(const *);

200 
	`øndom
();

201 *
	`ªÆ∑th
(c⁄° *, 
ªsﬁved_∑th
[]);

203 *
	`£ed48
([3]);

204 #i‚de‡
_SETKEY_DECLARED


205 
	`£tkey
(const *);

206 
	#_SETKEY_DECLARED


	)

208 *
	`£t°©e
( *);

209 
	`§™d48
();

210 
	`§™dom
();

211 
	`u∆ock±
();

214 #i‡
__BSD_VISIBLE


215 c⁄° *
_mÆloc_›ti⁄s
;

216 (*
_mÆloc_mesßge
)(const *, const *, const *,

228 #i‡
__GNUC__
 >2 || 
	`deföed
(
__INTEL_COMPILER
)

229 #unde‡
Æloˇ


230 
	#Æloˇ
(
sz
Ë
	`__buûtö_Æloˇ
(sz)

	)

231 #ñi‡
	`deföed
(
löt
)

232 *
	`Æloˇ
(
size_t
);

235 
__uöt32_t


236 
	`¨c4øndom
();

237 
	`¨c4øndom_addøndom
(*
d©
, 
d©Àn
);

238 
	`¨c4øndom_°ú
();

239 *
	`gëbsize
(*, *);

241 *
	`cgëˇp
(*, const *, );

242 
	`cgë˛o£
();

243 
	`cgëít
(**, **, const *);

244 
	`cgëfú°
(**, **);

245 
	`cgëm©ch
(const *, const *);

246 
	`cgë√xt
(**, **);

247 
	`cgënum
(*, const *, *);

248 
	`cgë£t
(const *);

249 
	`cgë°r
(*, const *, **);

250 
	`cgëu°r
(*, const *, **);

252 
	`d´m⁄
(, );

253 *
	`dev«me
(, );

254 *
	`dev«me_r
(, , *, );

255 
	`gëlﬂdavg
([], );

256 
__c⁄°
 *

257 
	`gë¥og«me
();

259 
	`hóps‹t
(*, 
size_t
, size_t, (*)(const *, const *));

260 
	`mîges‹t
(*, 
size_t
, size_t, (*)(const *, const *));

261 
	`qs‹t_r
(*, 
size_t
, size_t, *,

263 
	`ødixs‹t
(const **, , const *,

265 *
	`ªÆlocf
(*, 
size_t
);

266 
	`£çrog«me
(const *);

267 
	`§adixs‹t
(const **, , const *,

269 
	`§™ddev
();

270 
	`§™domdev
();

273 
__öt64_t


274 
	`°πoq
(const *, **, );

275 
__uöt64_t


276 
	`°πouq
(const *, **, );

278 *
sub›èrg
;

280 
__END_DECLS


	@/usr/include/string.h

37 #i‚de‡
_STRING_H_


38 
	#_STRING_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/_nuŒ.h
>

42 
	~<sys/_ty≥s.h
>

48 #i‡
__BSD_VISIBLE


49 
	~<°rögs.h
>

52 #i‚de‡
_SIZE_T_DECLARED


53 
__size_t
 
	tsize_t
;

54 
	#_SIZE_T_DECLARED


	)

57 
	g__BEGIN_DECLS


58 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


59 *
memc˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, , 
size_t
);

61 *
	$memchr
(c⁄° *, , 
size_t
Ë
__puª
;

62 
	$memcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

63 *
	`mem˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

64 *
	`memmove
(*, c⁄° *, 
size_t
);

65 *
	`mem£t
(*, , 
size_t
);

66 #i‡
__BSD_VISIBLE


67 *
	`°p˝y
(*, const *);

68 *
	$°rˇ£°r
(c⁄° *, c⁄° *Ë
__puª
;

70 *
	`°rˇt
(* 
__ª°ri˘
, const * __restrict);

71 *
	$°rchr
(c⁄° *, Ë
__puª
;

72 
	$°rcmp
(c⁄° *, c⁄° *Ë
__puª
;

73 
	`°rcﬁl
(const *, const *);

74 *
	`°r˝y
(* 
__ª°ri˘
, const * __restrict);

75 
size_t
 
	$°rc•n
(c⁄° *, c⁄° *Ë
__puª
;

76 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


77 *
	`°rdup
(const *);

79 *
	`°ªº‹
();

80 #i‡
__POSIX_VISIBLE
 >= 200112

81 
	`°ªº‹_r
(, *, 
size_t
);

83 #i‡
__BSD_VISIBLE


84 
size_t
 
	`°æˇt
(*, const *, size_t);

85 
size_t
 
	`°æ˝y
(*, const *, size_t);

87 
size_t
 
	$°æí
(c⁄° *Ë
__puª
;

88 #i‡
__BSD_VISIBLE


89 
	`°rmode
(, *);

91 *
	`°∫ˇt
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

92 
	$°∫cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

93 *
	`°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

94 #i‡
__BSD_VISIBLE


95 *
	$°∫°r
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

97 *
	$°Ωbrk
(c⁄° *, c⁄° *Ë
__puª
;

98 *
	$°ºchr
(c⁄° *, Ë
__puª
;

99 #i‡
__BSD_VISIBLE


100 *
	`°r£p
(**, const *);

101 *
	`°rsig«l
();

103 
size_t
 
	$°r•n
(c⁄° *, c⁄° *Ë
__puª
;

104 *
	$°r°r
(c⁄° *, c⁄° *Ë
__puª
;

105 *
	`°πok
(* 
__ª°ri˘
, const * __restrict);

106 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE
 >= 500

107 *
	`°πok_r
(*, const *, **);

109 
size_t
 
	`°rx‰m
(* 
__ª°ri˘
, const * __restrict, size_t);

110 #i‡
__BSD_VISIBLE


111 
	`swab
(c⁄° *, *, 
size_t
);

113 
__END_DECLS


	@/usr/include/sys/cdefs.h

36 #i‚def 
_SYS_CDEFS_H_


37 
	#_SYS_CDEFS_H_


	)

39 #i‡
deföed
(
__˝lu•lus
)

40 
	#__BEGIN_DECLS
 "C" {

	)

41 
	#__END_DECLS
 }

	)

43 
	#__BEGIN_DECLS


	)

44 
	#__END_DECLS


	)

50 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

51 
	#__GNUC_PREREQ__
(
ma
, 
mi
) \

52 (
__GNUC__
 > (
ma
Ë|| __GNUC__ =(maË&& 
__GNUC_MINOR__
 >(
mi
))

	)

54 
	#__GNUC_PREREQ__
(
ma
, 
mi
Ë0

	)

69 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

70 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

71 
	#__CONCAT1
(
x
,
y
Ëx ## 
	)
y

72 
	#__CONCAT
(
x
,
y
Ë
	`__CONCAT1
(x,y)

	)

73 
	#__STRING
(
x
Ë#x

	)

74 
	#__XSTRING
(
x
Ë
	`__STRING
(xË

	)

76 
	#__c⁄°
 c⁄°

	)

77 
	#__sig√d
 sig√d

	)

78 
	#__vﬁ©ûe
 vﬁ©ûe

	)

79 #i‡
deföed
(
__˝lu•lus
)

80 
	#__ölöe
 
ölöe


	)

82 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
))

83 
	#__ölöe


	)

88 
	#__P
(
¥Ÿos
Ë(Ë

	)

89 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

90 
	#__STRING
(
x
Ë"x"

	)

92 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
))

93 
	#__c⁄°


	)

94 
	#__ölöe


	)

95 
	#__sig√d


	)

96 
	#__vﬁ©ûe


	)

105 #i‚def 
NO_ANSI_KEYWORDS


106 c⁄°

	)

107 
	#ölöe


	)

108 sig√d

	)

109 vﬁ©ûe

	)

123 #ifde‡
löt


124 
	#__dód2


	)

125 
	#__puª2


	)

126 
	#__unu£d


	)

127 
	#__∑cked


	)

128 
	#__Æig√d
(
x
)

	)

129 
	#__£˘i⁄
(
x
)

	)

131 #i‡!
__GNUC_PREREQ__
(2, 5Ë&& !
deföed
(
__INTEL_COMPILER
)

132 
	#__dód2


	)

133 
	#__puª2


	)

134 
	#__unu£d


	)

136 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >5 && __GNUC_MINOR__ < 7 && !
deföed
(
__INTEL_COMPILER
)

137 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

138 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

139 
	#__unu£d


	)

142 #i‡
__GNUC_PREREQ__
(2, 7)

143 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

144 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

145 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

146 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

147 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

148 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

149 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

151 #i‡
deföed
(
__INTEL_COMPILER
)

152 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

153 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

154 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

155 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

156 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

157 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

158 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

162 #i‡
__GNUC_PREREQ__
(2, 96)

163 
	#__puª
 
	`__©åibuã__
((
__puª__
))

	)

165 
	#__puª


	)

168 #i‡
__GNUC_PREREQ__
(3, 1Ë|| (
deföed
(
__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

169 
	#__Æways_ölöe
 
	`__©åibuã__
((
__Æways_ölöe__
))

	)

171 
	#__Æways_ölöe


	)

174 #i‡
__GNUC_PREREQ__
(3, 3)

175 
	#__n⁄nuŒ
(
x
Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(x)))

	)

177 
	#__n⁄nuŒ
(
x
)

	)

181 #i‡!
__GNUC_PREREQ__
(2, 7Ë&& !
deföed
(
__INTEL_COMPILER
)

182 
	#__func__
 
NULL


	)

185 #i‡(
deföed
(
__INTEL_COMPILER
Ë|| (deföed(
__GNUC__
Ë&& __GNUC__ >2)Ë&& !deföed(
__STRICT_ANSI__
Ë|| 
__STDC_VERSION__
 >= 199901

186 
	#__LONG_LONG_SUPPORTED


	)

195 #i‡!(
__GNUC__
 =2 && 
__GNUC_MINOR__
 == 95)

196 #i‡!
deföed
(
__STDC_VERSION__
) || __STDC_VERSION__ < 199901

197 
	#__ª°ri˘


	)

199 
	#__ª°ri˘
 
ª°ri˘


	)

231 #i‡
__GNUC_PREREQ__
(2, 96)

232 
	#__¥edi˘_åue
(
exp
Ë
	`__buûtö_ex≥˘
(”xp), 1)

	)

233 
	#__¥edi˘_Ál£
(
exp
Ë
	`__buûtö_ex≥˘
(”xp), 0)

	)

235 
	#__¥edi˘_åue
(
exp
Ë”xp)

	)

236 
	#__¥edi˘_Ál£
(
exp
Ë”xp)

	)

243 
	#__off£tof
(
ty≥
, 
fõld
Ë((
size_t
)(&(—y≥ *)0)->fõld))

	)

244 
	#__øngeof
(
ty≥
, 
°¨t
, 
íd
) \

245 (
	`__off£tof
(
ty≥
, 
íd
Ë- __off£tof—y≥, 
°¨t
))

	)

253 #i‡!
__GNUC_PREREQ__
(2, 7Ë&& !
deföed
(
__INTEL_COMPILER
)

254 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

255 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

257 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
) \

258 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

259 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
) \

260 
	`__©åibuã__
((
	`__f‹m©__
 (
__sˇnf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

264 #i‡
__FªeBSD_cc_vîsi⁄
 >300001 && 
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

265 
	#__¥ötf0like
(
fmèrg
, 
fú°v¨¨g
) \

266 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf0__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

268 
	#__¥ötf0like
(
fmèrg
, 
fú°v¨¨g
)

	)

271 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

272 #i‚de‡
__INTEL_COMPILER


273 
	#__°r⁄g_ª„ªn˚
(
sym
,
Æüssym
) \

274 
	`__ty≥of
 (
sym
Ë
Æüssym
 
	`__©åibuã__
 ((
	`__Æüs__
 (#sym)));

	)

276 #ifde‡
__STDC__


277 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

278 
	`__asm__
(".weak " #alias); \

279 
	`__asm__
(".equ " #Æü†", " #sym)

	)

280 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

281 
	`__asm__
(".section .gnu.warning." #sym); \

282 
	`__asm__
(".asciz \"" 
msg
 "\""); \

283 
	`__asm__
(".¥evious")

	)

285 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

286 
	`__asm__
(".weakálias"); \

287 
	`__asm__
(".equálüs, sym")

	)

288 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

289 
	`__asm__
(".section .gnu.warning.sym"); \

290 
	`__asm__
(".asciz \"msg\""); \

291 
	`__asm__
(".¥evious")

	)

295 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

296 
	#__IDSTRING
(
«me
,
°rög
Ë
	`__asm__
(".idít\t\"" såög "\"")

	)

304 
	#__IDSTRING
(
«me
,
°rög
Ëc⁄° «me[] 
__unu£d
 = 
	)
string

313 #i‚def 
__FBSDID


314 #i‡!
deföed
(
löt
Ë&& !deföed(
STRIP_FBSDID
)

315 
	#__FBSDID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

317 
	#__FBSDID
(
s
Ë
__hack


	)

321 #i‚def 
__RCSID


322 #i‚def 
NO__RCSID


323 
	#__RCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

325 
	#__RCSID
(
s
Ë
__hack


	)

329 #i‚def 
__RCSID_SOURCE


330 #i‚def 
NO__RCSID_SOURCE


331 
	#__RCSID_SOURCE
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_sour˚_
,
__LINE__
),s)

	)

333 
	#__RCSID_SOURCE
(
s
Ë
__hack


	)

337 #i‚def 
__SCCSID


338 #i‚def 
NO__SCCSID


339 
	#__SCCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__sccsid_
,
__LINE__
),s)

	)

341 
	#__SCCSID
(
s
Ë
__hack


	)

345 #i‚def 
__COPYRIGHT


346 #i‚def 
NO__COPYRIGHT


347 
	#__COPYRIGHT
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__c›yright_
,
__LINE__
),s)

	)

349 
	#__COPYRIGHT
(
s
Ë
__hack


	)

353 #i‚def 
__DECONST


354 
	#__DECONST
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(c⁄° *)(v¨))

	)

357 #i‚def 
__DEVOLATILE


358 
	#__DEVOLATILE
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(vﬁ©ûê*)(v¨))

	)

361 #i‚def 
__DEQUALIFY


362 
	#__DEQUALIFY
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(c⁄° vﬁ©ûê*)(v¨))

	)

388 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1

389 #unde‡
_POSIX_C_SOURCE


390 
	#_POSIX_C_SOURCE
 199009

	)

394 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2

395 #unde‡
_POSIX_C_SOURCE


396 
	#_POSIX_C_SOURCE
 199209

	)

400 #ifde‡
_XOPEN_SOURCE


401 #i‡
_XOPEN_SOURCE
 - 0 >= 600

402 
	#__XSI_VISIBLE
 600

	)

403 #unde‡
_POSIX_C_SOURCE


404 
	#_POSIX_C_SOURCE
 200112

	)

405 #ñi‡
_XOPEN_SOURCE
 - 0 >= 500

406 
	#__XSI_VISIBLE
 500

	)

407 #unde‡
_POSIX_C_SOURCE


408 
	#_POSIX_C_SOURCE
 199506

	)

416 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

417 
	#_POSIX_C_SOURCE
 198808

	)

419 #ifde‡
_POSIX_C_SOURCE


420 #i‡
_POSIX_C_SOURCE
 >= 200112

421 
	#__POSIX_VISIBLE
 200112

	)

422 
	#__ISO_C_VISIBLE
 1999

	)

423 #ñi‡
_POSIX_C_SOURCE
 >= 199506

424 
	#__POSIX_VISIBLE
 199506

	)

425 
	#__ISO_C_VISIBLE
 1990

	)

426 #ñi‡
_POSIX_C_SOURCE
 >= 199309

427 
	#__POSIX_VISIBLE
 199309

	)

428 
	#__ISO_C_VISIBLE
 1990

	)

429 #ñi‡
_POSIX_C_SOURCE
 >= 199209

430 
	#__POSIX_VISIBLE
 199209

	)

431 
	#__ISO_C_VISIBLE
 1990

	)

432 #ñi‡
_POSIX_C_SOURCE
 >= 199009

433 
	#__POSIX_VISIBLE
 199009

	)

434 
	#__ISO_C_VISIBLE
 1990

	)

436 
	#__POSIX_VISIBLE
 198808

	)

437 
	#__ISO_C_VISIBLE
 0

	)

452 #i‡
deföed
(
_ANSI_SOURCE
)

453 
	#__POSIX_VISIBLE
 0

	)

454 
	#__XSI_VISIBLE
 0

	)

455 
	#__BSD_VISIBLE
 0

	)

456 
	#__ISO_C_VISIBLE
 1990

	)

457 #ñi‡
deföed
(
_C99_SOURCE
)

458 
	#__POSIX_VISIBLE
 0

	)

459 
	#__XSI_VISIBLE
 0

	)

460 
	#__BSD_VISIBLE
 0

	)

461 
	#__ISO_C_VISIBLE
 1999

	)

463 
	#__POSIX_VISIBLE
 200112

	)

464 
	#__XSI_VISIBLE
 600

	)

465 
	#__BSD_VISIBLE
 1

	)

466 
	#__ISO_C_VISIBLE
 1999

	)

	@/usr/include/sys/select.h

32 #i‚de‡
_SYS_SELECT_H_


33 
	#_SYS_SELECT_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<sys/_ty≥s.h
>

38 
	~<sys/_sig£t.h
>

39 
	~<sys/_timevÆ.h
>

40 
	~<sys/time•ec.h
>

42 
	t__fd_mask
;

43 #i‡
__BSD_VISIBLE


44 
__fd_mask
 
	tfd_mask
;

47 #i‚de‡
_SIGSET_T_DECLARED


48 
	#_SIGSET_T_DECLARED


	)

49 
__sig£t_t
 
	tsig£t_t
;

58 #i‚def 
FD_SETSIZE


59 
	#FD_SETSIZE
 1024U

	)

62 
	#_NFDBITS
 ((
__fd_mask
Ë* 8Ë

	)

63 #i‡
__BSD_VISIBLE


64 
	#NFDBITS
 
_NFDBITS


	)

67 #i‚de‡
_howm™y


68 
	#_howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

71 
	sfd_£t
 {

72 
__fd_mask
 
	m__fds_bôs
[
_howm™y
(
FD_SETSIZE
, 
_NFDBITS
)];

73 } 
	tfd_£t
;

74 #i‡
__BSD_VISIBLE


75 
	#fds_bôs
 
__fds_bôs


	)

78 
	#__fd£t_mask
(
n
Ë((
__fd_mask
)1 << (“Ë% 
_NFDBITS
))

	)

79 
	#FD_CLR
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] &~
	`__fd£t_mask
“))

	)

80 #i‡
__BSD_VISIBLE


81 
	#FD_COPY
(
f
, 
t
Ë()(*—Ë*(f))

	)

83 
	#FD_ISSET
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] & 
	`__fd£t_mask
“))

	)

84 
	#FD_SET
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] |
	`__fd£t_mask
“))

	)

85 
	#FD_ZERO
(
p
) do { \

86 
fd_£t
 *
_p
; \

87 
__size_t
 
_n
; \

89 
_p
 = (
p
); \

90 
_n
 = 
	`_howm™y
(
FD_SETSIZE
, 
_NFDBITS
); \

91 
_n
 > 0) \

92 
_p
->
__fds_bôs
[--
_n
] = 0; \

93 } 0)

	)

95 #i‚de‡
_KERNEL


97 
__BEGIN_DECLS


98 
p£À˘
(, 
fd_£t
 *
__ª°ri˘
, fd_set *__restrict, fd_set *__restrict,

99 c⁄° 
time•ec
 *
__ª°ri˘
, c⁄° 
sig£t_t
 *__restrict);

100 #i‚de‡
_SELECT_DECLARED


101 
	#_SELECT_DECLARED


	)

103 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

105 
	g__END_DECLS


	@/usr/include/sys/socket.h

33 #i‚de‡
_SYS_SOCKET_H_


34 
	#_SYS_SOCKET_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<sys/_iovec.h
>

39 
	#_NO_NAMESPACE_POLLUTION


	)

40 
	~<machöe/∑øm.h
>

41 #unde‡
_NO_NAMESPACE_POLLUTION


50 #i‡
__BSD_VISIBLE


51 #i‚de‡
_GID_T_DECLARED


52 
__gid_t
 
	tgid_t
;

53 
	#_GID_T_DECLARED


	)

56 #i‚de‡
_OFF_T_DECLARED


57 
__off_t
 
	toff_t
;

58 
	#_OFF_T_DECLARED


	)

61 #i‚de‡
_PID_T_DECLARED


62 
__pid_t
 
	tpid_t
;

63 
	#_PID_T_DECLARED


	)

67 #i‚de‡
_SA_FAMILY_T_DECLARED


68 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

69 
	#_SA_FAMILY_T_DECLARED


	)

72 #i‚de‡
_SOCKLEN_T_DECLARED


73 
__sockÀn_t
 
	tsockÀn_t
;

74 
	#_SOCKLEN_T_DECLARED


	)

77 #i‚de‡
_SSIZE_T_DECLARED


78 
__ssize_t
 
	tssize_t
;

79 
	#_SSIZE_T_DECLARED


	)

82 #i‡
__BSD_VISIBLE


83 #i‚de‡
_UID_T_DECLARED


84 
__uid_t
 
	tuid_t
;

85 
	#_UID_T_DECLARED


	)

92 
	#SOCK_STREAM
 1

	)

93 
	#SOCK_DGRAM
 2

	)

94 
	#SOCK_RAW
 3

	)

95 #i‡
__BSD_VISIBLE


96 
	#SOCK_RDM
 4

	)

98 
	#SOCK_SEQPACKET
 5

	)

103 
	#SO_DEBUG
 0x0001

	)

104 
	#SO_ACCEPTCONN
 0x0002

	)

105 
	#SO_REUSEADDR
 0x0004

	)

106 
	#SO_KEEPALIVE
 0x0008

	)

107 
	#SO_DONTROUTE
 0x0010

	)

108 
	#SO_BROADCAST
 0x0020

	)

109 #i‡
__BSD_VISIBLE


110 
	#SO_USELOOPBACK
 0x0040

	)

112 
	#SO_LINGER
 0x0080

	)

113 
	#SO_OOBINLINE
 0x0100

	)

114 #i‡
__BSD_VISIBLE


115 
	#SO_REUSEPORT
 0x0200

	)

116 
	#SO_TIMESTAMP
 0x0400

	)

117 
	#SO_NOSIGPIPE
 0x0800

	)

118 
	#SO_ACCEPTFILTER
 0x1000

	)

119 
	#SO_BINTIME
 0x2000

	)

125 
	#SO_SNDBUF
 0x1001

	)

126 
	#SO_RCVBUF
 0x1002

	)

127 
	#SO_SNDLOWAT
 0x1003

	)

128 
	#SO_RCVLOWAT
 0x1004

	)

129 
	#SO_SNDTIMEO
 0x1005

	)

130 
	#SO_RCVTIMEO
 0x1006

	)

131 
	#SO_ERROR
 0x1007

	)

132 
	#SO_TYPE
 0x1008

	)

133 #i‡
__BSD_VISIBLE


134 
	#SO_LABEL
 0x1009

	)

135 
	#SO_PEERLABEL
 0x1010

	)

141 
	slögî
 {

142 
	ml_⁄off
;

143 
	ml_lögî
;

146 #i‡
__BSD_VISIBLE


147 
	sac˚±_fûãr_¨g
 {

148 
	maf_«me
[16];

149 
	maf_¨g
[256-16];

156 
	#SOL_SOCKET
 0xfff‡

	)

161 
	#AF_UNSPEC
 0

	)

162 #i‡
__BSD_VISIBLE


163 
	#AF_LOCAL
 
AF_UNIX


	)

165 
	#AF_UNIX
 1

	)

166 
	#AF_INET
 2

	)

167 #i‡
__BSD_VISIBLE


168 
	#AF_IMPLINK
 3

	)

169 
	#AF_PUP
 4

	)

170 
	#AF_CHAOS
 5

	)

171 
	#AF_NETBIOS
 6

	)

172 
	#AF_ISO
 7

	)

173 
	#AF_OSI
 
AF_ISO


	)

174 
	#AF_ECMA
 8

	)

175 
	#AF_DATAKIT
 9

	)

176 
	#AF_CCITT
 10

	)

177 
	#AF_SNA
 11

	)

178 
	#AF_DEC√t
 12

	)

179 
	#AF_DLI
 13

	)

180 
	#AF_LAT
 14

	)

181 
	#AF_HYLINK
 15

	)

182 
	#AF_APPLETALK
 16

	)

183 
	#AF_ROUTE
 17

	)

184 
	#AF_LINK
 18

	)

185 
	#p£udo_AF_XTP
 19

	)

186 
	#AF_COIP
 20

	)

187 
	#AF_CNT
 21

	)

188 
	#p£udo_AF_RTIP
 22

	)

189 
	#AF_IPX
 23

	)

190 
	#AF_SIP
 24

	)

191 
	#p£udo_AF_PIP
 25

	)

192 
	#AF_ISDN
 26

	)

193 
	#AF_E164
 
AF_ISDN


	)

194 
	#p£udo_AF_KEY
 27

	)

196 
	#AF_INET6
 28

	)

197 #i‡
__BSD_VISIBLE


198 
	#AF_NATM
 29

	)

199 
	#AF_ATM
 30

	)

200 
	#p£udo_AF_HDRCMPLT
 31

	)

203 
	#AF_NETGRAPH
 32

	)

204 
	#AF_SLOW
 33

	)

205 
	#AF_SCLUSTER
 34

	)

206 
	#AF_ARP
 35

	)

207 
	#AF_BLUETOOTH
 36

	)

208 
	#AF_MAX
 37

	)

215 
	ssockaddr
 {

216 
	mß_Àn
;

217 
ß_Ámûy_t
 
	mß_Ámûy
;

218 
	mß_d©a
[14];

220 #i‡
__BSD_VISIBLE


221 
	#SOCK_MAXADDRLEN
 255

	)

227 
	ssock¥Ÿo
 {

228 
	m•_Ámûy
;

229 
	m•_¥Ÿocﬁ
;

236 
	#_SS_MAXSIZE
 128U

	)

237 
	#_SS_ALIGNSIZE
 ((
__öt64_t
))

	)

238 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - () - \

239 (
ß_Ámûy_t
))

	)

240 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - () - \

241 (
ß_Ámûy_t
Ë- 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

243 
	ssockaddr_°‹age
 {

244 
	mss_Àn
;

245 
ß_Ámûy_t
 
	mss_Ámûy
;

246 
	m__ss_∑d1
[
_SS_PAD1SIZE
];

247 
__öt64_t
 
	m__ss_Æign
;

248 
	m__ss_∑d2
[
_SS_PAD2SIZE
];

251 #i‡
__BSD_VISIBLE


255 
	#PF_UNSPEC
 
AF_UNSPEC


	)

256 
	#PF_LOCAL
 
AF_LOCAL


	)

257 
	#PF_UNIX
 
PF_LOCAL


	)

258 
	#PF_INET
 
AF_INET


	)

259 
	#PF_IMPLINK
 
AF_IMPLINK


	)

260 
	#PF_PUP
 
AF_PUP


	)

261 
	#PF_CHAOS
 
AF_CHAOS


	)

262 
	#PF_NETBIOS
 
AF_NETBIOS


	)

263 
	#PF_ISO
 
AF_ISO


	)

264 
	#PF_OSI
 
AF_ISO


	)

265 
	#PF_ECMA
 
AF_ECMA


	)

266 
	#PF_DATAKIT
 
AF_DATAKIT


	)

267 
	#PF_CCITT
 
AF_CCITT


	)

268 
	#PF_SNA
 
AF_SNA


	)

269 
	#PF_DEC√t
 
AF_DEC√t


	)

270 
	#PF_DLI
 
AF_DLI


	)

271 
	#PF_LAT
 
AF_LAT


	)

272 
	#PF_HYLINK
 
AF_HYLINK


	)

273 
	#PF_APPLETALK
 
AF_APPLETALK


	)

274 
	#PF_ROUTE
 
AF_ROUTE


	)

275 
	#PF_LINK
 
AF_LINK


	)

276 
	#PF_XTP
 
p£udo_AF_XTP


	)

277 
	#PF_COIP
 
AF_COIP


	)

278 
	#PF_CNT
 
AF_CNT


	)

279 
	#PF_SIP
 
AF_SIP


	)

280 
	#PF_IPX
 
AF_IPX


	)

281 
	#PF_RTIP
 
p£udo_AF_RTIP


	)

282 
	#PF_PIP
 
p£udo_AF_PIP


	)

283 
	#PF_ISDN
 
AF_ISDN


	)

284 
	#PF_KEY
 
p£udo_AF_KEY


	)

285 
	#PF_INET6
 
AF_INET6


	)

286 
	#PF_NATM
 
AF_NATM


	)

287 
	#PF_ATM
 
AF_ATM


	)

288 
	#PF_NETGRAPH
 
AF_NETGRAPH


	)

289 
	#PF_SLOW
 
AF_SLOW


	)

290 
	#PF_SCLUSTER
 
AF_SCLUSTER


	)

291 
	#PF_ARP
 
AF_ARP


	)

292 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

294 
	#PF_MAX
 
AF_MAX


	)

304 
	#NET_MAXID
 
AF_MAX


	)

306 
	#CTL_NET_NAMES
 { \

308 { "unix", 
CTLTYPE_NODE
 }, \

309 { "öë", 
CTLTYPE_NODE
 }, \

310 { "im∂ök", 
CTLTYPE_NODE
 }, \

311 { "pup", 
CTLTYPE_NODE
 }, \

312 { "chaos", 
CTLTYPE_NODE
 }, \

313 { "xîox_ns", 
CTLTYPE_NODE
 }, \

314 { "iso", 
CTLTYPE_NODE
 }, \

315 { "emˇ", 
CTLTYPE_NODE
 }, \

316 { "d©akô", 
CTLTYPE_NODE
 }, \

317 { "ccôt", 
CTLTYPE_NODE
 }, \

318 { "ibm_¢a", 
CTLTYPE_NODE
 }, \

319 { "de˙ë", 
CTLTYPE_NODE
 }, \

320 { "dec_dli", 
CTLTYPE_NODE
 }, \

321 { "œt", 
CTLTYPE_NODE
 }, \

322 { "hylök", 
CTLTYPE_NODE
 }, \

323 { "≠∂ëÆk", 
CTLTYPE_NODE
 }, \

324 { "rouã", 
CTLTYPE_NODE
 }, \

325 { "lök_œyî", 
CTLTYPE_NODE
 }, \

326 { "xç", 
CTLTYPE_NODE
 }, \

327 { "coù", 
CTLTYPE_NODE
 }, \

328 { "˙t", 
CTLTYPE_NODE
 }, \

329 { "πù", 
CTLTYPE_NODE
 }, \

330 { "ùx", 
CTLTYPE_NODE
 }, \

331 { "sù", 
CTLTYPE_NODE
 }, \

332 { "pù", 
CTLTYPE_NODE
 }, \

333 { "isdn", 
CTLTYPE_NODE
 }, \

334 { "key", 
CTLTYPE_NODE
 }, \

335 { "öë6", 
CTLTYPE_NODE
 }, \

336 { "«tm", 
CTLTYPE_NODE
 }, \

337 { "©m", 
CTLTYPE_NODE
 }, \

338 { "hdrcom∂ëe", 
CTLTYPE_NODE
 }, \

339 { "√tgøph", 
CTLTYPE_NODE
 }, \

340 { "¢p", 
CTLTYPE_NODE
 }, \

341 { "s˝", 
CTLTYPE_NODE
 }, \

342 }

	)

352 
	#NET_RT_DUMP
 1

	)

353 
	#NET_RT_FLAGS
 2

	)

354 
	#NET_RT_IFLIST
 3

	)

355 
	#NET_RT_IFMALIST
 4

	)

356 
	#NET_RT_MAXID
 5

	)

358 
	#CTL_NET_RT_NAMES
 { \

360 { "dump", 
CTLTYPE_STRUCT
 }, \

361 { "Êags", 
CTLTYPE_STRUCT
 }, \

362 { "iÊi°", 
CTLTYPE_STRUCT
 }, \

363 { "ifmÆi°", 
CTLTYPE_STRUCT
 }, \

364 }

	)

370 
	#SOMAXCONN
 128

	)

376 
	smsghdr
 {

377 *
	mmsg_«me
;

378 
sockÀn_t
 
	mmsg_«mñí
;

379 
iovec
 *
	mmsg_iov
;

380 
	mmsg_iovÀn
;

381 *
	mmsg_c⁄åﬁ
;

382 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

383 
	mmsg_Êags
;

386 
	#MSG_OOB
 0x1

	)

387 
	#MSG_PEEK
 0x2

	)

388 
	#MSG_DONTROUTE
 0x4

	)

389 
	#MSG_EOR
 0x8

	)

390 
	#MSG_TRUNC
 0x10

	)

391 
	#MSG_CTRUNC
 0x20

	)

392 
	#MSG_WAITALL
 0x40

	)

393 #i‡
__BSD_VISIBLE


394 
	#MSG_DONTWAIT
 0x80

	)

395 
	#MSG_EOF
 0x100

	)

396 
	#MSG_NBIO
 0x4000

	)

397 
	#MSG_COMPAT
 0x8000

	)

406 
	scmsghdr
 {

407 
sockÀn_t
 
	mcmsg_Àn
;

408 
	mcmsg_Àvñ
;

409 
	mcmsg_ty≥
;

413 #i‡
__BSD_VISIBLE


419 
	#CMGROUP_MAX
 16

	)

428 
	scmsg¸ed
 {

429 
pid_t
 
	mcm¸ed_pid
;

430 
uid_t
 
	mcm¸ed_uid
;

431 
uid_t
 
	mcm¸ed_euid
;

432 
gid_t
 
	mcm¸ed_gid
;

433 
	mcm¸ed_ngroups
;

434 
gid_t
 
	mcm¸ed_groups
[
CMGROUP_MAX
];

439 
	#CMSG_DATA
(
cmsg
) ((*)(cmsg) + \

440 
	`_ALIGN
((
cmsghdr
)))

	)

443 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
) \

444 (((*)(
cmsg
Ë+ 
	`_ALIGN
((cmsg)->
cmsg_Àn
) + \

445 
	`_ALIGN
((
cmsghdr
)) > \

446 (*)(
mhdr
)->
msg_c⁄åﬁ
 + (mhdr)->
msg_c⁄åﬁÀn
) ? \

447 (
cmsghdr
 *)0 : \

448 (
cmsghdr
 *)((*)(
cmsg
Ë+ 
	`_ALIGN
((cmsg)->
cmsg_Àn
)))

	)

454 
	#CMSG_FIRSTHDR
(
mhdr
) \

455 ((
mhdr
)->
msg_c⁄åﬁÀn
 >(
cmsghdr
) ? \

456 (
cmsghdr
 *)(
mhdr
)->
msg_c⁄åﬁ
 : \

457 (
cmsghdr
 *)
NULL
)

	)

459 #i‡
__BSD_VISIBLE


461 
	#CMSG_SPACE
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ _ALIGN÷))

	)

462 
	#CMSG_LEN
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ (l))

	)

465 #ifde‡
_KERNEL


466 
	#CMSG_ALIGN
(
n
Ë
	`_ALIGN
“)

	)

470 
	#SCM_RIGHTS
 0x01

	)

471 #i‡
__BSD_VISIBLE


472 
	#SCM_TIMESTAMP
 0x02

	)

473 
	#SCM_CREDS
 0x03

	)

474 
	#SCM_BINTIME
 0x04

	)

477 #i‡
__BSD_VISIBLE


481 
	sosockaddr
 {

482 
	mß_Ámûy
;

483 
	mß_d©a
[14];

489 
	somsghdr
 {

490 *
	mmsg_«me
;

491 
	mmsg_«mñí
;

492 
iovec
 *
	mmsg_iov
;

493 
	mmsg_iovÀn
;

494 *
	mmsg_ac¸ights
;

495 
	mmsg_ac¸ight¶í
;

502 
	#SHUT_RD
 0

	)

503 
	#SHUT_WR
 1

	)

504 
	#SHUT_RDWR
 2

	)

506 #i‡
__BSD_VISIBLE


510 
	ssf_hdå
 {

511 
iovec
 *
	mhódîs
;

512 
	mhdr_˙t
;

513 
iovec
 *
	måaûîs
;

514 
	mål_˙t
;

520 
	#SF_NODISKIO
 0x00000001

	)

523 #i‚def 
_KERNEL


525 
	~<sys/cdefs.h
>

527 
__BEGIN_DECLS


528 
ac˚±
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

529 
böd
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

530 
c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

531 
gë≥î«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

532 
gësock«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

533 
gësock›t
(, , , * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

534 
li°í
(, );

535 
ssize_t
 
ªcv
(, *, 
size_t
, );

536 
ssize_t
 
ªcv‰om
(, *, 
size_t
, , 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

537 
ssize_t
 
ªcvmsg
(, 
msghdr
 *, );

538 
ssize_t
 
£nd
(, c⁄° *, 
size_t
, );

539 
ssize_t
 
£ndto
(, const *,

540 
size_t
, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

541 
ssize_t
 
£ndmsg
(, c⁄° 
msghdr
 *, );

542 #i‡
__BSD_VISIBLE


543 
£ndfûe
(, , 
off_t
, 
size_t
, 
sf_hdå
 *, off_t *, );

545 
£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

546 
shutdown
(, );

547 
sock©m¨k
();

548 
sockë
(, , );

549 
sockë∑ú
(, , , *);

550 
	g__END_DECLS


	@/usr/include/sys/types.h

38 #i‚de‡
_SYS_TYPES_H_


39 
	#_SYS_TYPES_H_


	)

41 
	~<sys/cdefs.h
>

44 
	~<machöe/ídün.h
>

45 
	~<sys/_ty≥s.h
>

47 #i‡
__BSD_VISIBLE


48 
	tu_ch¨
;

49 
	tu_sh‹t
;

50 
	tu_öt
;

51 
	tu_l⁄g
;

52 #i‚de‡
_KERNEL


53 
	tush‹t
;

54 
	tuöt
;

61 #i‚de‡
_INT8_T_DECLARED


62 
__öt8_t
 
	töt8_t
;

63 
	#_INT8_T_DECLARED


	)

66 #i‚de‡
_INT16_T_DECLARED


67 
__öt16_t
 
	töt16_t
;

68 
	#_INT16_T_DECLARED


	)

71 #i‚de‡
_INT32_T_DECLARED


72 
__öt32_t
 
	töt32_t
;

73 
	#_INT32_T_DECLARED


	)

76 #i‚de‡
_INT64_T_DECLARED


77 
__öt64_t
 
	töt64_t
;

78 
	#_INT64_T_DECLARED


	)

81 #i‚de‡
_UINT8_T_DECLARED


82 
__uöt8_t
 
	tuöt8_t
;

83 
	#_UINT8_T_DECLARED


	)

86 #i‚de‡
_UINT16_T_DECLARED


87 
__uöt16_t
 
	tuöt16_t
;

88 
	#_UINT16_T_DECLARED


	)

91 #i‚de‡
_UINT32_T_DECLARED


92 
__uöt32_t
 
	tuöt32_t
;

93 
	#_UINT32_T_DECLARED


	)

96 #i‚de‡
_UINT64_T_DECLARED


97 
__uöt64_t
 
	tuöt64_t
;

98 
	#_UINT64_T_DECLARED


	)

101 #i‚de‡
_INTPTR_T_DECLARED


102 
__öçå_t
 
	töçå_t
;

103 
__uöçå_t
 
	tuöçå_t
;

104 
	#_INTPTR_T_DECLARED


	)

107 
__uöt8_t
 
	tu_öt8_t
;

108 
__uöt16_t
 
	tu_öt16_t
;

109 
__uöt32_t
 
	tu_öt32_t
;

110 
__uöt64_t
 
	tu_öt64_t
;

112 
__uöt64_t
 
	tu_quad_t
;

113 
__öt64_t
 
	tquad_t
;

114 
quad_t
 * 
	tqaddr_t
;

116 * 
	tˇddr_t
;

117 
__c⁄°
 * 
	tc_ˇddr_t
;

118 
__vﬁ©ûe
 *
	tv_ˇddr_t
;

120 #i‚de‡
_CLOCK_T_DECLARED


121 
__˛ock_t
 
	t˛ock_t
;

122 
	#_CLOCK_T_DECLARED


	)

125 #i‚de‡
_CLOCKID_T_DECLARED


126 
__˛ockid_t
 
	t˛ockid_t
;

127 
	#_CLOCKID_T_DECLARED


	)

130 
__¸ôiˇl_t
 
	t¸ôiˇl_t
;

131 
__öt64_t
 
	tdaddr_t
;

133 #i‚de‡
_DEV_T_DECLARED


134 
__dev_t
 
	tdev_t
;

135 
	#_DEV_T_DECLARED


	)

138 #i‚de‡
_FFLAGS_T_DECLARED


139 
__fÊags_t
 
	tfÊags_t
;

140 
	#_FFLAGS_T_DECLARED


	)

143 
__fix±_t
 
	tfix±_t
;

145 #i‚de‡
_FSBLKCNT_T_DECLARED


146 
__fsblk˙t_t
 
	tfsblk˙t_t
;

147 
__fsfû˙t_t
 
	tfsfû˙t_t
;

148 
	#_FSBLKCNT_T_DECLARED


	)

151 #i‚de‡
_GID_T_DECLARED


152 
__gid_t
 
	tgid_t
;

153 
	#_GID_T_DECLARED


	)

156 #i‚de‡
_IN_ADDR_T_DECLARED


157 
__uöt32_t
 
	tö_addr_t
;

158 
	#_IN_ADDR_T_DECLARED


	)

161 #i‚de‡
_IN_PORT_T_DECLARED


162 
__uöt16_t
 
	tö_p‹t_t
;

163 
	#_IN_PORT_T_DECLARED


	)

166 #i‚de‡
_ID_T_DECLARED


167 
__id_t
 
	tid_t
;

168 
	#_ID_T_DECLARED


	)

171 #i‚de‡
_INO_T_DECLARED


172 
__öo_t
 
	töo_t
;

173 
	#_INO_T_DECLARED


	)

176 #i‚de‡
_KEY_T_DECLARED


177 
__key_t
 
	tkey_t
;

178 
	#_KEY_T_DECLARED


	)

181 #i‚de‡
_LWPID_T_DECLARED


182 
__lwpid_t
 
	tlwpid_t
;

183 
	#_LWPID_T_DECLARED


	)

186 #i‚de‡
_MODE_T_DECLARED


187 
__mode_t
 
	tmode_t
;

188 
	#_MODE_T_DECLARED


	)

191 #i‚de‡
_NLINK_T_DECLARED


192 
__∆ök_t
 
	t∆ök_t
;

193 
	#_NLINK_T_DECLARED


	)

196 #i‚de‡
_OFF_T_DECLARED


197 
__off_t
 
	toff_t
;

198 
	#_OFF_T_DECLARED


	)

201 #i‚de‡
_PID_T_DECLARED


202 
__pid_t
 
	tpid_t
;

203 
	#_PID_T_DECLARED


	)

206 
__ªgi°î_t
 
	tªgi°î_t
;

208 #i‚de‡
_RLIM_T_DECLARED


209 
__æim_t
 
	tæim_t
;

210 
	#_RLIM_T_DECLARED


	)

213 
__£gsz_t
 
	t£gsz_t
;

215 #i‚de‡
_SIZE_T_DECLARED


216 
__size_t
 
	tsize_t
;

217 
	#_SIZE_T_DECLARED


	)

220 #i‚de‡
_SSIZE_T_DECLARED


221 
__ssize_t
 
	tssize_t
;

222 
	#_SSIZE_T_DECLARED


	)

225 #i‚de‡
_SUSECONDS_T_DECLARED


226 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

227 
	#_SUSECONDS_T_DECLARED


	)

230 #i‚de‡
_TIME_T_DECLARED


231 
__time_t
 
	ttime_t
;

232 
	#_TIME_T_DECLARED


	)

235 #i‚de‡
_TIMER_T_DECLARED


236 
__timî_t
 
	ttimî_t
;

237 
	#_TIMER_T_DECLARED


	)

240 
__u_ªgi°î_t
 
	tu_ªgi°î_t
;

242 #i‚de‡
_UID_T_DECLARED


243 
__uid_t
 
	tuid_t
;

244 
	#_UID_T_DECLARED


	)

247 #i‚de‡
_USECONDS_T_DECLARED


248 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

249 
	#_USECONDS_T_DECLARED


	)

252 
__vm_off£t_t
 
	tvm_off£t_t
;

253 
__vm_ooff£t_t
 
	tvm_ooff£t_t
;

254 
__vm_∑ddr_t
 
	tvm_∑ddr_t
;

255 
__vm_pödex_t
 
	tvm_pödex_t
;

256 
__vm_size_t
 
	tvm_size_t
;

258 #ifde‡
_KERNEL


259 
	tboﬁón_t
;

260 
__˝umask_t
 
	t˝umask_t
;

261 
__ötÂå_t
 
	tötÂå_t
;

271 
__uöt32_t
 
	töåmask_t
;

273 
__uötÂå_t
 
	tuötÂå_t
;

274 
__uöt64_t
 
	tuoff_t
;

275 
vm_∑ge
 *
	tvm_∑ge_t
;

277 
	#off£tof
(
ty≥
, 
fõld
Ë
	`__off£tof
—y≥, fõld)

	)

285 #i‡
__BSD_VISIBLE


287 
	~<sys/£À˘.h
>

289 #i‚de‡
_KERNEL


295 
	#maj‹
(
x
Ë(()(((
u_öt
)(xË>> 8)&0xff)Ë

	)

296 
	#mö‹
(
x
Ë(()((x)&0xffff00ff)Ë

	)

299 
	#makedev
(
x
,
y
Ë((
dev_t
)(((xË<< 8Ë| (y))Ë

	)

306 #i‚de‡
_KERNEL


307 
	g__BEGIN_DECLS


308 #i‚de‡
_FTRUNCATE_DECLARED


309 
	#_FTRUNCATE_DECLARED


	)

310 
·runˇã
(, 
off_t
);

312 #i‚de‡
_LSEEK_DECLARED


313 
	#_LSEEK_DECLARED


	)

314 
off_t
 
l£ek
(, off_t, );

316 #i‚de‡
_MMAP_DECLARED


317 
	#_MMAP_DECLARED


	)

318 * 
mm≠
(*, 
size_t
, , , , 
off_t
);

320 #i‚de‡
_TRUNCATE_DECLARED


321 
	#_TRUNCATE_DECLARED


	)

322 
åunˇã
(c⁄° *, 
off_t
);

324 
	g__END_DECLS


	@/usr/include/sys/un.h

33 #i‚de‡
_SYS_UN_H_


34 
	#_SYS_UN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

39 #i‚de‡
_SA_FAMILY_T_DECLARED


40 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

41 
	#_SA_FAMILY_T_DECLARED


	)

47 
	ssockaddr_un
 {

48 
	msun_Àn
;

49 
ß_Ámûy_t
 
	msun_Ámûy
;

50 
	msun_∑th
[104];

53 #i‡
__BSD_VISIBLE


56 
	#LOCAL_PEERCRED
 0x001

	)

58 #ifde‡
_KERNEL


59 
	gmbuf
;

60 
	gsockë
;

61 
	gsock›t
;

63 
uùc_c⁄√˘2
(
sockë
 *
so1
, sockë *
so2
);

64 
uùc_˘louçut
(
sockë
 *
so
, 
sock›t
 *
s›t
);

65 
uùc_u§ªq
(
sockë
 *
so
, 
ªq
, 
mbuf
 *
m
,

66 
mbuf
 *
«m
, mbu‡*
c⁄åﬁ
);

67 
u≈_di•o£
(
mbuf
 *
m
);

68 
u≈_exã∫Æize
(
mbuf
 *mbuf, mbu‡**
c⁄åﬁp
);

69 
u≈_öô
();

70 
¥_u§ªqs
 
uùc_u§ªqs
;

75 
	#SUN_LEN
(
su
) \

76 ((*(
su
)Ë- ((su)->
sun_∑th
Ë+ 
	`°æí
((su)->sun_∑th))

	)

	@/usr/include/sys/wait.h

33 #i‚de‡
_SYS_WAIT_H_


34 
	#_SYS_WAIT_H_


	)

36 
	~<sys/cdefs.h
>

47 #i‡
__BSD_VISIBLE


48 
	#_W_INT
(
w
Ë(*(*)&(w)Ë

	)

49 
	#WCOREFLAG
 0200

	)

51 
	#_W_INT
(
i
Ë(i)

	)

54 
	#_WSTATUS
(
x
Ë(
	`_W_INT
(xË& 0177)

	)

55 
	#_WSTOPPED
 0177

	)

56 
	#WIFSTOPPED
(
x
Ë(
	`_WSTATUS
(xË=
_WSTOPPED
)

	)

57 
	#WSTOPSIG
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

58 
	#WIFSIGNALED
(
x
Ë(
	`_WSTATUS
(xË!
_WSTOPPED
 && _WSTATUS(xË!0)

	)

59 
	#WTERMSIG
(
x
Ë(
	`_WSTATUS
(x))

	)

60 
	#WIFEXITED
(
x
Ë(
	`_WSTATUS
(xË=0)

	)

61 
	#WEXITSTATUS
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

62 
	#WIFCONTINUED
(
x
Ë(x =0x13Ë

	)

63 #i‡
__BSD_VISIBLE


64 
	#WCOREDUMP
(
x
Ë(
	`_W_INT
(xË& 
WCOREFLAG
)

	)

66 
	#W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

67 
	#W_STOPCODE
(
sig
Ë((sigË<< 8 | 
_WSTOPPED
)

	)

79 
	#WNOHANG
 1

	)

80 
	#WUNTRACED
 2

	)

81 
	#WCONTINUED
 4

	)

83 #i‡
__BSD_VISIBLE


84 
	#WLINUXCLONE
 0x80000000

	)

90 #i‡
__BSD_VISIBLE


91 
	#WAIT_ANY
 (-1Ë

	)

92 
	#WAIT_MYPGRP
 0

	)

95 #ifde‡
_KERNEL


96 
	grußge
;

97 
kîn_waô
(
thªad
 *
td
, 
pid_t
 
pid
, *
°©us
, 
›ti⁄s
,

98 
rußge
 *
rup
);

100 
	~<sys/ty≥s.h
>

102 
__BEGIN_DECLS


103 
pid_t
 
waô
(*);

104 
pid_t
 
waôpid
(pid_t, *, );

105 #i‡
__BSD_VISIBLE


106 
	grußge
;

107 
pid_t
 
waô3
(*, , 
rußge
 *);

108 
pid_t
 
waô4
’id_t, *, , 
rußge
 *);

110 
	g__END_DECLS


	@/usr/include/time.h

45 #i‚de‡
_TIME_H_


46 
	#_TIME_H_


	)

48 
	~<sys/cdefs.h
>

49 
	~<sys/_nuŒ.h
>

50 
	~<sys/_ty≥s.h
>

52 #i‡
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE < 200112 || 
__BSD_VISIBLE


57 
	#CLK_TCK
 128

	)

61 
	#CLOCKS_PER_SEC
 128

	)

63 #i‚de‡
_CLOCK_T_DECLARED


64 
__˛ock_t
 
	t˛ock_t
;

65 
	#_CLOCK_T_DECLARED


	)

68 #i‚de‡
_TIME_T_DECLARED


69 
__time_t
 
	ttime_t
;

70 
	#_TIME_T_DECLARED


	)

73 #i‚de‡
_SIZE_T_DECLARED


74 
__size_t
 
	tsize_t
;

75 
	#_SIZE_T_DECLARED


	)

78 #i‡
__POSIX_VISIBLE
 >= 199309

82 #i‚de‡
_CLOCKID_T_DECLARED


83 
__˛ockid_t
 
	t˛ockid_t
;

84 
	#_CLOCKID_T_DECLARED


	)

87 #i‚de‡
_TIMER_T_DECLARED


88 
__timî_t
 
	ttimî_t
;

89 
	#_TIMER_T_DECLARED


	)

92 
	~<sys/time•ec.h
>

95 
	stm
 {

96 
	mtm_£c
;

97 
	mtm_mö
;

98 
	mtm_hour
;

99 
	mtm_mday
;

100 
	mtm_m⁄
;

101 
	mtm_yór
;

102 
	mtm_wday
;

103 
	mtm_yday
;

104 
	mtm_isd°
;

105 
	mtm_gmtoff
;

106 *
	mtm_z⁄e
;

109 #i‡
__POSIX_VISIBLE


110 *
tz«me
[];

113 
__BEGIN_DECLS


114 *
as˘ime
(c⁄° 
tm
 *);

115 
˛ock_t
 
˛ock
();

116 *
˘ime
(c⁄° 
time_t
 *);

117 
dif·ime
(
time_t
,Åime_t);

118 
tm
 *
gmtime
(c⁄° 
time_t
 *);

119 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

120 
time_t
 
mktime
(
tm
 *);

121 
size_t
 
°r·ime
(* 
__ª°ri˘
, size_t, const * __restrict,

122 c⁄° 
tm
 * 
__ª°ri˘
);

123 
time_t
 
time
(time_t *);

125 #i‡
__POSIX_VISIBLE


126 
tz£t
();

129 #i‡
__POSIX_VISIBLE
 >= 199309

130 
˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

131 
˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

132 
˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

133 
«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

136 #i‡
__POSIX_VISIBLE
 >= 199506

137 *
as˘ime_r
(c⁄° 
tm
 *, *);

138 *
˘ime_r
(c⁄° 
time_t
 *, *);

139 
tm
 *
gmtime_r
(c⁄° 
time_t
 *, tm *);

140 
tm
 *
loˇ…ime_r
(c⁄° 
time_t
 *, tm *);

143 #i‡
__XSI_VISIBLE


144 *
°Ωtime
(c⁄° * 
__ª°ri˘
, const * __restrict,

145 
tm
 * 
__ª°ri˘
);

148 #i‡
__BSD_VISIBLE


149 *
timez⁄e
(, );

150 
tz£twÆl
();

151 
time_t
 
timñoˇl
(
tm
 * const);

152 
time_t
 
timegm
(
tm
 * const);

154 
	g__END_DECLS


	@/usr/include/unistd.h

37 #i‚de‡
_UNISTD_H_


38 
	#_UNISTD_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/uni°d.h
>

43 
	~<sys/_nuŒ.h
>

44 
	~<sys/_ty≥s.h
>

46 #i‚de‡
_GID_T_DECLARED


47 
__gid_t
 
	tgid_t
;

48 
	#_GID_T_DECLARED


	)

51 #i‚de‡
_OFF_T_DECLARED


52 
__off_t
 
	toff_t
;

53 
	#_OFF_T_DECLARED


	)

56 #i‚de‡
_PID_T_DECLARED


57 
__pid_t
 
	tpid_t
;

58 
	#_PID_T_DECLARED


	)

61 #i‚de‡
_SIZE_T_DECLARED


62 
__size_t
 
	tsize_t
;

63 
	#_SIZE_T_DECLARED


	)

66 #i‚de‡
_SSIZE_T_DECLARED


67 
__ssize_t
 
	tssize_t
;

68 
	#_SSIZE_T_DECLARED


	)

71 #i‚de‡
_UID_T_DECLARED


72 
__uid_t
 
	tuid_t
;

73 
	#_UID_T_DECLARED


	)

76 #i‚de‡
_USECONDS_T_DECLARED


77 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

78 
	#_USECONDS_T_DECLARED


	)

81 
	#STDIN_FILENO
 0

	)

82 
	#STDOUT_FILENO
 1

	)

83 
	#STDERR_FILENO
 2

	)

85 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

86 
	#F_ULOCK
 0

	)

87 
	#F_LOCK
 1

	)

88 
	#F_TLOCK
 2

	)

89 
	#F_TEST
 3

	)

106 
	#_POSIX_BARRIERS
 -1

	)

107 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

108 
	#_POSIX_REGEXP
 1

	)

109 
	#_POSIX_SHELL
 1

	)

110 
	#_POSIX_SPAWN
 -1

	)

111 
	#_POSIX_SPIN_LOCKS
 -1

	)

112 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

113 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

114 
	#_POSIX_THREAD_CPUTIME
 -1

	)

115 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

116 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

117 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

118 
	#_POSIX_THREAD_PROCESS_SHARED
 -1

	)

119 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 -1

	)

120 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

121 
	#_POSIX_THREADS
 200112L

	)

122 
	#_POSIX_TRACE
 -1

	)

123 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

124 
	#_POSIX_TRACE_INHERIT
 -1

	)

125 
	#_POSIX_TRACE_LOG
 -1

	)

126 
	#_POSIX2_C_BIND
 200112L

	)

127 
	#_POSIX2_C_DEV
 -1

	)

128 
	#_POSIX2_CHAR_TERM
 1

	)

129 
	#_POSIX2_FORT_DEV
 -1

	)

130 
	#_POSIX2_FORT_RUN
 200112L

	)

131 
	#_POSIX2_LOCALEDEF
 -1

	)

132 
	#_POSIX2_PBS
 -1

	)

133 
	#_POSIX2_PBS_ACCOUNTING
 -1

	)

134 
	#_POSIX2_PBS_CHECKPOINT
 -1

	)

135 
	#_POSIX2_PBS_LOCATE
 -1

	)

136 
	#_POSIX2_PBS_MESSAGE
 -1

	)

137 
	#_POSIX2_PBS_TRACK
 -1

	)

138 
	#_POSIX2_SW_DEV
 -1

	)

139 
	#_POSIX2_UPE
 200112L

	)

140 
	#_V6_ILP32_OFF32
 -1

	)

141 
	#_V6_ILP32_OFFBIG
 0

	)

142 
	#_V6_LP64_OFF64
 0

	)

143 
	#_V6_LPBIG_OFFBIG
 -1

	)

145 #i‡
__XSI_VISIBLE


146 
	#_XOPEN_CRYPT
 -1

	)

147 
	#_XOPEN_ENH_I18N
 -1

	)

148 
	#_XOPEN_LEGACY
 -1

	)

149 
	#_XOPEN_REALTIME
 -1

	)

150 
	#_XOPEN_REALTIME_THREADS
 -1

	)

151 
	#_XOPEN_UNIX
 -1

	)

155 
	#_POSIX2_VERSION
 199212L

	)

166 
	#_SC_ARG_MAX
 1

	)

167 
	#_SC_CHILD_MAX
 2

	)

168 
	#_SC_CLK_TCK
 3

	)

169 
	#_SC_NGROUPS_MAX
 4

	)

170 
	#_SC_OPEN_MAX
 5

	)

171 
	#_SC_JOB_CONTROL
 6

	)

172 
	#_SC_SAVED_IDS
 7

	)

173 
	#_SC_VERSION
 8

	)

174 
	#_SC_BC_BASE_MAX
 9

	)

175 
	#_SC_BC_DIM_MAX
 10

	)

176 
	#_SC_BC_SCALE_MAX
 11

	)

177 
	#_SC_BC_STRING_MAX
 12

	)

178 
	#_SC_COLL_WEIGHTS_MAX
 13

	)

179 
	#_SC_EXPR_NEST_MAX
 14

	)

180 
	#_SC_LINE_MAX
 15

	)

181 
	#_SC_RE_DUP_MAX
 16

	)

182 
	#_SC_2_VERSION
 17

	)

183 
	#_SC_2_C_BIND
 18

	)

184 
	#_SC_2_C_DEV
 19

	)

185 
	#_SC_2_CHAR_TERM
 20

	)

186 
	#_SC_2_FORT_DEV
 21

	)

187 
	#_SC_2_FORT_RUN
 22

	)

188 
	#_SC_2_LOCALEDEF
 23

	)

189 
	#_SC_2_SW_DEV
 24

	)

190 
	#_SC_2_UPE
 25

	)

191 
	#_SC_STREAM_MAX
 26

	)

192 
	#_SC_TZNAME_MAX
 27

	)

194 #i‡
__POSIX_VISIBLE
 >= 199309

195 
	#_SC_ASYNCHRONOUS_IO
 28

	)

196 
	#_SC_MAPPED_FILES
 29

	)

197 
	#_SC_MEMLOCK
 30

	)

198 
	#_SC_MEMLOCK_RANGE
 31

	)

199 
	#_SC_MEMORY_PROTECTION
 32

	)

200 
	#_SC_MESSAGE_PASSING
 33

	)

201 
	#_SC_PRIORITIZED_IO
 34

	)

202 
	#_SC_PRIORITY_SCHEDULING
 35

	)

203 
	#_SC_REALTIME_SIGNALS
 36

	)

204 
	#_SC_SEMAPHORES
 37

	)

205 
	#_SC_FSYNC
 38

	)

206 
	#_SC_SHARED_MEMORY_OBJECTS
 39

	)

207 
	#_SC_SYNCHRONIZED_IO
 40

	)

208 
	#_SC_TIMERS
 41

	)

209 
	#_SC_AIO_LISTIO_MAX
 42

	)

210 
	#_SC_AIO_MAX
 43

	)

211 
	#_SC_AIO_PRIO_DELTA_MAX
 44

	)

212 
	#_SC_DELAYTIMER_MAX
 45

	)

213 
	#_SC_MQ_OPEN_MAX
 46

	)

214 
	#_SC_PAGESIZE
 47

	)

215 
	#_SC_RTSIG_MAX
 48

	)

216 
	#_SC_SEM_NSEMS_MAX
 49

	)

217 
	#_SC_SEM_VALUE_MAX
 50

	)

218 
	#_SC_SIGQUEUE_MAX
 51

	)

219 
	#_SC_TIMER_MAX
 52

	)

222 #i‡
__POSIX_VISIBLE
 >= 200112

223 
	#_SC_2_PBS
 59

	)

224 
	#_SC_2_PBS_ACCOUNTING
 60

	)

225 
	#_SC_2_PBS_CHECKPOINT
 61

	)

226 
	#_SC_2_PBS_LOCATE
 62

	)

227 
	#_SC_2_PBS_MESSAGE
 63

	)

228 
	#_SC_2_PBS_TRACK
 64

	)

229 
	#_SC_ADVISORY_INFO
 65

	)

230 
	#_SC_BARRIERS
 66

	)

231 
	#_SC_CLOCK_SELECTION
 67

	)

232 
	#_SC_CPUTIME
 68

	)

233 
	#_SC_FILE_LOCKING
 69

	)

234 
	#_SC_GETGR_R_SIZE_MAX
 70

	)

235 
	#_SC_GETPW_R_SIZE_MAX
 71

	)

236 
	#_SC_HOST_NAME_MAX
 72

	)

237 
	#_SC_LOGIN_NAME_MAX
 73

	)

238 
	#_SC_MONOTONIC_CLOCK
 74

	)

239 
	#_SC_MQ_PRIO_MAX
 75

	)

240 
	#_SC_READER_WRITER_LOCKS
 76

	)

241 
	#_SC_REGEXP
 77

	)

242 
	#_SC_SHELL
 78

	)

243 
	#_SC_SPAWN
 79

	)

244 
	#_SC_SPIN_LOCKS
 80

	)

245 
	#_SC_SPORADIC_SERVER
 81

	)

246 
	#_SC_THREAD_ATTR_STACKADDR
 82

	)

247 
	#_SC_THREAD_ATTR_STACKSIZE
 83

	)

248 
	#_SC_THREAD_CPUTIME
 84

	)

249 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 85

	)

250 
	#_SC_THREAD_KEYS_MAX
 86

	)

251 
	#_SC_THREAD_PRIO_INHERIT
 87

	)

252 
	#_SC_THREAD_PRIO_PROTECT
 88

	)

253 
	#_SC_THREAD_PRIORITY_SCHEDULING
 89

	)

254 
	#_SC_THREAD_PROCESS_SHARED
 90

	)

255 
	#_SC_THREAD_SAFE_FUNCTIONS
 91

	)

256 
	#_SC_THREAD_SPORADIC_SERVER
 92

	)

257 
	#_SC_THREAD_STACK_MIN
 93

	)

258 
	#_SC_THREAD_THREADS_MAX
 94

	)

259 
	#_SC_TIMEOUTS
 95

	)

260 
	#_SC_THREADS
 96

	)

261 
	#_SC_TRACE
 97

	)

262 
	#_SC_TRACE_EVENT_FILTER
 98

	)

263 
	#_SC_TRACE_INHERIT
 99

	)

264 
	#_SC_TRACE_LOG
 100

	)

265 
	#_SC_TTY_NAME_MAX
 101

	)

266 
	#_SC_TYPED_MEMORY_OBJECTS
 102

	)

267 
	#_SC_V6_ILP32_OFF32
 103

	)

268 
	#_SC_V6_ILP32_OFFBIG
 104

	)

269 
	#_SC_V6_LP64_OFF64
 105

	)

270 
	#_SC_V6_LPBIG_OFFBIG
 106

	)

271 
	#_SC_IPV6
 118

	)

272 
	#_SC_RAW_SOCKETS
 119

	)

273 
	#_SC_SYMLOOP_MAX
 120

	)

276 #i‡
__XSI_VISIBLE


277 
	#_SC_ATEXIT_MAX
 107

	)

278 
	#_SC_IOV_MAX
 56

	)

279 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

280 
	#_SC_XOPEN_CRYPT
 108

	)

281 
	#_SC_XOPEN_ENH_I18N
 109

	)

282 
	#_SC_XOPEN_LEGACY
 110

	)

283 
	#_SC_XOPEN_REALTIME
 111

	)

284 
	#_SC_XOPEN_REALTIME_THREADS
 112

	)

285 
	#_SC_XOPEN_SHM
 113

	)

286 
	#_SC_XOPEN_STREAMS
 114

	)

287 
	#_SC_XOPEN_UNIX
 115

	)

288 
	#_SC_XOPEN_VERSION
 116

	)

289 
	#_SC_XOPEN_XCU_VERSION
 117

	)

292 #i‡
__BSD_VISIBLE


293 
	#_SC_NPROCESSORS_CONF
 57

	)

294 
	#_SC_NPROCESSORS_ONLN
 58

	)

298 #i‡
__POSIX_VISIBLE
 >= 199209

299 
	#_CS_PATH
 1

	)

302 #i‡
__POSIX_VISIBLE
 >= 200112

303 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 2

	)

304 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 3

	)

305 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 4

	)

306 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 5

	)

307 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 6

	)

308 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 7

	)

309 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 8

	)

310 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 9

	)

311 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 10

	)

312 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 11

	)

313 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 12

	)

314 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 13

	)

315 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 14

	)

318 
__BEGIN_DECLS


320 
	$_exô
(Ë
__dód2
;

321 
	`ac˚ss
(const *, );

322 
	`Æ¨m
();

323 
	`chdú
(const *);

324 
	`chown
(c⁄° *, 
uid_t
, 
gid_t
);

325 
	`˛o£
();

326 
	`dup
();

327 
	`dup2
(, );

328 
	`óc˚ss
(const *, );

329 
	`exe˛
(const *, const *, ...);

330 
	`exe˛e
(const *, const *, ...);

331 
	`exe˛p
(const *, const *, ...);

332 
	`execv
(const *, * const *);

333 
	`execve
(const *, * const *, * const *);

334 
	`execvp
(const *, * const *);

335 
pid_t
 
	`f‹k
();

336 
	`Â©hc⁄f
(, );

337 *
	`gëcwd
(*, 
size_t
);

338 
gid_t
 
	`gëegid
();

339 
uid_t
 
	`gëeuid
();

340 
gid_t
 
	`gëgid
();

341 
	`gëgroups
(, 
gid_t
 []);

342 *
	`gëlogö
();

343 
pid_t
 
	`gëpgΩ
();

344 
pid_t
 
	`gëpid
();

345 
pid_t
 
	`gëµid
();

346 
uid_t
 
	`gëuid
();

347 
	`ißây
();

348 
	`lök
(const *, const *);

349 #i‚de‡
_LSEEK_DECLARED


350 
	#_LSEEK_DECLARED


	)

351 
off_t
 
	`l£ek
(, off_t, );

353 
	`∑thc⁄f
(const *, );

354 
	`∑u£
();

355 
	`pùe
(*);

356 
ssize_t
 
	`ªad
(, *, 
size_t
);

357 
	`rmdú
(const *);

358 
	`£tgid
(
gid_t
);

359 
	`£çgid
(
pid_t
,Öid_t);

360 
	$£çro˘ôÀ
(c⁄° *
_fmt
, ...Ë
	`__¥ötf0like
(1, 2);

361 
pid_t
 
	`£tsid
();

362 
	`£tuid
(
uid_t
);

363 
	`¶ìp
();

364 
	`sysc⁄f
();

365 
pid_t
 
	`tcgëpgΩ
();

366 
	`tc£çgΩ
(, 
pid_t
);

367 *
	`ây«me
();

368 
	`u∆ök
(const *);

369 
ssize_t
 
	`wrôe
(, c⁄° *, 
size_t
);

372 #i‡
__POSIX_VISIBLE
 >199209 || 
__XSI_VISIBLE


373 
size_t
 
	`c⁄f°r
(, *, size_t);

374 #i‚de‡
_GETOPT_DECLARED


375 
	#_GETOPT_DECLARED


	)

376 
	`gë›t
(, * const [], const *);

378 *
›èrg
;

379 
›töd
, 
›ãº
, 
›t›t
;

384 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE


385 
	`fsync
();

391 #i‚de‡
_FTRUNCATE_DECLARED


392 
	#_FTRUNCATE_DECLARED


	)

393 
	`·runˇã
(, 
off_t
);

397 #i‡
__POSIX_VISIBLE
 >= 199506

398 
	`gëlogö_r
(*, );

402 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


403 
	`fchown
(, 
uid_t
, 
gid_t
);

404 
	`ªadlök
(const *, *, );

406 #i‡
__POSIX_VISIBLE
 >= 200112

407 
	`gëho°«me
(*, 
size_t
);

408 
	`£ãgid
(
gid_t
);

409 
	`£ãuid
(
uid_t
);

417 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE
 >402 || 
__BSD_VISIBLE


418 
	`symlök
(c⁄° * 
__ª°ri˘
, const * __restrict);

422 #i‡
__XSI_VISIBLE


423 *
	`¸y±
(const *, const *);

425 
	`í¸y±
(*, );

426 
	`fchdú
();

427 
	`gëho°id
();

428 
	`gëpgid
(
pid_t
 
_pid
);

429 
	`gësid
(
pid_t
 
_pid
);

430 *
	`gëwd
(*);

431 
	`lchown
(c⁄° *, 
uid_t
, 
gid_t
);

432 
	`lockf
(, , 
off_t
);

433 
	`ni˚
();

434 
ssize_t
 
	`¥ód
(, *, 
size_t
, 
off_t
);

435 
ssize_t
 
	`pwrôe
(, c⁄° *, 
size_t
, 
off_t
);

436 
	`£çgΩ
(
pid_t
 
_pid
,Öid_à
_pgΩ
);

437 
	`£åegid
(
gid_t
, gid_t);

438 
	`£åeuid
(
uid_t
, uid_t);

440 
	`sync
();

441 
u£c⁄ds_t
 
	`uÆ¨m
(useconds_t, useconds_t);

442 
	`u¶ìp
(
u£c⁄ds_t
);

443 
pid_t
 
	`vf‹k
();

446 #i‚de‡
_TRUNCATE_DECLARED


447 
	#_TRUNCATE_DECLARED


	)

448 
	`åunˇã
(c⁄° *, 
off_t
);

452 #i‡
__XSI_VISIBLE
 <500 || 
__BSD_VISIBLE


453 
	`brk
(const *);

454 
	`chroŸ
(const *);

455 
	`gëdèbÀsize
();

456 
	$gë∑gesize
(Ë
__puª2
;

457 *
	`gë∑ss
(const *);

458 *
	`sbrk
(
öçå_t
);

461 #i‡
__BSD_VISIBLE


462 
timevÆ
;

463 
	`ac˘
(const *);

464 
	`async_d´m⁄
();

465 
	`check_utûôy_com∑t
(const *);

467 
	`¸y±_gë_f‹m©
();

468 
	`¸y±_£t_f‹m©
(const *);

469 
	`des_cùhî
(const *, *, , );

470 
	`des_£tkey
(c⁄° *
key
);

471 
	`ídu£rshñl
();

472 
	`exe˘
(const *, * const *, * const *);

473 
	`execvP
(const *, const *, * const *);

474 *
	`fÊag°o°r
(
u_l⁄g
);

475 
	`gëdomaö«me
(*, );

476 
	`gëgrou∂i°
(c⁄° *, 
gid_t
, gid_t *, *);

477 
mode_t
 
	`gëmode
(const *, mode_t);

478 
	`gë≥îeid
(, 
uid_t
 *, 
gid_t
 *);

479 
	`gëªsgid
(
gid_t
 *, gid_t *, gid_t *);

480 
	`gëªsuid
(
uid_t
 *, uid_t *, uid_t *);

481 *
	`gëu£rshñl
();

482 
	`öôgroups
(c⁄° *, 
gid_t
);

483 
	`úu£rok
(, , const *, const *);

484 
	`úu£rok_ß
(const *, , , const *, const *);

485 
	`is£tugid
();

486 *
	`mkdãmp
(*);

487 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

488 #i‚de‡
_MKSTEMP_DECLARED


489 
	`mk°emp
(*);

490 
	#_MKSTEMP_DECLARED


	)

492 
	`mk°emps
(*, );

493 #i‚de‡
_MKTEMP_DECLARED


494 *
	`mkãmp
(*);

495 
	#_MKTEMP_DECLARED


	)

497 
	`nfs˛¡
(, *);

498 
	`nfssvc
(, *);

499 
	`¥ofû
(*, 
size_t
, 
vm_off£t_t
, );

500 
	`rcmd
(**, , const *, const *, const *, *);

501 
	`rcmd_af
(**, , const *,

503 
	`rcmdsh
(**, , const *,

505 *
	`ª_comp
(const *);

506 
	`ª_exec
(const *);

507 
	`ªboŸ
();

508 
	`ªvoke
(const *);

509 
pid_t
 
	`rf‹k
();

510 
pid_t
 
	`rf‹k_thªad
(, *, (*)(*), *);

511 
	`ºesvp‹t
(*);

512 
	`ºesvp‹t_af
(*, );

513 
	`ru£rok
(const *, , const *, const *);

514 #i‡
__BSD_VISIBLE


515 #i‚de‡
_SELECT_DECLARED


516 
	#_SELECT_DECLARED


	)

517 
	`£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

520 
	`£tdomaö«me
(const *, );

521 
	`£tgroups
(, c⁄° 
gid_t
 *);

522 
	`£tho°id
();

523 
	`£tho°«me
(const *, );

524 #i‚de‡
_SETKEY_DECLARED


525 
	`£tkey
(const *);

526 
	#_SETKEY_DECLARED


	)

528 
	`£éogö
(const *);

529 *
	`£tmode
(const *);

530 
	`£åesgid
(
gid_t
, gid_t, gid_t);

531 
	`£åesuid
(
uid_t
, uid_t, uid_t);

532 
	`£ågid
(
gid_t
);

533 
	`£åuid
(
uid_t
);

534 
	`£tu£rshñl
();

535 
	`°πofÊags
(**, 
u_l⁄g
 *, u_long *);

536 
	`sw≠⁄
(const *);

537 
	`sw≠off
(const *);

538 
	`sysˇŒ
(, ...);

539 
off_t
 
	`__sysˇŒ
(
quad_t
, ...);

540 
	`ây¶Ÿ
();

541 
	`undñëe
(const *);

542 
	`unwhôeout
(const *);

543 *
	`vÆloc
(
size_t
);

545 #i‚de‡
_OPTRESET_DECLARED


546 
	#_OPTRESET_DECLARED


	)

547 
›åe£t
;

550 
__END_DECLS


	@y.tab.h

1 #i‚de‡
YYERRCODE


2 
	#YYERRCODE
 256

	)

5 
	#NOTIFY
 257

	)

6 
	#OBRACE
 258

	)

7 
	#CBRACE
 259

	)

8 
	#SCOLON
 260

	)

9 
	#IPADDR
 261

	)

12 
	mnumbî
;

13 * 
	m°rög
;

14 } 
	tYYSTYPE
;

15 
YYSTYPE
 
yylvÆ
;

	@/usr/include/_ctype.h

46 #i‚de‡
__CTYPE_H_


47 
	#__CTYPE_H_


	)

49 
	~<sys/cdefs.h
>

50 
	~<sys/_ty≥s.h
>

52 
	#_CTYPE_A
 0x00000100L

	)

53 
	#_CTYPE_C
 0x00000200L

	)

54 
	#_CTYPE_D
 0x00000400L

	)

55 
	#_CTYPE_G
 0x00000800L

	)

56 
	#_CTYPE_L
 0x00001000L

	)

57 
	#_CTYPE_P
 0x00002000L

	)

58 
	#_CTYPE_S
 0x00004000L

	)

59 
	#_CTYPE_U
 0x00008000L

	)

60 
	#_CTYPE_X
 0x00010000L

	)

61 
	#_CTYPE_B
 0x00020000L

	)

62 
	#_CTYPE_R
 0x00040000L

	)

63 
	#_CTYPE_I
 0x00080000L

	)

64 
	#_CTYPE_T
 0x00100000L

	)

65 
	#_CTYPE_Q
 0x00200000L

	)

66 
	#_CTYPE_SW0
 0x20000000L

	)

67 
	#_CTYPE_SW1
 0x40000000L

	)

68 
	#_CTYPE_SW2
 0x80000000L

	)

69 
	#_CTYPE_SW3
 0xc0000000L

	)

70 
	#_CTYPE_SWM
 0xe0000000L

	)

71 
	#_CTYPE_SWS
 30

	)

74 
__BEGIN_DECLS


75 
___ru√ty≥
(
__˘_ru√_t
);

76 
__˘_ru√_t
 
___tﬁowî
(__ct_rune_t);

77 
__˘_ru√_t
 
___touµî
(__ct_rune_t);

78 
	g__END_DECLS


84 #ifde‡
_EXTERNALIZE_CTYPE_INLINES_


85 
	#_USE_CTYPE_INLINE_


	)

86 

	)

87 
	#__ölöe


	)

93 #i‡!
deföed
(
_DONT_USE_CTYPE_INLINE_
) && \

94 (
deföed
(
_USE_CTYPE_INLINE_
Ë|| deföed(
__GNUC__
Ë|| 
	$deföed
(
__˝lu•lus
))

96 
	~<ru√ty≥.h
>

98 
__ölöe
 

99 
	$__maskru√
(
__˘_ru√_t
 
_c
, 
_f
)

101  ((
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___ru√ty≥
(_c) :

102 
_CuºítRu√LoˇÀ
->
__ru√ty≥
[
_c
]Ë& 
_f
;

103 
	}
}

105 
__ölöe
 

106 
	$__i°y≥
(
__˘_ru√_t
 
_c
, 
_f
)

108  (!!
	`__maskru√
(
_c
, 
_f
));

109 
	}
}

111 
__ölöe
 

112 
	$__is˘y≥
(
__˘_ru√_t
 
_c
, 
_f
)

114  (
_c
 < 0 || _¯>
_CACHED_RUNES
) ? 0 :

115 !!(
_DeÁu…Ru√LoˇÀ
.
__ru√ty≥
[
_c
] & 
_f
);

116 
	}
}

118 
__ölöe
 
__˘_ru√_t


119 
	$__touµî
(
__˘_ru√_t
 
_c
)

121  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___touµî
(_c) :

122 
_CuºítRu√LoˇÀ
->
__m≠uµî
[
_c
];

123 
	}
}

125 
__ölöe
 
__˘_ru√_t


126 
	$__tﬁowî
(
__˘_ru√_t
 
_c
)

128  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___tﬁowî
(_c) :

129 
_CuºítRu√LoˇÀ
->
__m≠lowî
[
_c
];

130 
	}
}

132 
__ölöe
 

133 
	$__wcwidth
(
__˘_ru√_t
 
_c
)

135 
_x
;

137 i‡(
_c
 == 0)

139 
_x
 = ()
	`__maskru√
(
_c
, 
_CTYPE_SWM
|
_CTYPE_R
);

140 i‡((
_x
 & 
_CTYPE_SWM
) != 0)

141  ((
_x
 & 
_CTYPE_SWM
Ë>> 
_CTYPE_SWS
);

142  ((
_x
 & 
_CTYPE_R
) != 0 ? 1 : -1);

143 
	}
}

147 
__BEGIN_DECLS


148 
__maskru√
(
__˘_ru√_t
, );

149 
__i°y≥
(
__˘_ru√_t
, );

150 
__is˘y≥
(
__˘_ru√_t
, );

151 
__˘_ru√_t
 
__touµî
(__ct_rune_t);

152 
__˘_ru√_t
 
__tﬁowî
(__ct_rune_t);

153 
__wcwidth
(
__˘_ru√_t
);

154 
	g__END_DECLS


	@/usr/include/machine/endian.h

33 #i‚de‡
_MACHINE_ENDIAN_H_


34 
	#_MACHINE_ENDIAN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

39 #ifde‡
__˝lu•lus


46 
	#_QUAD_HIGHWORD
 1

	)

47 
	#_QUAD_LOWWORD
 0

	)

53 
	#_LITTLE_ENDIAN
 1234

	)

54 
	#_BIG_ENDIAN
 4321

	)

55 
	#_PDP_ENDIAN
 3412

	)

57 
	#_BYTE_ORDER
 
_LITTLE_ENDIAN


	)

63 #i‡
__BSD_VISIBLE


64 
	#LITTLE_ENDIAN
 
_LITTLE_ENDIAN


	)

65 
	#BIG_ENDIAN
 
_BIG_ENDIAN


	)

66 
	#PDP_ENDIAN
 
_PDP_ENDIAN


	)

67 
	#BYTE_ORDER
 
_BYTE_ORDER


	)

70 #i‡
deföed
(
__INTEL_COMPILER
)

71 #i‡
deföed
(
__˝lu•lus
)

72 #i‡
__INTEL_COMPILER
 >= 800

73 
	#__INTEL_COMPILER_wôh_FªeBSD_ídün
 1

	)

76 
	#__INTEL_COMPILER_wôh_FªeBSD_ídün
 1

	)

80 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER_wôh_FªeBSD_ídün
)

82 
	#__w‹d_sw≠_öt_v¨
(
x
) \

83 
	`__exãnsi⁄__
 ({ 
__uöt32_t
 
__X
 = (
x
); \

84 
	`__asm
 ("r‹»$16, %0" : "+r" (
__X
)); \

85 
__X
; })

	)

87 #ifde‡
__OPTIMIZE__


89 
	#__w‹d_sw≠_öt_c⁄°
(
x
) \

90 ((((
x
) & 0xffff0000) >> 16) | \

91 (((
x
Ë& 0x0000ffffË<< 16))

	)

92 
	#__w‹d_sw≠_öt
(
x
Ë(
	`__buûtö_c⁄°™t_p
(x) ? \

93 
	`__w‹d_sw≠_öt_c⁄°
(
x
Ë: 
	`__w‹d_sw≠_öt_v¨
(x))

	)

97 
	#__w‹d_sw≠_öt
(
x
Ë
	`__w‹d_sw≠_öt_v¨
(x)

	)

101 #i‡
deföed
(
_KERNEL
Ë&& (deföed(
I486_CPU
Ë|| deföed(
I586_CPU
Ë|| deföed(
I686_CPU
)Ë&& !deföed(
I386_CPU
)

103 
	#__byã_sw≠_öt_v¨
(
x
) \

104 
	`__exãnsi⁄__
 ({ 
__uöt32_t
 
__X
 = (
x
); \

105 
	`__asm
 ("bsw≠ %0" : "+r" (
__X
)); \

106 
__X
; })

	)

109 
	#__byã_sw≠_öt_v¨
(
x
) \

110 
	`__exãnsi⁄__
 ({ 
__uöt32_t
 
__X
 = (
x
); \

111 
	`__asm
 ("xchgb %h0, %b0\n\trorl $16, %0\n\txchgb %h0, %b0" \

112 : "+q" (
__X
)); \

113 
__X
; })

	)

116 #ifde‡
__OPTIMIZE__


118 
	#__byã_sw≠_öt_c⁄°
(
x
) \

119 ((((
x
) & 0xff000000) >> 24) | \

120 (((
x
) & 0x00ff0000) >> 8) | \

121 (((
x
) & 0x0000ff00) << 8) | \

122 (((
x
Ë& 0x000000ffË<< 24))

	)

123 
	#__byã_sw≠_öt
(
x
Ë(
	`__buûtö_c⁄°™t_p
(x) ? \

124 
	`__byã_sw≠_öt_c⁄°
(
x
Ë: 
	`__byã_sw≠_öt_v¨
(x))

	)

128 
	#__byã_sw≠_öt
(
x
Ë
	`__byã_sw≠_öt_v¨
(x)

	)

132 
	#__byã_sw≠_w‹d_v¨
(
x
) \

133 
	`__exãnsi⁄__
 ({ 
__uöt16_t
 
__X
 = (
x
); \

134 
	`__asm
 ("xchgb %h0, %b0" : "+q" (
__X
)); \

135 
__X
; })

	)

137 #ifde‡
__OPTIMIZE__


139 
	#__byã_sw≠_w‹d_c⁄°
(
x
) \

140 ((((
x
) & 0xff00) >> 8) | \

141 (((
x
Ë& 0x00ffË<< 8))

	)

143 
	#__byã_sw≠_w‹d
(
x
Ë(
	`__buûtö_c⁄°™t_p
(x) ? \

144 
	`__byã_sw≠_w‹d_c⁄°
(
x
Ë: 
	`__byã_sw≠_w‹d_v¨
(x))

	)

148 
	#__byã_sw≠_w‹d
(
x
Ë
	`__byã_sw≠_w‹d_v¨
(x)

	)

152 
__ölöe
 
__uöt64_t


153 
__bsw≠64
(
__uöt64_t
 
_x
)

156  ((
_x
 >> 56) | ((_x >> 40) & 0xff00) | ((_x >> 24) & 0xff0000) |

157 ((
_x
 >> 8Ë& 0xff000000Ë| ((_x << 8Ë& ((
__uöt64_t
)0xff << 32)) |

158 ((
_x
 << 24Ë& ((
__uöt64_t
)0xff << 40)) |

159 ((
_x
 << 40Ë& ((
__uöt64_t
)0xff << 48)) | ((_x << 56)));

162 
__ölöe
 
__uöt32_t


163 
__bsw≠32
(
__uöt32_t
 
_x
)

166  (
__byã_sw≠_öt
(
_x
));

169 
__ölöe
 
__uöt16_t


170 
__bsw≠16
(
__uöt16_t
 
_x
)

173  (
__byã_sw≠_w‹d
(
_x
));

176 
	#__ht⁄l
(
x
Ë
	`__bsw≠32
(x)

	)

177 
	#__ht⁄s
(
x
Ë
	`__bsw≠16
(x)

	)

178 
	#__¡ohl
(
x
Ë
	`__bsw≠32
(x)

	)

179 
	#__¡ohs
(
x
Ë
	`__bsw≠16
(x)

	)

188 
	#_BYTEORDER_FUNC_DEFINED


	)

192 #ifde‡
__˝lu•lus


	@/usr/include/machine/param.h

45 #i‚de‡
_ALIGNBYTES


46 
	#_ALIGNBYTES
 ((Ë- 1)

	)

48 #i‚de‡
_ALIGN


49 
	#_ALIGN
(
p
Ë((()’Ë+ 
_ALIGNBYTES
Ë& ~_ALIGNBYTES)

	)

52 #i‚de‡
_MACHINE


53 
	#_MACHINE
 
i386


	)

55 #i‚de‡
_MACHINE_ARCH


56 
	#_MACHINE_ARCH
 
i386


	)

59 #i‚de‡
_NO_NAMESPACE_POLLUTION


61 #i‚de‡
_MACHINE_PARAM_H_


62 
	#_MACHINE_PARAM_H_


	)

64 #i‚de‡
MACHINE


65 
	#MACHINE
 "i386"

	)

67 #i‚de‡
MACHINE_ARCH


68 
	#MACHINE_ARCH
 "i386"

	)

70 
	#MID_MACHINE
 
MID_I386


	)

72 #ifde‡
SMP


73 
	#MAXCPU
 16

	)

75 
	#MAXCPU
 1

	)

78 
	#ALIGNBYTES
 
_ALIGNBYTES


	)

79 
	#ALIGN
(
p
Ë
	`_ALIGN
’)

	)

81 
	#PAGE_SHIFT
 12

	)

82 
	#PAGE_SIZE
 (1<<
PAGE_SHIFT
Ë

	)

83 
	#PAGE_MASK
 (
PAGE_SIZE
-1)

	)

84 
	#NPTEPG
 (
PAGE_SIZE
/( (
±_íåy_t
)))

	)

86 #ifde‡
PAE


87 
	#NPGPTD
 4

	)

88 
	#PDRSHIFT
 21

	)

90 
	#NPGPTD
 1

	)

91 
	#PDRSHIFT
 22

	)

94 
	#NBPTD
 (
NPGPTD
<<
PAGE_SHIFT
)

	)

95 
	#NPDEPTD
 (
NBPTD
/( (
pd_íåy_t
)))

	)

96 
	#NPDEPG
 (
PAGE_SIZE
/( (
pd_íåy_t
)))

	)

97 
	#NBPDR
 (1<<
PDRSHIFT
Ë

	)

98 
	#PDRMASK
 (
NBPDR
-1)

	)

100 
	#IOPAGES
 2

	)

102 #i‚de‡
KSTACK_PAGES


103 
	#KSTACK_PAGES
 2

	)

105 
	#KSTACK_GUARD_PAGES
 1

	)

106 
	#UAREA_PAGES
 1

	)

112 #i‚de‡
VM_SWZONE_SIZE_MAX


113 
	#VM_SWZONE_SIZE_MAX
 (32 * 1024 * 1024)

	)

121 #i‚de‡
VM_BCACHE_SIZE_MAX


122 
	#VM_BCACHE_SIZE_MAX
 (200 * 1024 * 1024)

	)

128 
	#åunc_∑ge
(
x
Ë((xË& ~
PAGE_MASK
)

	)

129 
	#round_∑ge
(
x
Ë(((xË+ 
PAGE_MASK
Ë& ~PAGE_MASK)

	)

130 
	#åunc_4m∑ge
(
x
Ë((xË& ~
PDRMASK
)

	)

131 
	#round_4m∑ge
(
x
Ë((((x)Ë+ 
PDRMASK
Ë& ~PDRMASK)

	)

133 
	#©›
(
x
Ë((xË>> 
PAGE_SHIFT
)

	)

134 
	#±ﬂ
(
x
Ë((xË<< 
PAGE_SHIFT
)

	)

136 
	#i386_bt›
(
x
Ë((xË>> 
PAGE_SHIFT
)

	)

137 
	#i386_±ob
(
x
Ë((xË<< 
PAGE_SHIFT
)

	)

139 
	#pgtok
(
x
Ë((xË* (
PAGE_SIZE
 / 1024))

	)

	@/usr/include/netinet6/in6.h

64 #i‚de‡
__KAME_NETINET_IN_H_INCLUDED_


68 #i‚de‡
_NETINET6_IN6_H_


69 
	#_NETINET6_IN6_H_


	)

76 
	#__KAME__


	)

77 
	#__KAME_VERSION
 "20010528/FªeBSD"

	)

106 #i‡
__BSD_VISIBLE


107 
	#IPV6PORT_RESERVED
 1024

	)

108 
	#IPV6PORT_ANONMIN
 49152

	)

109 
	#IPV6PORT_ANONMAX
 65535

	)

110 
	#IPV6PORT_RESERVEDMIN
 600

	)

111 
	#IPV6PORT_RESERVEDMAX
 (
IPV6PORT_RESERVED
-1)

	)

117 
	sö6_addr
 {

119 
uöt8_t
 
	m__u6_addr8
[16];

120 
uöt16_t
 
	m__u6_addr16
[8];

121 
uöt32_t
 
	m__u6_addr32
[4];

122 } 
	m__u6_addr
;

125 
	#s6_addr
 
__u6_addr
.
__u6_addr8


	)

126 #ifde‡
_KERNEL


127 
	#s6_addr8
 
__u6_addr
.
__u6_addr8


	)

128 
	#s6_addr16
 
__u6_addr
.
__u6_addr16


	)

129 
	#s6_addr32
 
__u6_addr
.
__u6_addr32


	)

132 
	#INET6_ADDRSTRLEN
 46

	)

141 #i‡
__BSD_VISIBLE


142 
	#SIN6_LEN


	)

145 
	ssockaddr_ö6
 {

146 
uöt8_t
 
	msö6_Àn
;

147 
ß_Ámûy_t
 
	msö6_Ámûy
;

148 
ö_p‹t_t
 
	msö6_p‹t
;

149 
uöt32_t
 
	msö6_Êowöfo
;

150 
ö6_addr
 
	msö6_addr
;

151 
uöt32_t
 
	msö6_sc›e_id
;

157 #ifde‡
_KERNEL


158 
	#IN6MASK0
 {{{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }}}

	)

159 
	#IN6MASK32
 {{{ 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, \

160 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

161 
	#IN6MASK64
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

162 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

163 
	#IN6MASK96
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

164 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }}}

	)

165 
	#IN6MASK128
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

166 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf‡}}}

	)

169 #ifde‡
_KERNEL


170 c⁄° 
sockaddr_ö6
 
ß6_™y
;

172 c⁄° 
ö6_addr
 
ö6mask0
;

173 c⁄° 
ö6_addr
 
ö6mask32
;

174 c⁄° 
ö6_addr
 
ö6mask64
;

175 c⁄° 
ö6_addr
 
ö6mask96
;

176 c⁄° 
ö6_addr
 
ö6mask128
;

182 #ifde‡
_KERNEL


183 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


184 
	#IPV6_ADDR_INT32_ONE
 1

	)

185 
	#IPV6_ADDR_INT32_TWO
 2

	)

186 
	#IPV6_ADDR_INT32_MNL
 0xff010000

	)

187 
	#IPV6_ADDR_INT32_MLL
 0xff020000

	)

188 
	#IPV6_ADDR_INT32_SMP
 0x0000ffff

	)

189 
	#IPV6_ADDR_INT16_ULL
 0x„80

	)

190 
	#IPV6_ADDR_INT16_USL
 0x„c0

	)

191 
	#IPV6_ADDR_INT16_MLL
 0xff02

	)

192 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


193 
	#IPV6_ADDR_INT32_ONE
 0x01000000

	)

194 
	#IPV6_ADDR_INT32_TWO
 0x02000000

	)

195 
	#IPV6_ADDR_INT32_MNL
 0x000001ff

	)

196 
	#IPV6_ADDR_INT32_MLL
 0x000002ff

	)

197 
	#IPV6_ADDR_INT32_SMP
 0xffff0000

	)

198 
	#IPV6_ADDR_INT16_ULL
 0x80„

	)

199 
	#IPV6_ADDR_INT16_USL
 0xc0„

	)

200 
	#IPV6_ADDR_INT16_MLL
 0x02ff

	)

207 #i‡
__BSD_VISIBLE


208 
	#IN6ADDR_ANY_INIT
 \

210 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

211 
	#IN6ADDR_LOOPBACK_INIT
 \

213 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

214 
	#IN6ADDR_NODELOCAL_ALLNODES_INIT
 \

216 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

217 
	#IN6ADDR_INTFACELOCAL_ALLNODES_INIT
 \

219 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

220 
	#IN6ADDR_LINKLOCAL_ALLNODES_INIT
 \

222 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

223 
	#IN6ADDR_LINKLOCAL_ALLROUTERS_INIT
 \

225 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}

	)

228 c⁄° 
ö6_addr
 
ö6addr_™y
;

229 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

230 #i‡
__BSD_VISIBLE


231 c⁄° 
ö6_addr
 
ö6addr_nodñoˇl_Æ odes
;

232 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Æ odes
;

233 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_ÆÃouãrs
;

242 #ifde‡
_KERNEL


243 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

244 (
	`bcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

246 #i‡
__BSD_VISIBLE


247 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

248 (
	`memcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

252 #ifde‡
_KERNEL


254 
	#SA6_ARE_ADDR_EQUAL
(
a
, 
b
) \

255 (((
a
)->
sö6_sc›e_id
 =0 || (
b
)->sin6_scope_id == 0 || \

256 ((
a
)->
sö6_sc›e_id
 =(
b
)->sin6_scope_id)) && \

257 (
	`bcmp
(&(
a
)->
sö6_addr
, &(
b
)->sö6_addr, (
ö6_addr
)Ë=0))

	)

263 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

264 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

265 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

266 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

267 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=0))

	)

272 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

273 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

274 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

275 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

276 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=
	`¡ohl
(1)))

	)

281 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

282 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

283 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

284 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

285 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]) != 0) && \

286 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë!
	`¡ohl
(1)))

	)

291 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

292 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

293 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

294 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]Ë=
	`¡ohl
(0x0000ffff)))

	)

300 #ifde‡
_KERNEL


301 
	#IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

302 
	#IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

303 
	#IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

304 
	#IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

305 
	#IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

306 
	#IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

308 
	#__IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

309 
	#__IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

310 
	#__IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

311 
	#__IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

312 
	#__IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

313 
	#__IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

320 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

321 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0x80))

	)

322 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

323 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0xc0))

	)

328 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(◊)->
s6_addr
[0] =0xff)

	)

330 #ifde‡
_KERNEL


331 
	#IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

333 
	#__IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

339 #ifde‡
_KERNEL


340 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

341 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

342 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_NODELOCAL
))

	)

343 
	#IN6_IS_ADDR_MC_INTFACELOCAL
(
a
) \

344 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

345 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_INTFACELOCAL
))

	)

346 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

347 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

348 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

349 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

350 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

351 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_SITELOCAL
))

	)

352 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

353 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

354 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

355 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

356 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

357 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_GLOBAL
))

	)

359 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

360 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

361 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_NODELOCAL
))

	)

362 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

363 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

364 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

365 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

366 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

367 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_SITELOCAL
))

	)

368 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

369 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

370 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

371 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

372 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

373 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_GLOBAL
))

	)

376 #ifde‡
_KERNEL


380 
	#IN6_IS_SCOPE_LINKLOCAL
(
a
) \

381 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

382 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)))

	)

384 
	#IFA6_IS_DEPRECATED
(
a
) \

385 ((
a
)->
ü6_li„time
.
ü6t_¥e„ºed
 != 0 && \

386 (
a
)->
ü6_li„time
.
ü6t_¥e„ºed
 < 
time_£c⁄d
)

	)

387 
	#IFA6_IS_INVALID
(
a
) \

388 ((
a
)->
ü6_li„time
.
ü6t_expúe
 != 0 && \

389 (
a
)->
ü6_li„time
.
ü6t_expúe
 < 
time_£c⁄d
)

	)

395 #i‡
__BSD_VISIBLE


396 
	srouã_ö6
 {

397 
πíåy
 *
	mro_π
;

398 
sockaddr_ö6
 
	mro_d°
;

408 
	#IPV6_OPTIONS
 1

	)

409 
	#IPV6_RECVOPTS
 5

	)

410 
	#IPV6_RECVRETOPTS
 6

	)

411 
	#IPV6_RECVDSTADDR
 7

	)

412 
	#IPV6_RETOPTS
 8

	)

414 
	#IPV6_SOCKOPT_RESERVED1
 3

	)

415 
	#IPV6_UNICAST_HOPS
 4

	)

416 
	#IPV6_MULTICAST_IF
 9

	)

417 
	#IPV6_MULTICAST_HOPS
 10

	)

418 
	#IPV6_MULTICAST_LOOP
 11

	)

419 
	#IPV6_JOIN_GROUP
 12

	)

420 
	#IPV6_LEAVE_GROUP
 13

	)

421 
	#IPV6_PORTRANGE
 14

	)

422 
	#ICMP6_FILTER
 18

	)

424 #ifde‡
_KERNEL


425 
	#IPV6_2292PKTINFO
 19

	)

426 
	#IPV6_2292HOPLIMIT
 20

	)

427 
	#IPV6_2292NEXTHOP
 21

	)

428 
	#IPV6_2292HOPOPTS
 22

	)

429 
	#IPV6_2292DSTOPTS
 23

	)

430 
	#IPV6_2292RTHDR
 24

	)

431 
	#IPV6_2292PKTOPTIONS
 25

	)

434 
	#IPV6_CHECKSUM
 26

	)

435 
	#IPV6_V6ONLY
 27

	)

436 #i‚de‡
_KERNEL


437 
	#IPV6_BINDV6ONLY
 
IPV6_V6ONLY


	)

441 
	#IPV6_IPSEC_POLICY
 28

	)

443 
	#IPV6_FAITH
 29

	)

446 
	#IPV6_FW_ADD
 30

	)

447 
	#IPV6_FW_DEL
 31

	)

448 
	#IPV6_FW_FLUSH
 32

	)

449 
	#IPV6_FW_ZERO
 33

	)

450 
	#IPV6_FW_GET
 34

	)

454 
	#IPV6_RTHDRDSTOPTS
 35

	)

456 
	#IPV6_RECVPKTINFO
 36

	)

457 
	#IPV6_RECVHOPLIMIT
 37

	)

458 
	#IPV6_RECVRTHDR
 38

	)

459 
	#IPV6_RECVHOPOPTS
 39

	)

460 
	#IPV6_RECVDSTOPTS
 40

	)

461 #ifde‡
_KERNEL


462 
	#IPV6_RECVRTHDRDSTOPTS
 41

	)

465 
	#IPV6_USE_MIN_MTU
 42

	)

466 
	#IPV6_RECVPATHMTU
 43

	)

468 
	#IPV6_PATHMTU
 44

	)

471 
	#IPV6_REACHCONF
 45

	)

476 
	#IPV6_PKTINFO
 46

	)

477 
	#IPV6_HOPLIMIT
 47

	)

478 
	#IPV6_NEXTHOP
 48

	)

479 
	#IPV6_HOPOPTS
 49

	)

480 
	#IPV6_DSTOPTS
 50

	)

481 
	#IPV6_RTHDR
 51

	)

483 
	#IPV6_PKTOPTIONS
 52

	)

487 
	#IPV6_RECVTCLASS
 57

	)

489 
	#IPV6_AUTOFLOWLABEL
 59

	)

491 
	#IPV6_TCLASS
 61

	)

492 
	#IPV6_DONTFRAG
 62

	)

494 
	#IPV6_PREFER_TEMPADDR
 63

	)

500 
	#IPV6_RTHDR_LOOSE
 0

	)

501 
	#IPV6_RTHDR_STRICT
 1

	)

502 
	#IPV6_RTHDR_TYPE_0
 0

	)

507 
	#IPV6_DEFAULT_MULTICAST_HOPS
 1

	)

508 
	#IPV6_DEFAULT_MULTICAST_LOOP
 1

	)

513 
	sùv6_mªq
 {

514 
ö6_addr
 
	mùv6mr_mu…üddr
;

515 
	mùv6mr_öãrÁ˚
;

521 
	sö6_pktöfo
 {

522 
ö6_addr
 
	mùi6_addr
;

523 
	mùi6_ifödex
;

529 
	sù6_mtuöfo
 {

530 
sockaddr_ö6
 
	mù6m_addr
;

531 
uöt32_t
 
	mù6m_mtu
;

538 
	#IPV6_PORTRANGE_DEFAULT
 0

	)

539 
	#IPV6_PORTRANGE_HIGH
 1

	)

540 
	#IPV6_PORTRANGE_LOW
 2

	)

542 #i‡
__BSD_VISIBLE


549 
	#IPV6PROTO_MAXID
 (
IPPROTO_PIM
 + 1Ë

	)

554 
	#IPV6CTL_FORWARDING
 1

	)

555 
	#IPV6CTL_SENDREDIRECTS
 2

	)

556 
	#IPV6CTL_DEFHLIM
 3

	)

557 #ifde‡
nŸyë


558 
	#IPV6CTL_DEFMTU
 4

	)

560 
	#IPV6CTL_FORWSRCRT
 5

	)

561 
	#IPV6CTL_STATS
 6

	)

562 
	#IPV6CTL_MRTSTATS
 7

	)

563 
	#IPV6CTL_MRTPROTO
 8

	)

564 
	#IPV6CTL_MAXFRAGPACKETS
 9

	)

565 
	#IPV6CTL_SOURCECHECK
 10

	)

566 
	#IPV6CTL_SOURCECHECK_LOGINT
 11

	)

567 
	#IPV6CTL_ACCEPT_RTADV
 12

	)

568 
	#IPV6CTL_KEEPFAITH
 13

	)

569 
	#IPV6CTL_LOG_INTERVAL
 14

	)

570 
	#IPV6CTL_HDRNESTLIMIT
 15

	)

571 
	#IPV6CTL_DAD_COUNT
 16

	)

572 
	#IPV6CTL_AUTO_FLOWLABEL
 17

	)

573 
	#IPV6CTL_DEFMCASTHLIM
 18

	)

574 
	#IPV6CTL_GIF_HLIM
 19

	)

575 
	#IPV6CTL_KAME_VERSION
 20

	)

576 
	#IPV6CTL_USE_DEPRECATED
 21

	)

577 
	#IPV6CTL_RR_PRUNE
 22

	)

579 
	#IPV6CTL_MAPPED_ADDR
 23

	)

581 
	#IPV6CTL_V6ONLY
 24

	)

582 
	#IPV6CTL_RTEXPIRE
 25

	)

583 
	#IPV6CTL_RTMINEXPIRE
 26

	)

584 
	#IPV6CTL_RTMAXCACHE
 27

	)

586 
	#IPV6CTL_USETEMPADDR
 32

	)

587 
	#IPV6CTL_TEMPPLTIME
 33

	)

588 
	#IPV6CTL_TEMPVLTIME
 34

	)

589 
	#IPV6CTL_AUTO_LINKLOCAL
 35

	)

590 
	#IPV6CTL_RIP6STATS
 36

	)

591 
	#IPV6CTL_PREFER_TEMPADDR
 37

	)

592 
	#IPV6CTL_ADDRCTLPOLICY
 38

	)

594 
	#IPV6CTL_MAXFRAGS
 41

	)

598 
	#IPV6CTL_MAXID
 42

	)

604 
	#M_AUTHIPHDR
 
M_PROTO2


	)

605 
	#M_DECRYPTED
 
M_PROTO3


	)

606 
	#M_LOOP
 
M_PROTO4


	)

607 
	#M_AUTHIPDGM
 
M_PROTO5


	)

609 #ifde‡
_KERNEL


610 
	gcmsghdr
;

612 
ö6_cksum
 
__P
((
mbuf
 *, 
u_öt8_t
, 
u_öt32_t
, u_int32_t));

613 
ö6_loˇœddr
 
__P
((
ö6_addr
 *));

614 
ö6_addrsc›e
 
__P
((
ö6_addr
 *));

615 
ö6_iÁddr
 *
ö6_iÁwôhiÂ
 
__P
((
i‚ë
 *, 
ö6_addr
 *));

616 
ö6_if_up
 
__P
((
i‚ë
 *));

617 
	gsockaddr
;

618 
u_ch¨
 
ù6_¥Ÿox
[];

620 
ö6_sö6_2_sö
 
__P
((
sockaddr_ö
 *
sö
,

621 
sockaddr_ö6
 *
sö6
));

622 
ö6_sö_2_v4m≠sö6
 
__P
((
sockaddr_ö
 *
sö
,

623 
sockaddr_ö6
 *
sö6
));

624 
ö6_sö6_2_sö_ö_sock
 
__P
((
sockaddr
 *
«m
));

625 
ö6_sö_2_v4m≠sö6_ö_sock
 
__P
((
sockaddr
 **
«m
));

626 
addr£l_pﬁicy_öô
 
__P
(());

628 
	#ßtosö6
(
ß
Ë((
sockaddr_ö6
 *)(ß))

	)

629 
	#sö6toß
(
sö6
Ë((
sockaddr
 *)(sö6))

	)

630 
	#iÁtoü6
(
iÁ
Ë((
ö6_iÁddr
 *)(iÁ))

	)

632 (*
Áôh¥efix_p
)(
ö6_addr
 *);

635 #i‚de‡
_SIZE_T_DECLARED


636 
__size_t
 
	tsize_t
;

637 
	#_SIZE_T_DECLARED


	)

640 #i‚de‡
_SOCKLEN_T_DECLARED


641 
__sockÀn_t
 
	tsockÀn_t
;

642 
	#_SOCKLEN_T_DECLARED


	)

645 #i‡
__BSD_VISIBLE


647 
__BEGIN_DECLS


648 
cmsghdr
;

650 
öë6_›ti⁄_•a˚
 
	`__P
(());

651 
öë6_›ti⁄_öô
 
	`__P
((*, 
cmsghdr
 **, ));

652 
öë6_›ti⁄_≠≥nd
 
	`__P
((
cmsghdr
 *, c⁄° 
uöt8_t
 *,

654 
uöt8_t
 *
öë6_›ti⁄_Æloc
 
	`__P
((
cmsghdr
 *, , , ));

655 
öë6_›ti⁄_√xt
 
	`__P
((c⁄° 
cmsghdr
 *, 
uöt8_t
 **));

656 
öë6_›ti⁄_föd
 
	`__P
((c⁄° 
cmsghdr
 *, 
uöt8_t
 **, ));

658 
size_t
 
öë6_πhdr_•a˚
 
	`__P
((, ));

659 
cmsghdr
 *
öë6_πhdr_öô
 
	`__P
((*, ));

660 
öë6_πhdr_add
 
	`__P
((
cmsghdr
 *, c⁄° 
ö6_addr
 *,

662 
öë6_πhdr_œ°h›
 
	`__P
((
cmsghdr
 *, ));

664 
öë6_πhdr_ªvî£
 
	`__P
((c⁄° 
cmsghdr
 *, cmsghdr *));

666 
öë6_πhdr_£gmíts
 
	`__P
((c⁄° 
cmsghdr
 *));

667 
ö6_addr
 *
öë6_πhdr_gëaddr
 
	`__P
((
cmsghdr
 *, ));

668 
öë6_πhdr_gëÊags
 
	`__P
((c⁄° 
cmsghdr
 *, ));

670 
öë6_›t_öô
 
	`__P
((*, 
sockÀn_t
));

671 
öë6_›t_≠≥nd
 
	`__P
((*, 
sockÀn_t
, , 
uöt8_t
, socklen_t,

672 
uöt8_t
, **));

673 
öë6_›t_föish
 
	`__P
((*, 
sockÀn_t
, ));

674 
öë6_›t_£t_vÆ
 
	`__P
((*, , *, 
sockÀn_t
));

676 
öë6_›t_√xt
 
	`__P
((*, 
sockÀn_t
, , 
uöt8_t
 *, socklen_t *,

678 
öë6_›t_föd
 
	`__P
((*, 
sockÀn_t
, , 
uöt8_t
, socklen_t *,

680 
öë6_›t_gë_vÆ
 
	`__P
((*, , *, 
sockÀn_t
));

681 
sockÀn_t
 
öë6_πh_•a˚
 
	`__P
((, ));

682 *
öë6_πh_öô
 
	`__P
((*, 
sockÀn_t
, , ));

683 
öë6_πh_add
 
	`__P
((*, c⁄° 
ö6_addr
 *));

684 
öë6_πh_ªvî£
 
	`__P
((const *, *));

685 
öë6_πh_£gmíts
 
	`__P
((const *));

686 
ö6_addr
 *
öë6_πh_gëaddr
 
	`__P
((const *, ));

687 
__END_DECLS


	@/usr/include/strings.h

29 #i‚de‡
_STRINGS_H_


30 
	#_STRINGS_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 #i‚de‡
_SIZE_T_DECLARED


36 
__size_t
 
	tsize_t
;

37 
	#_SIZE_T_DECLARED


	)

40 
__BEGIN_DECLS


41 
	$bcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

42 
	`bc›y
(c⁄° *, *, 
size_t
);

43 
	`bzîo
(*, 
size_t
);

44 
	$ffs
(Ë
__puª2
;

45 #ifde‡
__BSD_VISIBLE


46 
	$ff¶
(Ë
__puª2
;

47 
	$Ês
(Ë
__puª2
;

48 
	$Ê¶
(Ë
__puª2
;

50 *
	$ödex
(c⁄° *, Ë
__puª
;

51 *
	$rödex
(c⁄° *, Ë
__puª
;

52 
	$°rˇ£cmp
(c⁄° *, c⁄° *Ë
__puª
;

53 
	$°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

54 
__END_DECLS


	@/usr/include/sys/_iovec.h

33 #i‚de‡
_SYS__IOVEC_H_


34 
	#_SYS__IOVEC_H_


	)

36 
	~<sys/_ty≥s.h
>

38 #i‚de‡
_SIZE_T_DECLARED


39 
__size_t
 
	tsize_t
;

40 
	#_SIZE_T_DECLARED


	)

43 
	siovec
 {

44 *
	miov_ba£
;

45 
size_t
 
	miov_Àn
;

	@/usr/include/sys/_null.h

29 #i‚de‡
NULL


31 #i‡
deföed
(
_KERNEL
Ë|| !deföed(
__˝lu•lus
)

32 
	#NULL
 ((*)0)

	)

34 #i‡
deföed
(
__LP64__
)

35 
	#NULL
 (0L)

	)

37 
	#NULL
 0

	)

	@/usr/include/sys/_sigset.h

38 #i‚de‡
_SYS__SIGSET_H_


39 
	#_SYS__SIGSET_H_


	)

44 
	#_SIG_WORDS
 4

	)

45 
	#_SIG_MAXSIG
 128

	)

46 
	#_SIG_IDX
(
sig
Ë((sigË- 1)

	)

47 
	#_SIG_WORD
(
sig
Ë(
	`_SIG_IDX
(sigË>> 5)

	)

48 
	#_SIG_BIT
(
sig
Ë(1 << (
	`_SIG_IDX
(sigË& 31))

	)

49 
	#_SIG_VALID
(
sig
Ë((sigË<
_SIG_MAXSIG
 && (sigË> 0)

	)

51 
	s__sig£t
 {

52 
__uöt32_t
 
	m__bôs
[
_SIG_WORDS
];

53 } 
	t__sig£t_t
;

55 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
)

56 
	tosig£t_t
;

	@/usr/include/sys/_timeval.h

29 #i‚de‡
_SYS__TIMEVAL_H_


30 
	#_SYS__TIMEVAL_H_


	)

32 
	~<sys/_ty≥s.h
>

34 #i‚de‡
_SUSECONDS_T_DECLARED


35 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

36 
	#_SUSECONDS_T_DECLARED


	)

39 #i‚de‡
_TIME_T_DECLARED


40 
__time_t
 
	ttime_t
;

41 
	#_TIME_T_DECLARED


	)

47 
	stimevÆ
 {

48 
	mtv_£c
;

49 
su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/sys/_types.h

29 #i‚de‡
_SYS__TYPES_H_


30 
	#_SYS__TYPES_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<machöe/_ty≥s.h
>

38 
__öt32_t
 
	t__˛ockid_t
;

39 
__uöt32_t
 
	t__fÊags_t
;

40 
__uöt64_t
 
	t__fsblk˙t_t
;

41 
__uöt64_t
 
	t__fsfû˙t_t
;

42 
__uöt32_t
 
	t__gid_t
;

43 
__öt64_t
 
	t__id_t
;

44 
__uöt32_t
 
	t__öo_t
;

45 
	t__key_t
;

46 
__öt32_t
 
	t__lwpid_t
;

47 
__uöt16_t
 
	t__mode_t
;

48 
	t__∆_ôem
;

49 
__uöt16_t
 
	t__∆ök_t
;

50 
__öt64_t
 
	t__off_t
;

51 
__öt32_t
 
	t__pid_t
;

52 
__öt64_t
 
	t__æim_t
;

53 
__uöt8_t
 
	t__ß_Ámûy_t
;

54 
__uöt32_t
 
	t__sockÀn_t
;

55 
	t__su£c⁄ds_t
;

56 
__öt32_t
 
	t__timî_t
;

57 
__uöt32_t
 
	t__uid_t
;

58 
	t__u£c⁄ds_t
;

78 
	t__˘_ru√_t
;

79 
__˘_ru√_t
 
	t__ru√_t
;

80 
__˘_ru√_t
 
	t__wch¨_t
;

81 
__˘_ru√_t
 
	t__wöt_t
;

83 
__uöt32_t
 
	t__dev_t
;

85 
__uöt32_t
 
	t__fix±_t
;

92 
	m__mb°©e8
[128];

93 
__öt64_t
 
	m_mb°©eL
;

94 } 
	t__mb°©e_t
;

	@/usr/include/sys/signal.h

38 #i‚de‡
_SYS_SIGNAL_H_


39 
	#_SYS_SIGNAL_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_ty≥s.h
>

43 
	~<sys/_sig£t.h
>

45 
	~<machöe/sig«l.h
>

50 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


51 
	#SIGHUP
 1

	)

53 
	#SIGINT
 2

	)

54 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


55 
	#SIGQUIT
 3

	)

57 
	#SIGILL
 4

	)

58 #i‡
__XSI_VISIBLE


59 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 #i‡
__BSD_VISIBLE


63 
	#SIGIOT
 
SIGABRT


	)

64 
	#SIGEMT
 7

	)

66 
	#SIGFPE
 8

	)

67 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


68 
	#SIGKILL
 9

	)

70 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


71 
	#SIGBUS
 10

	)

73 
	#SIGSEGV
 11

	)

74 #i‡
__BSD_VISIBLE


75 
	#SIGSYS
 12

	)

77 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


78 
	#SIGPIPE
 13

	)

79 
	#SIGALRM
 14

	)

81 
	#SIGTERM
 15

	)

82 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


83 
	#SIGURG
 16

	)

85 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


86 
	#SIGSTOP
 17

	)

87 
	#SIGTSTP
 18

	)

88 
	#SIGCONT
 19

	)

89 
	#SIGCHLD
 20

	)

90 
	#SIGTTIN
 21

	)

91 
	#SIGTTOU
 22

	)

93 #i‡
__BSD_VISIBLE


94 
	#SIGIO
 23

	)

96 #i‡
__XSI_VISIBLE


97 
	#SIGXCPU
 24

	)

98 
	#SIGXFSZ
 25

	)

99 
	#SIGVTALRM
 26

	)

100 
	#SIGPROF
 27

	)

102 #i‡
__BSD_VISIBLE


103 
	#SIGWINCH
 28

	)

104 
	#SIGINFO
 29

	)

106 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


107 
	#SIGUSR1
 30

	)

108 
	#SIGUSR2
 31

	)

110 #i‡
__BSD_VISIBLE


111 
	#SIGTHR
 32

	)

117 
	#SIG_DFL
 ((
__sigh™dÀr_t
 *)0)

	)

118 
	#SIG_IGN
 ((
__sigh™dÀr_t
 *)1)

	)

119 
	#SIG_ERR
 ((
__sigh™dÀr_t
 *)-1)

	)

140 
	t__sigh™dÀr_t
();

142 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


143 #i‚de‡
_SIGSET_T_DECLARED


144 
	#_SIGSET_T_DECLARED


	)

145 
__sig£t_t
 
	tsig£t_t
;

149 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE
 >= 500

150 
	usigvÆ
 {

152 
	msigvÆ_öt
;

153 *
	msigvÆ_±r
;

157 #i‡
__POSIX_VISIBLE
 >= 199309

158 
	ssigevít
 {

159 
	msigev_nŸify
;

161 
	m__sigev_signo
;

162 
	m__sigev_nŸify_kqueue
;

163 } 
	m__sigev_u
;

164 
sigvÆ
 
	msigev_vÆue
;

169 
	#sigev_signo
 
__sigev_u
.
__sigev_signo


	)

170 #i‡
__BSD_VISIBLE


171 
	#sigev_nŸify_kqueue
 
__sigev_u
.
__sigev_nŸify_kqueue


	)

174 
	#SIGEV_NONE
 0

	)

175 
	#SIGEV_SIGNAL
 1

	)

176 #i‡
__BSD_VISIBLE


177 
	#SIGEV_KEVENT
 3

	)

184 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE


185 
	s__sigöfo
 {

186 
	msi_signo
;

187 
	msi_î∫o
;

194 
	msi_code
;

195 
__pid_t
 
	msi_pid
;

196 
__uid_t
 
	msi_uid
;

197 
	msi_°©us
;

198 *
	msi_addr
;

199 
sigvÆ
 
	msi_vÆue
;

200 
	msi_b™d
;

201 
	m__•¨e__
[7];

202 } 
	tsigöfo_t
;

205 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


206 
	g__sigöfo
;

211 
	ssiga˘i⁄
 {

213 (*
	m__ß_h™dÀr
)();

214 (*
	m__ß_siga˘i⁄
)(, 
	m__sigöfo
 *, *);

215 } 
	m__siga˘i⁄_u
;

216 
	mß_Êags
;

217 
sig£t_t
 
	mß_mask
;

220 
	#ß_h™dÀr
 
__siga˘i⁄_u
.
__ß_h™dÀr


	)

223 #i‡
__XSI_VISIBLE


225 
	#ß_siga˘i⁄
 
__siga˘i⁄_u
.
__ß_siga˘i⁄


	)

228 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


229 
	#SA_NOCLDSTOP
 0x0008

	)

232 #i‡
__XSI_VISIBLE


233 
	#SA_ONSTACK
 0x0001

	)

234 
	#SA_RESTART
 0x0002

	)

235 
	#SA_RESETHAND
 0x0004

	)

236 
	#SA_NODEFER
 0x0010

	)

237 
	#SA_NOCLDWAIT
 0x0020

	)

238 
	#SA_SIGINFO
 0x0040

	)

241 #i‡
__BSD_VISIBLE


242 
	#NSIG
 32

	)

245 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


246 
	#SI_USER
 0x10001

	)

247 
	#SI_QUEUE
 0x10002

	)

248 
	#SI_TIMER
 0x10003

	)

249 
	#SI_ASYNCIO
 0x10004

	)

250 
	#SI_MESGQ
 0x10005

	)

252 #i‡
__BSD_VISIBLE


253 
	#SI_UNDEFINED
 0

	)

256 #i‡
__BSD_VISIBLE


257 
__sigh™dÀr_t
 *
	tsig_t
;

258 
	t__sigöfoh™dÀr_t
(, 
	t__sigöfo
 *, *);

261 #i‡
__XSI_VISIBLE


265 #i‡
__BSD_VISIBLE


266 
	ssigÆt°ack
 {

270 *
	mss_•
;

271 
__size_t
 
	mss_size
;

272 
	mss_Êags
;

273 } 
	t°ack_t
;

275 
	#SS_ONSTACK
 0x0001

	)

276 
	#SS_DISABLE
 0x0004

	)

277 
	#SIGSTKSZ
 (
MINSIGSTKSZ
 + 32768Ë

	)

280 #i‡
__BSD_VISIBLE


285 
	ssigvec
 {

286 
__sigh™dÀr_t
 *
	msv_h™dÀr
;

287 
	msv_mask
;

288 
	msv_Êags
;

291 
	#SV_ONSTACK
 
SA_ONSTACK


	)

292 
	#SV_INTERRUPT
 
SA_RESTART


	)

293 
	#SV_RESETHAND
 
SA_RESETHAND


	)

294 
	#SV_NODEFER
 
SA_NODEFER


	)

295 
	#SV_NOCLDSTOP
 
SA_NOCLDSTOP


	)

296 
	#SV_SIGINFO
 
SA_SIGINFO


	)

297 
	#sv_⁄°ack
 
sv_Êags


	)

301 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
) && \

302 !
deföed
(
__i386__
Ë&& !
	$deföed
(
__Æpha__
)

303 
	sosigc⁄ãxt
 {

304 
_nŸ_u£d
;

308 #i‡
__XSI_VISIBLE


312 
	ssig°ack
 {

314 *
ss_•
;

315 
ss_⁄°ack
;

319 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE <= 200112

324 
	#sigmask
(
m
Ë(1 << ((m)-1))

	)

327 #i‡
__BSD_VISIBLE


328 
	#BADSIG
 
SIG_ERR


	)

331 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


335 
	#SIG_BLOCK
 1

	)

336 
	#SIG_UNBLOCK
 2

	)

337 
	#SIG_SETMASK
 3

	)

344 
__BEGIN_DECLS


345 
__sigh™dÀr_t
 *
	`sig«l
(, __sighandler_t *);

346 
__END_DECLS


	@/usr/include/sys/timespec.h

38 #i‚de‡
_SYS_TIMESPEC_H_


39 
	#_SYS_TIMESPEC_H_


	)

41 #i‚de‡
_TIME_T_DECLARED


42 
__time_t
 
	ttime_t
;

43 
	#_TIME_T_DECLARED


	)

46 
	stime•ec
 {

47 
time_t
 
	mtv_£c
;

48 
	mtv_n£c
;

51 #i‡
__BSD_VISIBLE


52 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) \

54 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

55 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

56 } 0)

	)

57 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) \

59 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

60 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

61 } 0)

	)

	@/usr/include/sys/unistd.h

33 #i‚de‡
_SYS_UNISTD_H_


34 
	#_SYS_UNISTD_H_


	)

36 
	~<sys/cdefs.h
>

52 
	#_POSIX_ADVISORY_INFO
 -1

	)

53 
	#_POSIX_ASYNCHRONOUS_IO
 0

	)

54 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_CLOCK_SELECTION
 -1

	)

56 
	#_POSIX_CPUTIME
 -1

	)

57 
	#_POSIX_FSYNC
 200112L

	)

58 
	#_POSIX_IPV6
 0

	)

59 
	#_POSIX_JOB_CONTROL
 1

	)

60 
	#_POSIX_MAPPED_FILES
 200112L

	)

61 
	#_POSIX_MEMLOCK
 -1

	)

62 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

63 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

64 
	#_POSIX_MESSAGE_PASSING
 -1

	)

65 
	#_POSIX_MONOTONIC_CLOCK
 -1

	)

66 
	#_POSIX_NO_TRUNC
 1

	)

67 
	#_POSIX_PRIORITIZED_IO
 -1

	)

68 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

69 
	#_POSIX_RAW_SOCKETS
 200112L

	)

70 
	#_POSIX_REALTIME_SIGNALS
 -1

	)

71 
	#_POSIX_SEMAPHORES
 -1

	)

72 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

73 
	#_POSIX_SPORADIC_SERVER
 -1

	)

74 
	#_POSIX_SYNCHRONIZED_IO
 -1

	)

75 
	#_POSIX_TIMEOUTS
 -1

	)

76 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

77 
	#_POSIX_VDISABLE
 0xff

	)

79 #i‡
__XSI_VISIBLE


80 
	#_XOPEN_SHM
 1

	)

81 
	#_XOPEN_STREAMS
 -1

	)

91 #ifdef 
_NOT_AVAILABLE


92 
	#_POSIX_SAVED_IDS
 1

	)

96 
	#_POSIX_VERSION
 200112L

	)

99 
	#F_OK
 0

	)

100 
	#X_OK
 0x01

	)

101 
	#W_OK
 0x02

	)

102 
	#R_OK
 0x04

	)

105 #i‚de‡
SEEK_SET


106 
	#SEEK_SET
 0

	)

107 
	#SEEK_CUR
 1

	)

108 
	#SEEK_END
 2

	)

111 #i‚de‡
_POSIX_SOURCE


113 
	#L_SET
 
SEEK_SET


	)

114 
	#L_INCR
 
SEEK_CUR


	)

115 
	#L_XTND
 
SEEK_END


	)

119 
	#_PC_LINK_MAX
 1

	)

120 
	#_PC_MAX_CANON
 2

	)

121 
	#_PC_MAX_INPUT
 3

	)

122 
	#_PC_NAME_MAX
 4

	)

123 
	#_PC_PATH_MAX
 5

	)

124 
	#_PC_PIPE_BUF
 6

	)

125 
	#_PC_CHOWN_RESTRICTED
 7

	)

126 
	#_PC_NO_TRUNC
 8

	)

127 
	#_PC_VDISABLE
 9

	)

129 #i‡
__POSIX_VISIBLE
 >= 199309

130 
	#_PC_ASYNC_IO
 53

	)

131 
	#_PC_PRIO_IO
 54

	)

132 
	#_PC_SYNC_IO
 55

	)

135 #i‡
__POSIX_VISIBLE
 >= 200112

136 
	#_PC_ALLOC_SIZE_MIN
 10

	)

137 
	#_PC_FILESIZEBITS
 12

	)

138 
	#_PC_REC_INCR_XFER_SIZE
 14

	)

139 
	#_PC_REC_MAX_XFER_SIZE
 15

	)

140 
	#_PC_REC_MIN_XFER_SIZE
 16

	)

141 
	#_PC_REC_XFER_ALIGN
 17

	)

142 
	#_PC_SYMLINK_MAX
 18

	)

145 #i‡
__BSD_VISIBLE


146 
	#_PC_ACL_EXTENDED
 59

	)

147 
	#_PC_ACL_PATH_MAX
 60

	)

148 
	#_PC_CAP_PRESENT
 61

	)

149 
	#_PC_INF_PRESENT
 62

	)

150 
	#_PC_MAC_PRESENT
 63

	)

153 #i‡
__BSD_VISIBLE


159 
	#RFNAMEG
 (1<<0Ë

	)

160 
	#RFENVG
 (1<<1Ë

	)

161 
	#RFFDG
 (1<<2Ë

	)

162 
	#RFNOTEG
 (1<<3Ë

	)

163 
	#RFPROC
 (1<<4Ë

	)

164 
	#RFMEM
 (1<<5Ë

	)

165 
	#RFNOWAIT
 (1<<6Ë

	)

166 
	#RFCNAMEG
 (1<<10Ë

	)

167 
	#RFCENVG
 (1<<11Ë

	)

168 
	#RFCFDG
 (1<<12Ë

	)

169 
	#RFTHREAD
 (1<<13Ë

	)

170 
	#RFSIGSHARE
 (1<<14Ë

	)

171 
	#RFLINUXTHPN
 (1<<16Ë

	)

172 
	#RFSTOPPED
 (1<<17Ë

	)

173 
	#RFHIGHPID
 (1<<18Ë

	)

174 
	#RFPPWAIT
 (1<<31Ë

	)

175 
	#RFKERNELONLY
 (
RFSTOPPED
 | 
RFHIGHPID
 | 
RFPPWAIT
)

	)

	@/usr/include/machine/_types.h

39 #i‚de‡
_MACHINE__TYPES_H_


40 
	#_MACHINE__TYPES_H_


	)

45 
__sig√d
 
	t__öt8_t
;

46 
	t__uöt8_t
;

47 
	t__öt16_t
;

48 
	t__uöt16_t
;

49 
	t__öt32_t
;

50 
	t__uöt32_t
;

52 #i‡
deföed
(
löt
)

54 
	t__öt64_t
;

56 
	t__uöt64_t
;

57 #ñi‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

58 
	t__©åibuã__
((
	t__mode__
(
	t__DI__
))Ë
	t__öt64_t
;

59 
	t__©åibuã__
((
	t__mode__
(
	t__DI__
))Ë
	t__uöt64_t
;

62 
	t__öt64_t
;

64 
	t__uöt64_t
;

70 
	t__˛ock_t
;

71 
	t__˝umask_t
;

72 
__öt32_t
 
	t__¸ôiˇl_t
;

73 
	t__doubÀ_t
;

74 
	t__Êﬂt_t
;

75 
__öt32_t
 
	t__ötÂå_t
;

76 
__öt64_t
 
	t__ötmax_t
;

77 
__öt32_t
 
	t__öçå_t
;

78 
__öt32_t
 
	t__öt_Á°8_t
;

79 
__öt32_t
 
	t__öt_Á°16_t
;

80 
__öt32_t
 
	t__öt_Á°32_t
;

81 
__öt64_t
 
	t__öt_Á°64_t
;

82 
__öt8_t
 
	t__öt_Àa°8_t
;

83 
__öt16_t
 
	t__öt_Àa°16_t
;

84 
__öt32_t
 
	t__öt_Àa°32_t
;

85 
__öt64_t
 
	t__öt_Àa°64_t
;

86 
__öt32_t
 
	t__±rdiff_t
;

87 
__öt32_t
 
	t__ªgi°î_t
;

88 
__öt32_t
 
	t__£gsz_t
;

89 
__uöt32_t
 
	t__size_t
;

90 
__öt32_t
 
	t__ssize_t
;

91 
__öt32_t
 
	t__time_t
;

92 
__uöt32_t
 
	t__uötÂå_t
;

93 
__uöt64_t
 
	t__uötmax_t
;

94 
__uöt32_t
 
	t__uöçå_t
;

95 
__uöt32_t
 
	t__uöt_Á°8_t
;

96 
__uöt32_t
 
	t__uöt_Á°16_t
;

97 
__uöt32_t
 
	t__uöt_Á°32_t
;

98 
__uöt64_t
 
	t__uöt_Á°64_t
;

99 
__uöt8_t
 
	t__uöt_Àa°8_t
;

100 
__uöt16_t
 
	t__uöt_Àa°16_t
;

101 
__uöt32_t
 
	t__uöt_Àa°32_t
;

102 
__uöt64_t
 
	t__uöt_Àa°64_t
;

103 
__uöt32_t
 
	t__u_ªgi°î_t
;

104 
__uöt32_t
 
	t__vm_off£t_t
;

105 
__öt64_t
 
	t__vm_ooff£t_t
;

106 #ifde‡
PAE


107 
__uöt64_t
 
	t__vm_∑ddr_t
;

109 
__uöt32_t
 
	t__vm_∑ddr_t
;

111 
__uöt64_t
 
	t__vm_pödex_t
;

112 
__uöt32_t
 
	t__vm_size_t
;

117 #i‡(
	`deföed
(
__GNUC__
Ë&& (__GNUC__ =2 && 
__GNUC_MINOR__
 > 95 || __GNUC__ >3Ë&& !deföed(
__INTEL_COMPILER
))

118 
__buûtö_va_li°
 
	t__va_li°
;

120 * 
	t__va_li°
;

122 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
Ë&& !deföed(
__GNUC_VA_LIST
Ë&& !deföed(
__NO_GNUC_VA_LIST
)

123 
	#__GNUC_VA_LIST


	)

124 
__va_li°
 
	t__gnuc_va_li°
;

	@/usr/include/machine/signal.h

33 #i‚de‡
_MACHINE_SIGNAL_H_


34 
	#_MACHINE_SIGNAL_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_sig£t.h
>

43 
	tsig_©omic_t
;

45 #i‡
__XSI_VISIBLE


50 
	#MINSIGSTKSZ
 (512 * 4)

	)

53 #i‡
__BSD_VISIBLE


54 
	~<machöe/å≠.h
>

59 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
)

67 
	sosigc⁄ãxt
 {

68 
	msc_⁄°ack
;

69 
osig£t_t
 
	msc_mask
;

70 
	msc_e•
;

71 
	msc_ebp
;

72 
	msc_i•
;

73 
	msc_eù
;

74 
	msc_eÊ
;

75 
	msc_es
;

76 
	msc_ds
;

77 
	msc_cs
;

78 
	msc_ss
;

79 
	msc_edi
;

80 
	msc_esi
;

81 
	msc_ebx
;

82 
	msc_edx
;

83 
	msc_ecx
;

84 
	msc_óx
;

85 
	msc_gs
;

86 
	msc_fs
;

87 
	msc_å≠no
;

88 
	msc_îr
;

96 
	ssigc⁄ãxt
 {

97 
__sig£t
 
	msc_mask
;

98 
	msc_⁄°ack
;

99 
	msc_gs
;

100 
	msc_fs
;

101 
	msc_es
;

102 
	msc_ds
;

103 
	msc_edi
;

104 
	msc_esi
;

105 
	msc_ebp
;

106 
	msc_i•
;

107 
	msc_ebx
;

108 
	msc_edx
;

109 
	msc_ecx
;

110 
	msc_óx
;

111 
	msc_å≠no
;

112 
	msc_îr
;

113 
	msc_eù
;

114 
	msc_cs
;

115 
	msc_eÊ
;

116 
	msc_e•
;

117 
	msc_ss
;

118 
	msc_Àn
;

123 
	msc_Âf‹m©
;

124 
	msc_ow√dÂ
;

125 
	msc_•¨e1
[1];

126 
	msc_Â°©e
[128] 
__Æig√d
(16);

127 
	msc_•¨e2
[8];

130 
	#sc_•
 
sc_e•


	)

131 
	#sc_Â
 
sc_ebp


	)

132 
	#sc_pc
 
sc_eù


	)

133 
	#sc_ps
 
sc_eÊ


	)

134 
	#sc_eÊags
 
sc_eÊ


	)

	@/usr/include/runetype.h

40 #i‚def 
_RUNETYPE_H_


41 
	#_RUNETYPE_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_ty≥s.h
>

46 
	#_CACHED_RUNES
 (1 <<8 )

	)

47 
	#_CRMASK
 (~(
_CACHED_RUNES
 - 1))

	)

53 
__ru√_t
 
	m__mö
;

54 
__ru√_t
 
	m__max
;

55 
__ru√_t
 
	m__m≠
;

56 *
	m__ty≥s
;

57 } 
	t_Ru√E¡ry
;

60 
	m__ƒ™ges
;

61 
_Ru√E¡ry
 *
	m__ønges
;

62 } 
	t_Ru√R™ge
;

65 
	m__magic
[8];

66 
	m__ícodög
[32];

68 
__ru√_t
 (*
__sgëru√
)(c⁄° *, 
	m__size_t
, const **);

69 (*
	m__•uåu√
)(
	m__ru√_t
, *, 
	m__size_t
, **);

70 
__ru√_t
 
	m__övÆid_ru√
;

72 
	m__ru√ty≥
[
_CACHED_RUNES
];

73 
__ru√_t
 
	m__m≠lowî
[
_CACHED_RUNES
];

74 
__ru√_t
 
	m__m≠uµî
[
_CACHED_RUNES
];

81 
_Ru√R™ge
 
	m__ru√ty≥_ext
;

82 
_Ru√R™ge
 
	m__m≠lowî_ext
;

83 
_Ru√R™ge
 
	m__m≠uµî_ext
;

85 *
	m__v¨übÀ
;

86 
	m__v¨übÀ_Àn
;

87 } 
	t_Ru√LoˇÀ
;

89 
	#_RUNE_MAGIC_1
 "Ru√Magi"

	)

91 
_Ru√LoˇÀ
 
_DeÁu…Ru√LoˇÀ
;

92 
_Ru√LoˇÀ
 *
_CuºítRu√LoˇÀ
;

	@/usr/include/machine/trap.h

36 #i‚de‡
_MACHINE_TRAP_H_


37 
	#_MACHINE_TRAP_H_


	)

44 
	#T_PRIVINFLT
 1

	)

45 
	#T_BPTFLT
 3

	)

46 
	#T_ARITHTRAP
 6

	)

47 
	#T_PROTFLT
 9

	)

48 
	#T_TRCTRAP
 10

	)

49 
	#T_PAGEFLT
 12

	)

50 
	#T_ALIGNFLT
 14

	)

52 
	#T_DIVIDE
 18

	)

53 
	#T_NMI
 19

	)

54 
	#T_OFLOW
 20

	)

55 
	#T_BOUND
 21

	)

56 
	#T_DNA
 22

	)

57 
	#T_DOUBLEFLT
 23

	)

58 
	#T_FPOPFLT
 24

	)

59 
	#T_TSSFLT
 25

	)

60 
	#T_SEGNPFLT
 26

	)

61 
	#T_STKFLT
 27

	)

62 
	#T_MCHK
 28

	)

63 
	#T_XMMFLT
 29

	)

64 
	#T_RESERVED
 30

	)

69 
	#ILL_RESAD_FAULT
 
T_RESADFLT


	)

70 
	#ILL_PRIVIN_FAULT
 
T_PRIVINFLT


	)

71 
	#ILL_RESOP_FAULT
 
T_RESOPFLT


	)

72 
	#ILL_ALIGN_FAULT
 
T_ALIGNFLT


	)

73 
	#ILL_FPOP_FAULT
 
T_FPOPFLT


	)

76 
	#FPE_INTOVF
 1

	)

77 
	#FPE_INTDIV
 2

	)

78 
	#FPE_FLTDIV
 3

	)

79 
	#FPE_FLTOVF
 4

	)

80 
	#FPE_FLTUND
 5

	)

81 
	#FPE_FLTRES
 6

	)

82 
	#FPE_FLTINV
 7

	)

83 
	#FPE_FLTSUB
 8

	)

86 
	#FPE_INTOVF_TRAP
 0x1

	)

87 
	#FPE_INTDIV_TRAP
 0x2

	)

88 
	#FPE_FLTDIV_TRAP
 0x3

	)

89 
	#FPE_FLTOVF_TRAP
 0x4

	)

90 
	#FPE_FLTUND_TRAP
 0x5

	)

91 
	#FPE_FPU_NP_TRAP
 0x6

	)

92 
	#FPE_SUBRNG_TRAP
 0x7

	)

95 
	#BUS_PAGE_FAULT
 
T_PAGEFLT


	)

96 
	#BUS_SEGNP_FAULT
 
T_SEGNPFLT


	)

97 
	#BUS_STK_FAULT
 
T_STKFLT


	)

98 
	#BUS_SEGM_FAULT
 
T_RESERVED


	)

101 
	#T_USER
 0x100

	)

	@
1
.
1
/usr/include
44
940
cfg.c
init.c
lex.yy.c
log.c
main.c
signals.c
socket.c
y.tab.c
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/getopt.h
/usr/include/netinet/in.h
/usr/include/signal.h
/usr/include/stdarg.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/types.h
/usr/include/sys/un.h
/usr/include/sys/wait.h
/usr/include/time.h
/usr/include/unistd.h
y.tab.h
/usr/include/_ctype.h
/usr/include/machine/endian.h
/usr/include/machine/param.h
/usr/include/netinet6/in6.h
/usr/include/strings.h
/usr/include/sys/_iovec.h
/usr/include/sys/_null.h
/usr/include/sys/_sigset.h
/usr/include/sys/_timeval.h
/usr/include/sys/_types.h
/usr/include/sys/signal.h
/usr/include/sys/timespec.h
/usr/include/sys/unistd.h
/usr/include/machine/_types.h
/usr/include/machine/signal.h
/usr/include/runetype.h
/usr/include/machine/trap.h
